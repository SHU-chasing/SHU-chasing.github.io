<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chasing&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-03T16:36:34.009Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>祝健聪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随笔（一）</title>
    <link href="http://example.com/2020/11/04/%E9%9A%8F%E7%AC%94%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2020/11/04/%E9%9A%8F%E7%AC%94%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-11-03T16:26:09.000Z</published>
    <updated>2020-11-03T16:36:34.009Z</updated>
    
    <content type="html"><![CDATA[<p>刚才看完了杨学长的大学生活博客，感慨万千，遂记此篇。<br>大二第一学期已经接近尾声，专业课还没有开始复习，各种生活作息暂未调整好。刚来到计算机学院的第一个学期，认识了很多牛人，并从中学到了他们很多的学习经验。优秀的人总能在课内课外的学习之中保持好一个完美的平衡，他们多数也已经有了自己未来的发展方向，但是相比之下，自己的学习生活依旧存在非常多的不足。<br>总结一下这段时间自己的问题：<br>1.没有确定好自己的努力方向<br>python确实是一门非常简洁的语言，将其作为未来的方向也并非不可。在现在社会的大发展方向来看，从事人工智能方向或许是一个非常不错的选择，人工智能尚在理论阶段，涉及大量概率论，离散数学，数论等基础的数学问题。朝着这个方向发展，至少可以继续做我喜欢的数学，而不用像前端一般，重复无聊的美工工作。可是看完了各种大牛们的学历，这个行业实在是存在极强的学历歧视，对未来也是一个不小的挑战。<br>Java作为编程界的大哥，在就业上一直都是热门，<br>2.对保研和考研没有规划<br>因为我大一绩点并不是十分高，加之今年教务处保研政策大改，考研也许能成为比保研更好的出路，学校的填鸭式教学我根本不感兴趣，这种老旧的课程安排使得我们和非科班的学生平起平坐。然而全科目都需要在平时浪费非常多能够提升自己个人能力的时间（支持秦学长的话）。<br>考研或许是一个异常艰苦的路，但是我应该也做好了心里准备。数学一和专业课我平时绝对不能落下，至于英语和政治，在现在应该做到的确实也只剩下学习英语，并尽可能接触更多的英语文献（向lj同学学习，他的英语水平确实非常高），虽然是一条不平坦的路，但是我也应该拥有这种自控力。<br>3.无法静下心来专心学好某一门技术<br>这个学期的实训课跟着老师学习了一些opencv的皮毛，被老师表扬。但是我深知，作为机器学习的门而言，我还没有迈入半只腿。学习新知识并不能只从调库这个简单的行为来断，机器学习最难得的是其中的原理部分，可是就连PCA的基本公式我都不能理解。对于以后的发展依旧迷茫，无法深入某一个方向这是最大的毛病，我没有能够静下心来把某一个细节的领域做到很深，而是走马观花一般地，不知道自己的优势该往哪个方向发展。这段时间从哥们的推荐下买了一大批Java入门的书，以及计网和Linux入门，趁着考试周的间隙，应该耐着性子认真读完，最好可以记下笔记。这里要再次感谢朋友的帮助，大致方向先从机组计网、Linux，作为程序员的内功，这才是最重要的。<br>4.心态浮躁<br>每次打开同龄人之间的项目，无不在感慨自己的学识浅薄，但是自己连静下来学习他们的源代码的心态都没有。这最值得自责之处。每当我为新学的某一个内容而沾沾自喜之时，殊不知早有人已经赢在了起跑线。学习容不得半点浮躁，但是我却没有做到这点，值得自责与反思！</p><hr><p>从教务处的新通知，A楼自习室通宵开放，意识到自己并不应该提前回寝室，每次10点回来以后就白白浪费2小时，然后在凌晨陷入无限自责，第二天又是一个循环。尽可能待到12点，在不打扰别人的情况下，学好更深的技术。<br>看到我校的就业情况，再次后悔自己高考的结局。但东隅已逝，桑榆未晚，既然当下的现状无法改变，应该尽快调整好自己的心态，尽可能成为自己最想成为的人。</p><p>“所谓理想，就是基于热爱的事啊！”</p><p>文于2020年11月04日深夜</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚才看完了杨学长的大学生活博客，感慨万千，遂记此篇。&lt;br&gt;大二第一学期已经接近尾声，专业课还没有开始复习，各种生活作息暂未调整好。刚来到计算机学院的第一个学期，认识了很多牛人，并从中学到了他们很多的学习经验。优秀的人总能在课内课外的学习之中保持好一个完美的平衡，他们多数也</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>大一学习资料分享</title>
    <link href="http://example.com/2020/10/28/%E5%A4%A7%E4%B8%80%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/"/>
    <id>http://example.com/2020/10/28/%E5%A4%A7%E4%B8%80%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/</id>
    <published>2020-10-28T13:29:09.000Z</published>
    <updated>2020-11-03T15:56:16.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SHU社区学院资料整理"><a href="#SHU社区学院资料整理" class="headerlink" title="SHU社区学院资料整理"></a>SHU社区学院资料整理</h1><p>本着开源的原则，加之疫情期间在家全程的线上教学，在本人爱好收集文件的习惯之下，留下了一系列在社区学院期间学习的资料。涵盖了微积分，大学物理，线性代数，工程制图，中国近现代史纲要，军事理论等学科。其中包括课本、历年试卷、教学课件、笔记等，现将所有内容分享如下。<br>全文所分享的所有资料，仅供上海大学大一学生学习与交流使用。文章版权归个人所有，未经作者授权禁止转载（或注明出处），不得将其中的资料用作任何商业用途。</p><h2 id="1、大一课本："><a href="#1、大一课本：" class="headerlink" title="1、大一课本："></a>1、大一课本：</h2><p>大一期间的绝大多数课本pdf版（还有部分英语课本等，尽力完善）</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1E_NHlq-ERxFlMb6ZOvZIfA">https://pan.baidu.com/s/1E_NHlq-ERxFlMb6ZOvZIfA</a></p></blockquote><blockquote><p>提取码：dykb </p></blockquote><h2 id="2、历年期末试卷："><a href="#2、历年期末试卷：" class="headerlink" title="2、历年期末试卷："></a>2、历年期末试卷：</h2><p>部分学科的历年期末测试试卷</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/13eB0v-wAEBkCBeHpp7NfUg">https://pan.baidu.com/s/13eB0v-wAEBkCBeHpp7NfUg</a></p></blockquote><blockquote><p>提取码：qmsj </p></blockquote><h2 id="3、理工大类微积分试卷："><a href="#3、理工大类微积分试卷：" class="headerlink" title="3、理工大类微积分试卷："></a>3、理工大类微积分试卷：</h2><p>理工大类的微积分测试卷以及练习题等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Purl_p4G2LMvmpwHeBqImA">https://pan.baidu.com/s/1Purl_p4G2LMvmpwHeBqImA</a></p></blockquote><blockquote><p>提取码：gssj </p></blockquote><h2 id="4、线性代数资料："><a href="#4、线性代数资料：" class="headerlink" title="4、线性代数资料："></a>4、线性代数资料：</h2><p>史上最全的线性代数资料，包括大多数课件课本pdf，测试题，历年试卷，猴博士教程等等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1P95PTcMIWNJUCoK4rQ9s1w">https://pan.baidu.com/s/1P95PTcMIWNJUCoK4rQ9s1w</a></p></blockquote><blockquote><p>提取码：xxds </p></blockquote><h2 id="5、-高等数学电子教案："><a href="#5、-高等数学电子教案：" class="headerlink" title="5、 高等数学电子教案："></a>5、 高等数学电子教案：</h2><p>我校高等数学电子课件，转载自微信公众号“上大数学在线”，读者可以自行选择关注</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Bum6HY9qrrzp6gY0Zc6x9Q">https://pan.baidu.com/s/1Bum6HY9qrrzp6gY0Zc6x9Q</a></p></blockquote><blockquote><p>提取码：gdsx</p></blockquote><h2 id="6、大学物理电子教案："><a href="#6、大学物理电子教案：" class="headerlink" title="6、大学物理电子教案："></a>6、大学物理电子教案：</h2><p>大学物理的课件，由于线上上课质量不齐，整理的数目较少</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1oigVp21in-MPKVmmPHur4A">https://pan.baidu.com/s/1oigVp21in-MPKVmmPHur4A</a></p></blockquote><blockquote><p>提取码：dxwl </p></blockquote><h2 id="7、工程制图和计算机绘图基础："><a href="#7、工程制图和计算机绘图基础：" class="headerlink" title="7、工程制图和计算机绘图基础："></a>7、工程制图和计算机绘图基础：</h2><p>工程制图的习题集答案等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1SlZDrEkvIYgibgKa8l8x3Q">https://pan.baidu.com/s/1SlZDrEkvIYgibgKa8l8x3Q</a></p></blockquote><blockquote><p>提取码：gczt </p></blockquote><h2 id="8、-军事理论资料："><a href="#8、-军事理论资料：" class="headerlink" title="8、 军事理论资料："></a>8、 军事理论资料：</h2><p>军事理论复习提纲，anki背诵词典等，以及线上考试的题库</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1B5ECxo8G-IFMUJO9Xhm2VA">https://pan.baidu.com/s/1B5ECxo8G-IFMUJO9Xhm2VA</a></p></blockquote><blockquote><p>提取码：jsll </p></blockquote><h2 id="9、中国近现代史纲要："><a href="#9、中国近现代史纲要：" class="headerlink" title="9、中国近现代史纲要："></a>9、中国近现代史纲要：</h2><p>中近纲的题库，教辅书等等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1kXq7g2xi44dUmxUo1I44uw">https://pan.baidu.com/s/1kXq7g2xi44dUmxUo1I44uw</a> </p></blockquote><blockquote><p>提取码：jxds </p></blockquote><h2 id="10、未完待续："><a href="#10、未完待续：" class="headerlink" title="10、未完待续："></a>10、未完待续：</h2><p>整理不易，你的每一次浏览或者打赏都是对作者最大的支持。</p><p>希望大一的同学们能够合理利用学习资源，进入自己理想的专业！</p>]]></content>
    
    
    <summary type="html">上海大学社区学院学习资料分享</summary>
    
    
    
    <category term="学习资料" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="学习资料" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>web自动化实现SHU每日两报</title>
    <link href="http://example.com/2020/10/28/SHU%E6%AF%8F%E6%97%A5%E4%B8%A4%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://example.com/2020/10/28/SHU%E6%AF%8F%E6%97%A5%E4%B8%A4%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96/</id>
    <published>2020-10-28T03:13:09.000Z</published>
    <updated>2020-10-29T09:12:30.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SHU每日两报脚本"><a href="#SHU每日两报脚本" class="headerlink" title="SHU每日两报脚本"></a>SHU每日两报脚本</h1><h2 id="1-实现原理"><a href="#1-实现原理" class="headerlink" title="1. 实现原理"></a>1. 实现原理</h2><p>利用python中的Selenium库，并结合浏览器驱动，来自动完成每日两报的操作，最后测试结果将每天的体温设置区间为36度至37度之间（含小数点后一位）。同时，在使用前可以自己选择相应的填报日期，也可以在特定日期之内完成相应的填报操作。</p><h2 id="2-使用教程"><a href="#2-使用教程" class="headerlink" title="2. 使用教程"></a>2. 使用教程</h2><h3 id="2-1-使用步骤"><a href="#2-1-使用步骤" class="headerlink" title="2.1. 使用步骤"></a>2.1. 使用步骤</h3><p>1、首先，此程序基于python 3.8.5版本运行，使用的浏览器为Edge，版本号86.0.622.51 (Official build) (64-bit)，IDE为PyCharm 2020.1.3 (Professional Edition)<br>2、打开命令行，使用pip指令安装selenium<br><code>pip install selenium</code><br>3、通过浏览器官网下载相应的浏览器启动插件，将其设置为系统环境变量(可选)，也可以在程序中自行设置浏览器启动驱动位置，如在E盘的E:\Edgedriver目录，就更改默认的地址 driverUrl = r”E:\Edgedriver\msedgedriver.exe”<br>4、运行程序时，请关闭其他任何可能影响浏览器运行的插件或者软件，如果网络信号不佳，则需要将time.sleep(1)中的数值调大，以等待网页的元素彻底加载成功</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1. 准备工作"></a>3.1. 准备工作</h3><p>在本程序中，我使用了三个库，分别是selenium（主角），time以及random。<br>其次，设置好自己的浏览器驱动位置以及每日一报链接位置，并填写好自己的账号密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">myUsername=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的学号</span></span><br><span class="line">myPassword=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的姓名</span></span><br><span class="line">baseUrl=<span class="string">r&#x27;https://selfreport.shu.edu.cn/&#x27;</span> <span class="comment">#默认的每日两报地址</span></span><br><span class="line">driverUrl = <span class="string">r&quot;E:\Edgedriver\msedgedriver.exe&quot;</span> <span class="comment">#浏览器驱动，这里以Edge示例，不同的浏览器可以去官网下载</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="comment">#完成web自动化的一系列操作</span></span><br><span class="line"><span class="keyword">import</span> time <span class="comment">#设置程序等待时间，等待浏览器加载元素完全</span></span><br><span class="line"><span class="keyword">import</span> random <span class="comment">#设置温度随机数</span></span><br></pre></td></tr></table></figure><h3 id="3-2-登录账号"><a href="#3-2-登录账号" class="headerlink" title="3.2. 登录账号"></a>3.2. 登录账号</h3><p>准备好以上步骤以后，我们就可以打开浏览器并对其进行相应的操作。</p><p>输入代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Edge(driverUrl)<span class="comment">#通过驱动器打开浏览器</span></span><br><span class="line">driver.get(baseUrl)<span class="comment">#访问健康之路链接</span></span><br><span class="line">search_username = driver.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)<span class="comment">#找到用户名位置</span></span><br><span class="line">search_username.send_keys(myUsername)<span class="comment">#填写用户名</span></span><br><span class="line">search_password = driver.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)<span class="comment">#找到密码位置</span></span><br><span class="line">search_password.send_keys(myPassword)<span class="comment">#填写密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;submit&#x27;</span>).click()<span class="comment">#找到元素并且自动点击登录</span></span><br></pre></td></tr></table></figure><p>程序执行时，就会将自己的账号密码自动填入进入下章页面。</p><h3 id="3-3-进入报送历史界面"><a href="#3-3-进入报送历史界面" class="headerlink" title="3.3. 进入报送历史界面"></a>3.3. 进入报送历史界面</h3><p>如图，需要点进报送历史：<br><a href="https://imgchr.com/i/B8AzKH"><img src="https://s1.ax1x.com/2020/10/28/B8AzKH.png" alt="B8AzKH.png"></a></p><p>首先输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">&#x27;lbReportHistory&#x27;</span>).click()<span class="comment">#找到对应历史报送的按钮，点击</span></span><br></pre></td></tr></table></figure><p>然后即可进入历史界面，在这里每天的报送记录罗列如下：</p><p><a href="https://imgchr.com/i/B8AX8O"><img src="https://s1.ax1x.com/2020/10/28/B8AX8O.png" alt="B8AX8O.png"></a></p><h3 id="3-4-填写对应的信息"><a href="#3-4-填写对应的信息" class="headerlink" title="3.4. 填写对应的信息"></a>3.4. 填写对应的信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击对应的天数：</span></span><br><span class="line"><span class="built_in">object</span> = <span class="built_in">str</span>(date) + item</span><br><span class="line">driver.find_element_by_partial_link_text(<span class="built_in">object</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 勾选承诺项：</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;p1_ChengNuo-inputEl-icon&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写体温，随机在36.0-37.0之间</span></span><br><span class="line">search_temperature = driver.find_element_by_id(<span class="string">&quot;p1_TiWen-inputEl&quot;</span>)</span><br><span class="line">temperature = <span class="built_in">str</span>(random.randint(<span class="number">360</span>, <span class="number">370</span>) / <span class="number">10</span>)</span><br><span class="line">search_temperature.send_keys(temperature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 勾选状态&quot;良好&quot;</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;fineui_0-inputEl&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当天随申码颜色：&quot;绿色&quot;</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;fineui_7-inputEl-icon&quot;</span>).click()</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_7-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"><span class="comment"># webdriver.ActionChains(driver).move_to_element(element).click(element).perform()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 明天是否到食堂就餐：&quot;早餐，中餐，晚餐&quot;</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_8-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_9-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_10-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br></pre></td></tr></table></figure><p>以上代码均是对于填写页面元素的捕捉，并对发现的第一个元素发起提交按钮。<br>在这里，程序代码不能写成如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下操作无法实现，原因应该是元素定位相互覆盖。</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;fineui_8-inputEl-icon&quot;).click()</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;fineui_9-inputEl-icon&quot;).click()</span></span><br><span class="line"><span class="comment"># driver.find_element_bu_id(&quot;fineui_10-inputEl-icon&quot;).click()</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;p1_ctl00_btnSubmit&quot;).click()</span></span><br></pre></td></tr></table></figure><p>原因是代码中的元素相互覆盖，无法实现操作<br>最终选择并点击时的效果如下：<br><a href="https://imgchr.com/i/B8AOPK"><img src="https://s1.ax1x.com/2020/10/28/B8AOPK.png" alt="B8AOPK.png"></a></p><h3 id="3-5-点击确认按钮"><a href="#3-5-点击确认按钮" class="headerlink" title="3.5. 点击确认按钮"></a>3.5. 点击确认按钮</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 点击提交</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;p1_ctl00_btnSubmit&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 点击确认</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;fineui_14&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;fineui_19&quot;</span>)</span><br><span class="line"><span class="comment"># element = driver.find_element_by_class_name(&quot;f-btn-text&quot;)</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在这里我使用了time.sleep()函数，为了让程序停顿，原页面加载的过程中，会出现提交框晚出现的情况，所以需要让程序“等待”浏览器加载结束，最后填报。</p><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4. 完整代码"></a>4. 完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-25 15:24</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : release.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line">myUsername=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的学号</span></span><br><span class="line">myPassword=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的姓名</span></span><br><span class="line">baseUrl=<span class="string">r&#x27;https://selfreport.shu.edu.cn/&#x27;</span> <span class="comment">#默认的每日两报地址</span></span><br><span class="line">driverUrl = <span class="string">r&quot;E:\Edgedriver\msedgedriver.exe&quot;</span> <span class="comment">#浏览器驱动，这里以Edge示例，不同的浏览器可以去个官网下载</span></span><br><span class="line"><span class="keyword">from</span> selenium</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Hello,&quot;</span>)</span><br><span class="line">    driver = webdriver.Edge(driverUrl)</span><br><span class="line">    driver.get(baseUrl)</span><br><span class="line">    search_username = driver.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    search_username.send_keys(myUsername)</span><br><span class="line">    search_password = driver.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    search_password.send_keys(myPassword)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>,<span class="number">26</span>,<span class="number">1</span>):<span class="comment">#在此修改你想实现的日期，左闭右开，如这里为[19,26)，即19至25号</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> [<span class="string">&#x27;晨报&#x27;</span>,<span class="string">&#x27;晚报&#x27;</span>]:</span><br><span class="line">            <span class="comment"># print(&quot;Hello, world!&quot;)</span></span><br><span class="line">            <span class="comment"># driver = webdriver.Edge(driverUrl)</span></span><br><span class="line">            <span class="comment"># driver.get(baseUrl)</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&#x27;username&#x27;)</span></span><br><span class="line">            <span class="comment"># search_username = driver.find_element_by_id(&#x27;username&#x27;)</span></span><br><span class="line">            <span class="comment"># search_username.send_keys(myUsername)</span></span><br><span class="line">            <span class="comment"># search_password = driver.find_element_by_id(&#x27;password&#x27;)</span></span><br><span class="line">            <span class="comment"># search_password.send_keys(myPassword)</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&#x27;submit&#x27;).click()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 进入报送历史：</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">&#x27;lbReportHistory&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击对应的天数：</span></span><br><span class="line">            <span class="built_in">object</span> = <span class="built_in">str</span>(date) + item</span><br><span class="line">            driver.find_element_by_partial_link_text(<span class="built_in">object</span>).click()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 勾选承诺项：</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">&quot;p1_ChengNuo-inputEl-icon&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 填写体温，随机在36.0-37.0之间</span></span><br><span class="line">            search_temperature = driver.find_element_by_id(<span class="string">&quot;p1_TiWen-inputEl&quot;</span>)</span><br><span class="line">            temperature = <span class="built_in">str</span>(random.randint(<span class="number">360</span>, <span class="number">370</span>) / <span class="number">10</span>)</span><br><span class="line">            search_temperature.send_keys(temperature)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 勾选状态&quot;良好&quot;</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;fineui_0-inputEl&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当天随申码颜色：&quot;绿色&quot;</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">&quot;fineui_7-inputEl-icon&quot;</span>).click()</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_7-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            <span class="comment"># webdriver.ActionChains(driver).move_to_element(element).click(element).perform()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 明天是否到食堂就餐：&quot;早餐，中餐，晚餐&quot;</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_8-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_9-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_10-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 以下操作无法实现，原因应该是元素定位相互覆盖。</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&quot;fineui_8-inputEl-icon&quot;).click()</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&quot;fineui_9-inputEl-icon&quot;).click()</span></span><br><span class="line">            <span class="comment"># driver.find_element_bu_id(&quot;fineui_10-inputEl-icon&quot;).click()</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&quot;p1_ctl00_btnSubmit&quot;).click()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击提交</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;p1_ctl00_btnSubmit&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 点击确认</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;fineui_14&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;fineui_19&quot;</span>)</span><br><span class="line">            <span class="comment"># element = driver.find_element_by_class_name(&quot;f-btn-text&quot;)</span></span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line">    print(<span class="string">&quot;world!&quot;</span>) <span class="comment"># 输出Hello,world! 完美的结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: <span class="comment">#当程序执行时</span></span><br><span class="line">    main() <span class="comment">#开始</span></span><br></pre></td></tr></table></figure><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5. 写在最后"></a>5. 写在最后</h2><p>该项目从入门学习到实现用时一天，期间在调试的过程中，因为提交框的加载忘记设置延时，但是debug过程中，因为单步调试给了浏览器足够的加载时间，以至于此bug查了很久，在此感谢各网站的博主给出的经验。本着测试web自动化的初衷，加之校园的日填写网页结构较为简单，无复杂的html结构或者css样式，是个十分适合练习web自动化的网站。当然，为了实现最终结果也是走了不少弯路，这里感谢网站<code>http://www.testclass.net/</code>的免费教程，为此工程完成提供了不少帮助。此项目在GitHub完全开源，仅供学习使用，请不要为了省却时间，选择欺报或者瞒报，而放松了对疫情的警惕。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SHU每日两报脚本&quot;&gt;&lt;a href=&quot;#SHU每日两报脚本&quot; class=&quot;headerlink&quot; title=&quot;SHU每日两报脚本&quot;&gt;&lt;/a&gt;SHU每日两报脚本&lt;/h1&gt;&lt;h2 id=&quot;1-实现原理&quot;&gt;&lt;a href=&quot;#1-实现原理&quot; class=&quot;head</summary>
      
    
    
    
    <category term="脚本" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="web自动化" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="python" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/web%E8%87%AA%E5%8A%A8%E5%8C%96/python/"/>
    
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
    <category term="web自动化" scheme="http://example.com/tags/web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>WEB自动化笔记</title>
    <link href="http://example.com/2020/10/28/WEB%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/28/WEB%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-28T03:13:09.000Z</published>
    <updated>2020-10-28T03:35:22.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Selenium3实现网页自动化"><a href="#Selenium3实现网页自动化" class="headerlink" title="Selenium3实现网页自动化"></a>Selenium3实现网页自动化</h1><h2 id="1-初步工作"><a href="#1-初步工作" class="headerlink" title="1.初步工作"></a>1.初步工作</h2><h3 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h3><p>安装Selenium</p><p>本文使用的是python3.8.4 64bit</p><p>使用pip指令安装selenium</p><p><code>pip install selenium</code></p><h3 id="1-2-设置浏览器驱动"><a href="#1-2-设置浏览器驱动" class="headerlink" title="1.2 设置浏览器驱动"></a>1.2 设置浏览器驱动</h3><p>首先设置浏览器的地址，手动创建一个存放浏览器驱动的目录，如： E:\driver , 将下载的浏览器驱动文件（例如：chromedriver、geckodriver）丢到该目录下。</p><p>我的电脑–&gt;属性–&gt;系统设置–&gt;高级–&gt;环境变量–&gt;系统变量–&gt;Path，将“E:\driver”目录添加到Path的值中。</p><p>验证不同的浏览器驱动是否正常使用。</p><p>from selenium import webdriver</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Firefox()   <span class="comment"># Firefox浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()    <span class="comment"># Chrome浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Ie()        <span class="comment"># Internet Explorer浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Edge()      <span class="comment"># Edge浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Opera()     <span class="comment"># Opera浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.PhantomJS()   <span class="comment"># PhantomJS</span></span><br></pre></td></tr></table></figure><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h2><h3 id="2-1-元素定位"><a href="#2-1-元素定位" class="headerlink" title="2.1 元素定位"></a>2.1 元素定位</h3><p>Selenium提供了8种定位方式。</p><blockquote><p>id<br>name<br>class name<br>name<br>link text<br>partial link text<br>xpath<br>css selector</p></blockquote><p>这8种定位方式在Python selenium中所对应的方法为：</p><blockquote><p>find_element_by_id()<br>find_element_by_name()<br>find_element_by_class_name()<br>find_element_by_tag_name()<br>find_element_by_link_text()<br>find_element_by_partial_link_text()<br>find_element_by_xpath()<br>find_element_by_css_selector()</p></blockquote><p>定位使用的方法</p><p>假如我们有一个Web页面，通过前端工具（如，Firebug）查看到一个元素的属性是这样的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">&quot;#0000cc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;result_logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;return c(&#123;&#x27;fm&#x27;:&#x27;tab&#x27;,&#x27;tab&#x27;:&#x27;logo&#x27;&#125;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/s&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span>输入框</span><br></pre></td></tr></table></figure><p>我们的目的是要定位input标签的输入框。</p><ul><li>通过id定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过name定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_name(<span class="string">&quot;wd&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过class name定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过tag name定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_tag_name(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>1、 通过xpath定位，xpath定位有多种写法，这里列几个常用写法: **<br>    Xpath支持ID、Class、Name定位功能，以以下三者为例：<br>　1）、通过ID定位<br>　　　　//<em>[@id=’kw’]<br>　2）、通过Class定位<br>　　　　//</em>[@class=’class_name’]<br>　3）、 通过Name定位<br>　　　　//<em>[@name=’name’]<br><strong>2、如果标签没有ID、Class、Name三总属性，Xpath还支持属性定位功能</strong><br>　　　　@ 代表以属性定位，后面可以接标签中任意属性<br>　　　　//</em>[@other=’attribute’]<br>**3、当标签的属性重复时，Xpath提供了通过标签来进行过滤</strong><br>　　　　将 * 换位任意标签名，则可根据标签进行筛选<br>　　　　//input[@placeholder=’用户名’]<br><strong>4、当标签页重复时，Xpath提供了层级过滤</strong><br>    例如：找不到儿子，那么就先找他的爸爸，实在不行可以再找他的爷爷<br>    1）、支持通过 / 进行层级递进，找到符合层级关系的标签<br>　　　    //form/div/input[@placeholder=”用户名”]<br>    2）、当层级都重复时，可以通过单个层级的属性进行定位<br> 　      　//form/div[@class=’login-user’]/input<br><strong>5、一个元素它的兄弟元素跟它的标签一样，这时候无法通过层级定位到。因为都是一个父亲生的，多胞胎兄弟。Xpath提供了索引过滤</strong><br>　　　　通过索引，在List中定位属性，与python的索引有些差别，Xpath从1开始<br>　　　　//select[@name=’city’][1]/option[1]<br><strong>6、上面几种如果都用上了之后还重复的话，我们就可以使用Xpath提供的终极神器，逻辑运算定位。and 或 or</strong>　　　<br>　1）、通过and来缩小过滤的范围，只有条件都符合时才能定位到<br> 　　　　　//select[@name=’city’ and @size=’4’ and @multiple=”multiple”]<br>　2）、or就相反了，只要这些筛选中，其中一个出现那么久匹配到了<br>　　　　　　//select[@name=’city’ or @size=’4’]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//*[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//input[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;/html/body/form/span/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//span[@class=&#x27;soutu-btn&#x27;]/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;form&#x27;]/span/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27; and @name=&#x27;wd&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过css定位，css定位有多种写法，这里列几个常用写法:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;[name=wd]&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;.s_ipt&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;html &gt; body &gt; form &gt; span &gt; input&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;span.soutu-btn&gt; input#kw&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;form#form &gt; span &gt; input&quot;</span>)</span><br></pre></td></tr></table></figure><p>接下来，我们的页面上有一组文本链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://news.baidu.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_trnews&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.hao123.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_trhao123&quot;</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过link text定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">dr.find_element_by_link_text(<span class="string">&quot;hao123&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过link text定位:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;新&quot;</span>)</span><br><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;hao&quot;</span>)</span><br><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-浏览器控制"><a href="#2-2-浏览器控制" class="headerlink" title="2.2 浏览器控制"></a>2.2 浏览器控制</h3><ol><li>控制浏览器大小</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.set_window_size(<span class="number">480</span>, <span class="number">800</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>前进，后退</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.forward()</span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure><ol start="3"><li>刷新页面</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><h3 id="2-3-模拟点击和输入"><a href="#2-3-模拟点击和输入" class="headerlink" title="2.3 模拟点击和输入"></a>2.3 模拟点击和输入</h3><p>点击和输入<br>前面我们已经学习了定位元素， 定位只是第一步， 定位之后需要对这个元素进行操作， 或单击（按钮） 或输入（输入框） ， 下面就来认识 WebDriver 中最常用的几个方法：</p><p>clear()： 清除文本。</p><p>send_keys (value)： 模拟按键输入。</p><p>click()：    单击元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>提交<br>submit()，<br>submit()方法用于提交表单。 例如， 在搜索框输入关键字之后的“回车” 操作， 就可以通过该方法模拟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">search_text = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">search_text.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">search_text.submit()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>有时候 submit()可以与 click()方法互换来使用， submit()同样可以提交一个按钮， 但 submit()的应用范围远不及 click()广泛。</p><p>其他常用方法<br>size： 返回元素的尺寸。</p><p>text： 获取元素的文本。</p><p>get_attribute(name)： 获得属性值。</p><p>is_displayed()： 设置该元素是否用户可见。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得输入框的尺寸</span></span><br><span class="line">size = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).size</span><br><span class="line">print(size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回百度页面底部备案信息</span></span><br><span class="line">text = driver.find_element_by_id(<span class="string">&quot;cp&quot;</span>).text</span><br><span class="line">print(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回元素的属性值， 可以是 id、 name、 type 或其他任意属性</span></span><br><span class="line">attribute = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).get_attribute(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">print(attribute)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回元素的结果是否可见， 返回结果为 True 或 False</span></span><br><span class="line">result = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).is_displayed()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>{‘width’: 500, ‘height’: 22}<br>©2015 Baidu 使用百度前必读 意见反馈 京 ICP 证 030173 号<br>text<br>True<br>执行上面的程序并查看结果： size 方法用于获取百度输入框的宽、 高， text 方法用于获得百度底部的备案信息， get_attribute()用于获得百度输入的 type 属性的值， is_displayed()用于返回一个元素是否可见， 如果可见则返回 True， 否则返回 False。</p><h3 id="2-4-鼠标操作"><a href="#2-4-鼠标操作" class="headerlink" title="2.4 鼠标操作"></a>2.4 鼠标操作</h3><p>在 WebDriver 中， 将这些关于鼠标操作的方法封装在 ActionChains 类提供。</p><p>ActionChains 类提供了鼠标操作的常用方法：</p><p>perform()： 执行所有 ActionChains 中存储的行为；</p><p>context_click()： 右击；</p><p>double_click()： 双击；</p><p>drag_and_drop()： 拖动；</p><p>move_to_element()： 鼠标悬停。</p><p>鼠标悬停操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 引入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.cn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line">above = driver.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(above).perform()</span><br></pre></td></tr></table></figure><p>……</p><p>from selenium.webdriver import ActionChains<br>导入提供鼠标操作的 ActionChains 类。</p><p>ActionChains(driver)<br>调用 ActionChains()类， 将浏览器驱动 driver 作为参数传入。</p><p>move_to_element(above)<br>context_click()方法用于模拟鼠标右键操作， 在调用时需要指定元素定位。</p><p>perform()<br>执行所有 ActionChains 中存储的行为， 可以理解成是对整个操作的提交动作。</p><h3 id="2-5-键盘操作"><a href="#2-5-键盘操作" class="headerlink" title="2.5 键盘操作"></a>2.5 键盘操作</h3><p>Keys()类提供了键盘上几乎所有按键的方法。 前面了解到， send_keys()方法可以用来模拟键盘输入， 除此 之外， 我们还可以用它来输入键盘上的按键， 甚至是组合键， 如 Ctrl+A、 Ctrl+C 等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 引入 Keys 模块</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入框输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;seleniumm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多输入的一个 m</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.BACK_SPACE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入空格键+“教程”</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.SPACE)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;教程&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+a 全选输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+x 剪切输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+v 粘贴内容到输入框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过回车键来代替单击操作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).send_keys(Keys.ENTER)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>需要说明的是， 上面的脚本没有什么实际意义， 仅向我们展示模拟键盘各种按键与组合键的用法。</p><p>from selenium.webdriver.common.keys import Keys<br>在使用键盘按键方法前需要先导入 keys 类。</p><p>以下为常用的键盘操作：</p><table><thead><tr><th>send_keys(Keys.BACK_SPACE)</th><th>删除键（BackSpace）</th></tr></thead><tbody><tr><td>send_keys(Keys.SPACE)</td><td>空格键(Space)</td></tr><tr><td>send_keys(Keys.TAB)</td><td>制表键(Tab)</td></tr><tr><td>send_keys(Keys.ESCAPE)</td><td>回退键（Esc）</td></tr><tr><td>send_keys(Keys.ENTER)</td><td>回车键（Enter）</td></tr><tr><td>send_keys(Keys.CONTROL,’a’)</td><td>全选（Ctrl+A）</td></tr><tr><td>send_keys(Keys.CONTROL,’c’)</td><td>复制（Ctrl+C）</td></tr><tr><td>send_keys(Keys.CONTROL,’x’)</td><td>剪切（Ctrl+X）</td></tr><tr><td>send_keys(Keys.CONTROL,’v’)</td><td>粘贴（Ctrl+V）</td></tr><tr><td>send_keys(Keys.F1)</td><td>键盘 F1</td></tr><tr><td>send_keys(Keys.F12)</td><td>键盘 F12</td></tr></tbody></table><h2 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3. 事件处理"></a>3. 事件处理</h2><h3 id="3-1-断言判断"><a href="#3-1-断言判断" class="headerlink" title="3.1 断言判断"></a>3.1 断言判断</h3><p>不管是在做功能测试还是自动化测试，最后一步需要拿实际结果与预期进行比较。这个比较的称之为断言。</p><p>我们通常可以通过获取title 、URL和text等信息进行断言。text方法在前面已经讲过，它用于获取标签对之间的文本信息。 下面同样以百度为例，介绍如何获取这些信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Before search================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前页面title</span></span><br><span class="line">title = driver.title</span><br><span class="line">print(title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前页面URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line">print(now_url)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;After search================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次打印当前页面title</span></span><br><span class="line">title = driver.title</span><br><span class="line">print(title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前页面URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line">print(now_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取结果数目</span></span><br><span class="line">user = driver.find_element_by_class_name(<span class="string">&#x27;nums&#x27;</span>).text</span><br><span class="line">print(user)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>脚本运行结果如下：</p><p>Before search================<br>百度一下，你就知道<br><a href="https://www.baidu.com/">https://www.baidu.com/</a><br>After search================<br>selenium_百度搜索<br><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx</a>…<br>搜索工具<br>百度为您找到相关结果约61,100,000个<br>title：用于获得当前页面的标题。</p><p>current_url：用户获得当前页面的URL。</p><p>text：获取搜索条目的文本信息。</p><h3 id="3-2-元素等待"><a href="#3-2-元素等待" class="headerlink" title="3.2 元素等待"></a>3.2 元素等待</h3><p>WebDriver提供了两种类型的等待：显式等待和隐式等待。</p><p>显式等待<br>显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常（TimeoutException）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">                      EC.presence_of_element_located((By.ID, <span class="string">&quot;kw&quot;</span>))</span><br><span class="line">                      )</span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>WebDriverWait类是由WebDirver 提供的等待方法。在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常。具体格式如下：</p><p>WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)<br>driver ：浏览器驱动。</p><p>timeout ：最长超时时间，默认以秒为单位。</p><p>poll_frequency ：检测的间隔（步长）时间，默认为0.5S。</p><p>ignored_exceptions ：超时后的异常信息，默认情况下抛NoSuchElementException异常。</p><p>WebDriverWait()一般由until()或until_not()方法配合使用，下面是until()和until_not()方法的说明。</p><p>until(method, message=‘’)<br>调用该方法提供的驱动程序作为一个参数，直到返回值为True。</p><p>until_not(method, message=‘’)<br>调用该方法提供的驱动程序作为一个参数，直到返回值为False。</p><p>在本例中，通过as关键字将expected_conditions 重命名为EC，并调用presence_of_element_located()方法判断元素是否存在。</p><p>隐式等待<br>WebDriver提供了implicitly_wait()方法来实现隐式等待，默认设置为0。它的用法相对来说要简单得多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置隐式等待为10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(ctime())</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;kw22&quot;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(ctime())</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p>implicitly_wait() 默认参数的单位为秒，本例中设置等待时长为10秒。首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行；如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第6秒定位到了元素则继续执行，若直到超出设置时长（10秒）还没有定位到元素，则抛出异常。</p><h3 id="3-3-元素定位"><a href="#3-3-元素定位" class="headerlink" title="3.3 元素定位"></a>3.3 元素定位</h3><p>WebDriver还提供了8种用于定位一组元素的方法。</p><p>find_elements_by_id()<br>find_elements_by_name()<br>find_elements_by_class_name()<br>find_elements_by_tag_name()<br>find_elements_by_link_text()<br>find_elements_by_partial_link_text()<br>find_elements_by_xpath()<br>find_elements_by_css_selector()<br>定位一组元素的方法与定位单个元素的方法类似，唯一的区别是在单词element后面多了一个s表示复数。</p><p>接下来通过例子演示定位一组元素的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位一组元素</span></span><br><span class="line">texts = driver.find_elements_by_xpath(<span class="string">&#x27;//div/h3/a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历出每一条搜索结果的标题</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> texts:</span><br><span class="line">    print(t.text)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><p>Selenium - Web Browser Automation<br>官网<br>功能自动化测试工具——Selenium篇<br>selenium + python自动化测试环境搭建 - 虫师 - 博客园<br>selenium是什么?_百度知道<br>怎样开始用selenium进行自动化测试(个人总结)_百度经验<br>Selenium_百度百科<br>selenium_百度翻译<br>Selenium官网教程_selenium自动化测试实践_Selenium_领测软件测试网<br>Selenium(浏览器自动化测试框架)_百度百科<br>自动化基础普及之selenium是啥? - 虫师 - 博客园<br>python十大主流开源框架 「菜鸟必看」</p><h3 id="3-4-多表单切换"><a href="#3-4-多表单切换" class="headerlink" title="3.4 多表单切换"></a>3.4 多表单切换</h3><p>在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位。这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;x-URS-iframe&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>126邮箱登录框的结构大概是这样子的，想要操作登录框必须要先切换到iframe表单。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.126.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;x-URS-iframe&#x27;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;dologin&quot;</span>).click()</span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line">switch_to.frame() 默认可以直接取表单的<span class="built_in">id</span> 或name属性。如果iframe没有可用的<span class="built_in">id</span>和name属性，则可以通过下面的方式进行定位。</span><br></pre></td></tr></table></figure><p>……<br>#先通过xpth定位到iframe</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xf = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;x-URS-iframe&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>#再将定位对象传给switch_to.frame()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.frame(xf)</span><br></pre></td></tr></table></figure><p>……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><p>除此之外，在进入多级表单的情况下，还可以通过switch_to.default_content()跳回最外层的页面。</p><h3 id="3-5-多窗口切换"><a href="#3-5-多窗口切换" class="headerlink" title="3.5 多窗口切换"></a>3.5 多窗口切换</h3><p>在页面操作过程中有时候点击某个链接会弹出新的窗口，这时就需要主机切换到新打开的窗口上进行操作。WebDriver提供了switch_to.window()方法，可以实现在不同的窗口之间切换。 以百度首页和百度注册页为例，在两个窗口之间的切换如下图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得百度搜索窗口句柄</span></span><br><span class="line">sreach_windows = driver.current_window_handle</span><br><span class="line"></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;立即注册&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前所有打开的窗口的句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入注册窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</span><br><span class="line">    <span class="keyword">if</span> handle != sreach_windows:</span><br><span class="line">        driver.switch_to.window(handle)</span><br><span class="line">        print(<span class="string">&#x27;now register window!&#x27;</span>)</span><br><span class="line">        driver.find_element_by_name(<span class="string">&quot;account&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        driver.find_element_by_name(<span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>在本例中所涉及的新方法如下：</p><ul><li>current_window_handle：获得当前窗口句柄。</li><li>window_handles：返回所有窗口的句柄到当前会话。</li><li>switch_to.window()：用于切换到相应的窗口，与上一节的switch_to.frame()类似，前者用于不同窗口的切换，后者用于不同表单之间的切换。</li></ul><h3 id="3-6-警告框处理"><a href="#3-6-警告框处理" class="headerlink" title="3.6 警告框处理"></a>3.6 警告框处理</h3><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用text/accept/dismiss/ send_keys等方法进行操作。</p><ul><li>text：返回 alert/confirm/prompt 中的文字信息。</li><li>accept()：接受现有警告框。</li><li>dismiss()：解散现有警告框。</li><li>send_keys(keysToSend)：发送文本至警告框。keysToSend：将文本发送至警告框。</li></ul><p>如下图，百度搜索设置弹出的窗口是不能通过前端工具对其进行定位的，这个时候就可以通过switch_to_alert()方法接受这个弹窗。 <img src="http://orru5lls3.bkt.clouddn.com/alert_windows.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">link = driver.find_element_by_link_text(<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(link).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告框</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>通过switch_to_alert()方法获取当前页面上的警告框，并使用accept()方法接受警告框。</p><h3 id="3-7-警告框处理"><a href="#3-7-警告框处理" class="headerlink" title="3.7 警告框处理"></a>3.7 警告框处理</h3><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用text/accept/dismiss/ send_keys等方法进行操作。</p><ul><li>text：返回 alert/confirm/prompt 中的文字信息。</li><li>accept()：接受现有警告框。</li><li>dismiss()：解散现有警告框。</li><li>send_keys(keysToSend)：发送文本至警告框。keysToSend：将文本发送至警告框。</li></ul><p>如下图，百度搜索设置弹出的窗口是不能通过前端工具对其进行定位的，这个时候就可以通过switch_to_alert()方法接受这个弹窗。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">link = driver.find_element_by_link_text(<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(link).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告框</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>通过switch_to_alert()方法获取当前页面上的警告框，并使用accept()方法接受警告框。</p><h3 id="3-8-下拉框选择"><a href="#3-8-下拉框选择" class="headerlink" title="3.8 下拉框选择"></a>3.8 下拉框选择</h3><p>有时我们会碰到下拉框，WebDriver提供了Select类来处理下拉框。 如百度搜索设置的下拉框。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&#x27;设置&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line">Select(sel).select_by_value(<span class="string">&#x27;50&#x27;</span>)  <span class="comment"># 显示50条</span></span><br><span class="line"><span class="comment"># ……</span></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>Select类用于定位select标签。</p><p>select_by_value() 方法用于定位下接选项中的value值。</p><h2 id="4-特殊处理"><a href="#4-特殊处理" class="headerlink" title="4. 特殊处理"></a>4. 特殊处理</h2><h3 id="4-1-文件上传"><a href="#4-1-文件上传" class="headerlink" title="4.1 文件上传"></a>4.1 文件上传</h3><p>对于通过input标签实现的上传功能，可以将其看作是一个输入框，即通过send_keys()指定本地文件路径的方式实现文件上传。</p><p>创建upfile.html文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>upload_file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span6 well&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>upload_file<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.js&quot;</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>通过浏览器打开upfile.html文件.</p><p>接下来通过send_keys()方法来实现文件上传。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">file_path = <span class="string">&#x27;file:///&#x27;</span> + os.path.abspath(<span class="string">&#x27;upfile.html&#x27;</span>)</span><br><span class="line">driver.get(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位上传按钮，添加本地文件</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;file&quot;</span>).send_keys(<span class="string">&#x27;D:\\upload_file.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="4-2-cookies处理"><a href="#4-2-cookies处理" class="headerlink" title="4.2 cookies处理"></a>4.2 cookies处理</h3><p>有时候我们需要验证浏览器中cookie是否正确，因为基于真实cookie的测试是无法通过白盒和集成测试进行的。WebDriver提供了操作Cookie的相关方法，可以读取、添加和删除cookie信息。</p><p>WebDriver操作cookie的方法：</p><ul><li>get_cookies()： 获得所有cookie信息。</li><li>get_cookie(name)： 返回字典的key为“name”的cookie信息。</li><li>add_cookie(cookie_dict) ： 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。</li><li>delete_cookie(name,optionsString)：删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”。</li><li>delete_all_cookies()： 删除所有cookie信息。</li></ul><p>下面通过get_cookies()来获取当前浏览器的cookie信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.youdao.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得cookie信息</span></span><br><span class="line">cookie= driver.get_cookies()</span><br><span class="line"><span class="comment"># 将获得cookie的信息打印</span></span><br><span class="line">print(cookie)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>从执行结果可以看出，cookie数据是以字典的形式进行存放的。知道了cookie的存放形式，接下来我们就可以按照这种形式向浏览器中写入cookie信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.youdao.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向cookie的name 和value中添加会话信息</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;key-aaaaaaa&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;value-bbbbbb&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历cookies中的name 和value信息并打印，当然还有上面添加的信息</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(<span class="string">&quot;%s -&gt; %s&quot;</span> % (cookie[<span class="string">&#x27;name&#x27;</span>], cookie[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>======================== RESTART: =========================</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YOUDAO_MOBILE_ACCESS_TYPE -&gt; 1</span><br><span class="line">_PREF_ANONYUSER__MYTH -&gt; aGFzbG9nZ2VkPXRydWU&#x3D;</span><br><span class="line">OUTFOX_SEARCH_USER_ID -&gt; -1046383847@218.17.158.115</span><br><span class="line">JSESSIONID -&gt; abc7qSE_SBGsVgnVLBvcu</span><br><span class="line">key-aaaaaaa -&gt; value-bbbbbb</span><br></pre></td></tr></table></figure><p>从执行结果可以看到，最后一条cookie信息是在脚本执行过程中通过add_cookie()方法添加的。通过遍历得到所有的cookie信息，从而找到key为“name”和“value”的特定cookie的value。</p><h3 id="4-3-js处理"><a href="#4-3-js处理" class="headerlink" title="4.3 js处理"></a>4.3 js处理</h3><p>虽然WebDriver提供了操作浏览器的前进和后退方法，但对于浏览器滚动条并没有提供相应的操作方法。在这种情况下，就可以借助JavaScript来控制浏览器的滚动条。WebDriver提供了execute_script()方法来执行JavaScript代码。</p><p>用于调整浏览器滚动条位置的JavaScript代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- window.scrollTo(左边距,上边距); --&gt;</span><br><span class="line">window.scrollTo(0,450);</span><br></pre></td></tr></table></figure><p>window.scrollTo()方法用于设置浏览器窗口滚动条的水平和垂直位置。方法的第一个参数表示水平的左间距，第二个参数表示垂直的上边距。其代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问百度</span></span><br><span class="line">driver=webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">500</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过javascript设置浏览器窗口的滚动条位置</span></span><br><span class="line">js=<span class="string">&quot;window.scrollTo(100,450);&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>通过浏览器打开百度进行搜索，并且提前通过set_window_size()方法将浏览器窗口设置为固定宽高显示，目的是让窗口出现水平和垂直滚动条。然后通过execute_script()方法执行JavaScripts代码来移动滚动条的位置。</p><h3 id="4-4-窗口截图"><a href="#4-4-窗口截图" class="headerlink" title="4.4 窗口截图"></a>4.4 窗口截图</h3><p>自动化用例是由程序去执行的，因此有时候打印的错误信息并不十分明确。如果在脚本执行出错的时候能对当前窗口截图保存，那么通过图片就可以非常直观地看出出错的原因。WebDriver提供了截图函数get_screenshot_as_file()来截取当前窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取当前窗口，并指定截图图片的保存位置</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;E:\\baidu_img.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>脚本运行完成后打开E盘，就可以找到baidu_img.jpg图片文件了。</p><h3 id="4-5-窗口关闭"><a href="#4-5-窗口关闭" class="headerlink" title="4.5 窗口关闭"></a>4.5 窗口关闭</h3><p>在前面的例子中我们一直使用quit()方法，其含义为退出相关的驱动程序和关闭所有窗口。除此之外，WebDriver还提供了close()方法，用来关闭当前窗口。例多窗口的处理，在用例执行的过程中打开了多个窗口，我们想要关闭其中的某个窗口，这时就要用到close()方法进行关闭了。</p><ul><li>close() 关闭单个窗口</li><li>quit() 关闭所有窗口</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> <span class="string">https://s1.ax1x.com/2020/10/28/Bl2uBF.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">作者:</span> <span class="string">Jerry</span></span><br><span class="line"><span class="string">連結:</span> <span class="string">https://demo.jerryc.me/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A0%82</span></span><br><span class="line"><span class="string">來源:</span> <span class="string">Butterfly</span></span><br><span class="line"><span class="string">著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Selenium3实现网页自动化&quot;&gt;&lt;a href=&quot;#Selenium3实现网页自动化&quot; class=&quot;headerlink&quot; title=&quot;Selenium3实现网页自动化&quot;&gt;&lt;/a&gt;Selenium3实现网页自动化&lt;/h1&gt;&lt;h2 id=&quot;1-初步工作&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="自动化" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python数据分析笔记</title>
    <link href="http://example.com/2020/10/25/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/25/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-25T11:13:09.000Z</published>
    <updated>2020-10-28T12:44:54.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=np.array([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>])</span><br><span class="line">print(name.ndim)<span class="comment">#维数</span></span><br><span class="line">print(name.size)<span class="comment">#大小</span></span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li><p>创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">name=np.array([[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>]])</span><br></pre></td></tr></table></figure></li><li><p>查看属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(name.ndim)<span class="comment">#维数，也可以说是矩阵的秩</span></span><br><span class="line">print(name.size)<span class="comment">#大小</span></span><br><span class="line">print(name.shape)<span class="comment">#行数和列数</span></span><br><span class="line">print(name.dtype)<span class="comment">#查看数据类型</span></span><br></pre></td></tr></table></figure></li><li><p>访问下标</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(name[<span class="number">2</span>])<span class="comment">#索引为[0,n-1]</span></span><br><span class="line">print(name[<span class="number">-3</span>])<span class="comment">#索引为[-n,-1]，表示倒数</span></span><br></pre></td></tr></table></figure><ol start="4"><li>切片(slicing)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>]]:<span class="comment">#表示下标1，2和下标2，4#如果使用:，则表示所有的行和列</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name[<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">4</span>]:<span class="comment">#表示下标1，2和下标2，4#如果使用:，则表示所有的行和列</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li>条件筛选</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(name[(name==<span class="number">1</span>)|(name==<span class="number">2</span>)])</span><br></pre></td></tr></table></figure><ol start="6"><li>创建多维数组<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)<span class="comment">#生成1-9之间的连续的数组</span></span><br><span class="line">a=np.arange(<span class="number">0</span>,<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)<span class="comment">#将一维数组转为二维数组</span></span><br><span class="line">a=np.zeros((<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#生成3*4的为0的数组</span></span><br><span class="line">a=np.ones((<span class="number">4</span>,<span class="number">3</span>))<span class="comment">#生成4*3的为1的数组</span></span><br></pre></td></tr></table></figure></li><li>多维数组运算<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=np.ones((<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">a=a*<span class="number">5</span><span class="comment">#生成全部为5的数组</span></span><br><span class="line">a=a+<span class="number">3</span><span class="comment">#生成全部为4的数组</span></span><br></pre></td></tr></table></figure><h2 id="常用函数、属性"><a href="#常用函数、属性" class="headerlink" title="常用函数、属性"></a>常用函数、属性</h2></li><li>函数<table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>np.array(列表)</td><td>通过列表创建一个数组对象</td></tr><tr><td>np.arange(起始, 结束, 步长)</td><td>创建一个等差数组(注意区间是左闭右开的)</td></tr><tr><td>np.zeros( (m, n) )</td><td>创建一个m行n列的全零数组</td></tr><tr><td>np.ones( (m, n) )</td><td>创建一个m行n列的全一数组</td></tr><tr><td>np.eye(m)</td><td>创建一个m阶单位方阵</td></tr></tbody></table></li><li>常用对象属性<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>my_array.ndim</td><td>维数</td></tr><tr><td>my_array.size</td><td>大小</td></tr><tr><td>my_array.shape</td><td>以元组形式返回my_array的(行, 列)</td></tr><tr><td>my_array.dtype</td><td>返回my_array中元素的数据类型</td></tr></tbody></table></li></ol><p>*注意库函数和对象属性的不同，表一中np.是固定的，指的是numpy库；而表二中my_array.xxx()中的my_array要改成你对应的数组的名字（即实例名）。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片</p><blockquote><p>我们将选出一个数组的某一行、某一列或者某一个位置上的元素的操作成为“切片”<br>我们先来讨论二维数组的切片:<br>最基本的格式是：my_array[m, n]，其中m和n可以为整数 列表 还可以是冒号:<br>当m和n是整数时，表示选取m行n列的那个数。<br>当m和n其中一个是冒号的时候，表明选中对应的所有行或列。例如my_array[ :, n]表示选择整个第n列</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arr = np.arange(<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&#x27;切片前：&#x27;</span>)</span><br><span class="line">print(arr)</span><br><span class="line">m = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">n = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;切片后：&#x27;</span>)</span><br><span class="line">print(arr[m, n])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">切片前：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">切片后：</span></span><br><span class="line"><span class="string">[2 6]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="通用函数func"><a href="#通用函数func" class="headerlink" title="通用函数func"></a>通用函数func</h2><ol><li>常用的一元函数<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>abs、fabs</td><td>计算整数、浮点数、复数的绝对值</td></tr><tr><td>sqrt</td><td>计算平方根</td></tr><tr><td>square</td><td>计算平方</td></tr><tr><td>exp</td><td>计算指数</td></tr><tr><td>log、log10</td><td>计算自然对数、底数为10的log</td></tr><tr><td>sign</td><td>计算正负号</td></tr><tr><td>ceil、floor</td><td>天花板、地板函数</td></tr><tr><td>sin、cos、cosh…</td><td>三角函数</td></tr></tbody></table></li></ol><hr><ol start="2"><li><p>常用的二元函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>add</td><td>将对应的元素相加</td></tr><tr><td>subtract</td><td>从第一个数组中减去第二个数组的元素</td></tr><tr><td>multiply</td><td>数组元素相乘</td></tr><tr><td>divide</td><td>数组元素相除</td></tr><tr><td>power</td><td>计算幂次</td></tr><tr><td>mod</td><td>计算模</td></tr><tr><td>copysign</td><td>将第二个数组的符号赋值给第一个数组</td></tr><tr><td>equal、not_equal</td><td>执行元素比较，返回布尔类型的数组</td></tr></tbody></table></li><li><p>聚集函数</p></li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>mean</td><td>算数平均值</td></tr><tr><td>min、max</td><td>最大值和最小值</td></tr><tr><td>argmin、argmax</td><td>最大值和最小值的索引</td></tr><tr><td>cumsum</td><td>从0开始累加</td></tr><tr><td>cumprod</td><td>从1开始累乘</td></tr></tbody></table><ol start="4"><li>随机数组生成函数</li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>random</td><td>随机产生[0,1)</td></tr><tr><td>randint</td><td>随机生成给定范围内的一组整数</td></tr><tr><td>uniform</td><td>随机生成给定范围内服从均匀分布的一组浮点数</td></tr><tr><td>choice</td><td>在给定的范围内随机选择元素</td></tr><tr><td>normal</td><td>随机生成一组服从给定均值和方差正态分布的随机数</td></tr></tbody></table><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#P21</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">names = np.array([<span class="string">&#x27;王微&#x27;</span>,<span class="string">&#x27;肖良英&#x27;</span>,<span class="string">&quot;方绮雯&quot;</span>,<span class="string">&#x27;刘旭阳&#x27;</span>,<span class="string">&#x27;钱易铭&#x27;</span>])</span><br><span class="line">subjects = np.array([<span class="string">&#x27;Math&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Art&#x27;</span>, <span class="string">&#x27;Database&#x27;</span>, <span class="string">&#x27;Physics&#x27;</span>])</span><br><span class="line">scores = np.array([[<span class="number">70</span>,<span class="number">85</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">89</span>],[<span class="number">60</span>,<span class="number">64</span>,<span class="number">80</span>,<span class="number">75</span>,<span class="number">80</span>,<span class="number">92</span>,<span class="number">90</span>],[<span class="number">90</span>,<span class="number">93</span>,<span class="number">88</span>,<span class="number">87</span>,<span class="number">86</span>,<span class="number">90</span>,<span class="number">91</span>],[<span class="number">80</span>,<span class="number">82</span>,<span class="number">91</span>,<span class="number">88</span>,<span class="number">83</span>,<span class="number">86</span>,<span class="number">80</span>],[<span class="number">88</span>,<span class="number">72</span>,<span class="number">78</span>,<span class="number">90</span>,<span class="number">91</span>,<span class="number">73</span>,<span class="number">80</span>]])</span><br><span class="line"><span class="comment">#1.</span></span><br><span class="line"><span class="comment">#(1)</span></span><br><span class="line">print(subjects[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]])</span><br><span class="line">print(names[<span class="number">-3</span>])</span><br><span class="line"><span class="comment">#(2)</span></span><br><span class="line">print(names[<span class="number">2</span>:])</span><br><span class="line">print(subjects[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#(3)</span></span><br><span class="line">print(subjects[(subjects == <span class="string">&#x27;English&#x27;</span>) | (subjects == <span class="string">&#x27;Physics&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.</span></span><br><span class="line"><span class="comment">#(1)</span></span><br><span class="line">print(scores[[<span class="number">1</span>,<span class="number">4</span>],:])</span><br><span class="line"><span class="comment">#(2)</span></span><br><span class="line">print(scores[[<span class="number">2</span>,<span class="number">4</span>]][:,(subjects == <span class="string">&#x27;Python&#x27;</span>)|(subjects == <span class="string">&#x27;Math&#x27;</span>)])</span><br><span class="line"><span class="comment">#(3)</span></span><br><span class="line">print(scores[:,(subjects == <span class="string">&#x27;English&#x27;</span>) | (subjects == <span class="string">&#x27;Art&#x27;</span>)])</span><br><span class="line"><span class="comment">#(4)</span></span><br><span class="line">print(scores[(names==<span class="string">&#x27;王微&#x27;</span>)|(names==<span class="string">&#x27;刘旭阳&#x27;</span>),(subjects==<span class="string">&#x27;English&#x27;</span>)|(subjects==<span class="string">&#x27;Math&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.</span></span><br><span class="line">a=np.arange(<span class="number">10</span>,<span class="number">20</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 一维数组访问。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1) 在 subjects 数组中选择并显示序号 1、 2、 4 门课的名称，使用倒序索引选择并显示 names 数组中“方绮雯“。</span></span><br><span class="line"><span class="string">[&#x27;English&#x27; &#x27;Python&#x27; &#x27;Art&#x27;]</span></span><br><span class="line"><span class="string">方绮雯</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2) 选择并显示 names 数组从 2 到最后的数组元素；选择并显示 subjects 数组正序 2~4 的数组元素。</span></span><br><span class="line"><span class="string">[&#x27;方绮雯&#x27; &#x27;刘旭阳&#x27; &#x27;钱易铭&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;Python&#x27; &#x27;Chinese&#x27; &#x27;Art&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3) 使用布尔条件选择并显示 subjects 数组中的英语和物理科目名称。</span></span><br><span class="line"><span class="string">[&#x27;English&#x27; &#x27;Physics&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 二维数组访问。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">l) 选择并显示 scores 数组的 1、 4 行。 </span></span><br><span class="line"><span class="string">[[60 64 80 75 80 92 90]</span></span><br><span class="line"><span class="string"> [88 72 78 90 91 73 80]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2) 选择并显示 scores 数组中行序 2、 4 学生的数学和 Python 成绩</span></span><br><span class="line"><span class="string">[[90 88]</span></span><br><span class="line"><span class="string"> [88 78]]</span></span><br><span class="line"><span class="string">3) 选择并显示 scores 数组中所有学生的数学和艺术课程成绩。</span></span><br><span class="line"><span class="string">[[85 82]</span></span><br><span class="line"><span class="string"> [64 80]</span></span><br><span class="line"><span class="string"> [93 86]</span></span><br><span class="line"><span class="string"> [82 83]</span></span><br><span class="line"><span class="string"> [72 91]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4) 选择并显示 scores 数组中“王微”和“刘旭阳”的英语和艺术课程成绩。 </span></span><br><span class="line"><span class="string">[[85 82]</span></span><br><span class="line"><span class="string"> [82 83]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 生成由整数 10~19 组成的 2x5 的二维数组。</span></span><br><span class="line"><span class="string">[[10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line"><span class="comment">#P26</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">names = np.array([<span class="string">&#x27;王微&#x27;</span>,<span class="string">&#x27;肖良英&#x27;</span>,<span class="string">&quot;方绮雯&quot;</span>,<span class="string">&#x27;刘旭阳&#x27;</span>,<span class="string">&#x27;钱易铭&#x27;</span>])</span><br><span class="line">subjects = np.array([<span class="string">&#x27;Math&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Art&#x27;</span>, <span class="string">&#x27;Database&#x27;</span>, <span class="string">&#x27;Physics&#x27;</span>])</span><br><span class="line">scores = np.array([[<span class="number">70</span>,<span class="number">85</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">89</span>],[<span class="number">60</span>,<span class="number">64</span>,<span class="number">80</span>,<span class="number">75</span>,<span class="number">80</span>,<span class="number">92</span>,<span class="number">90</span>],[<span class="number">90</span>,<span class="number">93</span>,<span class="number">88</span>,<span class="number">87</span>,<span class="number">86</span>,<span class="number">90</span>,<span class="number">91</span>],[<span class="number">80</span>,<span class="number">82</span>,<span class="number">91</span>,<span class="number">88</span>,<span class="number">83</span>,<span class="number">86</span>,<span class="number">80</span>],[<span class="number">88</span>,<span class="number">72</span>,<span class="number">78</span>,<span class="number">90</span>,<span class="number">91</span>,<span class="number">73</span>,<span class="number">80</span>]])</span><br><span class="line"><span class="comment"># 第一题</span></span><br><span class="line">print(<span class="string">&#x27;1. 将 scores 数组中所有学生的英语成绩减去 3 分并显示。 &#x27;</span>)</span><br><span class="line">print(scores[:, subjects == <span class="string">&#x27;Art&#x27;</span>] <span class="number">-3</span>)</span><br><span class="line"><span class="comment"># 第二题</span></span><br><span class="line">print(<span class="string">&#x27;\n2. 统计 scores 数组中每名学生所有科目的平均分并显示。 &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>) :</span><br><span class="line">    print(scores[i].mean())</span><br><span class="line"><span class="comment"># 第三题  </span></span><br><span class="line">print(<span class="string">&#x27;\n3. 使用随机函数生成[-1,1]之间服从均匀分布的 3x4 二维数组，并计算所有元素的和。&#x27;</span>)</span><br><span class="line">uni = np.random.uniform(<span class="number">-1</span>,<span class="number">1</span>,(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(uni)</span><br><span class="line">print(uni.<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 将 scores 数组中所有学生的英语成绩减去 3 分并显示。 </span></span><br><span class="line"><span class="string">[[79]</span></span><br><span class="line"><span class="string"> [77]</span></span><br><span class="line"><span class="string"> [83]</span></span><br><span class="line"><span class="string"> [80]</span></span><br><span class="line"><span class="string"> [88]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 统计 scores 数组中每名学生所有科目的平均分并显示。 </span></span><br><span class="line"><span class="string">82.42857142857143</span></span><br><span class="line"><span class="string">77.28571428571429</span></span><br><span class="line"><span class="string">89.28571428571429</span></span><br><span class="line"><span class="string">84.28571428571429</span></span><br><span class="line"><span class="string">81.71428571428571</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 使用随机函数生成[-1,1]之间服从均匀分布的 3x4 二维数组，并计算所有元素的和。</span></span><br><span class="line"><span class="string">[[-0.5434021  -0.0569449  -0.10984966 -0.90260813]</span></span><br><span class="line"><span class="string"> [-0.01882247 -0.46660599  0.52140256  0.42474122]</span></span><br><span class="line"><span class="string"> [ 0.3122958  -0.06197657 -0.26717631 -0.08292239]]</span></span><br><span class="line"><span class="string">-1.2518689400759253</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#P29</span></span><br><span class="line"><span class="comment">#一、</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 1.创建两个一维数组分别存储超市名称和水果名称。</span></span><br><span class="line">shops = np.array([<span class="string">&#x27;DaRunFa&#x27;</span>,<span class="string">&#x27;Walmart&#x27;</span>,<span class="string">&#x27;HaoDe&#x27;</span>,<span class="string">&#x27;NongGongShang&#x27;</span>])</span><br><span class="line">fruits = np.array([<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;mango&#x27;</span>])</span><br><span class="line"><span class="comment"># 2.创建一个 4x4 的二维数组存储不同超市的水果价格，其中价格由 4~10 范围内的随机数生成。 </span></span><br><span class="line">prices = np.random.randint(<span class="number">4</span>,<span class="number">10</span>,<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 3.选择“大润发”的苹果和“好德”的香蕉，并将价格增加 1 元。 </span></span><br><span class="line">prices[shops == <span class="string">&#x27;DaRunFa&#x27;</span>,fruits == <span class="string">&#x27;apple&#x27;</span>] += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;the price of apple in DaRunFa now: %d&#x27;</span> %prices[shops == <span class="string">&#x27;DaRunFa&#x27;</span>,fruits == <span class="string">&#x27;apple&#x27;</span>])</span><br><span class="line">prices[shops == <span class="string">&#x27;HaoDe&#x27;</span>,fruits == <span class="string">&#x27;banana&#x27;</span>] += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;the price of banana in HaoDe now: %d&#x27;</span> %prices[shops == <span class="string">&#x27;HaoDe&#x27;</span>,fruits == <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="comment"># 4.“农工商”水果大减价，所有水果价格减 2 元。 </span></span><br><span class="line">prices[shops == <span class="string">&#x27;NongGongShang&#x27;</span>] -= <span class="number">2</span> </span><br><span class="line">print(<span class="string">&#x27;the price in NongGongShang now: &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(prices[shops == <span class="string">&#x27;NongGongShang&#x27;</span>])</span><br><span class="line"><span class="comment"># 5.统计四个超市苹果和芒果的销售均价。 </span></span><br><span class="line">print(<span class="string">&#x27;ave of apple is: %f&#x27;</span>%prices[: , fruits == <span class="string">&#x27;apple&#x27;</span>].mean())</span><br><span class="line">print(<span class="string">&#x27;ave of mango is: %f&#x27;</span>%prices[: , fruits == <span class="string">&#x27;mango&#x27;</span>].mean())</span><br><span class="line"><span class="comment"># 6.找出橘子价格最贵的超市名称（不是编号）。</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>) :</span><br><span class="line">    <span class="keyword">if</span> prices[i, <span class="number">2</span>] &gt; prices[t, <span class="number">2</span>] :</span><br><span class="line">        t = i</span><br><span class="line">print(<span class="string">&#x27;the most expensive orange is in %s&#x27;</span>%shops[t])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">the price of apple in DaRunFa now: 7</span></span><br><span class="line"><span class="string">the price of banana in HaoDe now: 5</span></span><br><span class="line"><span class="string">the price in NongGongShang now: [[6 7 4 6]]</span></span><br><span class="line"><span class="string">ave of apple is: 6.750000</span></span><br><span class="line"><span class="string">ave of mango is: 6.750000</span></span><br><span class="line"><span class="string">the most expensive orange is in Walmart</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#二、</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">steps = <span class="number">10</span></span><br><span class="line">rndwlk = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size = (<span class="number">3</span>, steps))</span><br><span class="line">print(<span class="string">&#x27;1）移动距离数组：&#x27;</span>)</span><br><span class="line">print(rndwlk)</span><br><span class="line">position = rndwlk.cumsum(axis = <span class="number">1</span>)</span><br><span class="line">x = position[<span class="number">0</span>]</span><br><span class="line">y = position[<span class="number">1</span>]</span><br><span class="line">z = position[<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;\n2）每步走完后在三维的空间位置：&#x27;</span>)</span><br><span class="line">print(position)</span><br><span class="line">dists = np.sqrt(position[<span class="number">0</span>]**<span class="number">2</span> + position[<span class="number">1</span>]**<span class="number">2</span> + position[<span class="number">2</span>]**<span class="number">2</span>) <span class="comment">#三维直角坐标系的距离公式</span></span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&#x27;\n3）每步走完后到原点的距离：&#x27;</span>)</span><br><span class="line">print(dists)</span><br><span class="line">print(<span class="string">&#x27;\n4）Z轴到达的最远距离：%f&#x27;</span>%<span class="built_in">abs</span>(position[<span class="number">2</span>]).<span class="built_in">max</span>())</span><br><span class="line">print(<span class="string">&#x27;\n5）物体在三维空间距离原点的最近值：%f&#x27;</span>%dists.<span class="built_in">min</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1）移动距离数组：</span></span><br><span class="line"><span class="string">[[ 0.09  0.52 -0.96 -0.96 -1.44  1.27 -0.61 -1.18  2.23  0.45]</span></span><br><span class="line"><span class="string"> [-0.66 -2.22 -0.39 -0.25  0.36 -0.29  0.04  0.12  1.43  0.34]</span></span><br><span class="line"><span class="string"> [ 0.56  0.56  0.96  0.33  2.15  1.56 -1.09 -2.05 -0.1  -0.48]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2）每步走完后在三维的空间位置：</span></span><br><span class="line"><span class="string">[[ 0.09  0.62 -0.34 -1.3  -2.74 -1.47 -2.08 -3.26 -1.03 -0.57]</span></span><br><span class="line"><span class="string"> [-0.66 -2.87 -3.26 -3.51 -3.16 -3.44 -3.4  -3.29 -1.86 -1.51]</span></span><br><span class="line"><span class="string"> [ 0.56  1.11  2.07  2.4   4.55  6.12  5.02  2.97  2.87  2.39]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3）每步走完后到原点的距离：</span></span><br><span class="line"><span class="string">[0.87 3.14 3.88 4.45 6.18 7.17 6.42 5.5  3.57 2.89]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4）Z轴到达的最远距离：6.116005</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5）物体在三维空间距离原点的最近值：0.867622</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="数据汇总与统计"><a href="#数据汇总与统计" class="headerlink" title="数据汇总与统计"></a>数据汇总与统计</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame<span class="comment">#使用pd.</span></span><br></pre></td></tr></table></figure><h2 id="series对象"><a href="#series对象" class="headerlink" title="series对象"></a>series对象</h2><ol><li><p>通过下标访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#series([data,index,index,...])</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">height1=Series(&#123;<span class="string">&#x27;13&#x27;</span> :<span class="number">187</span>, <span class="string">&#x27;14&#x27;</span> :<span class="number">190</span>, <span class="string">&#x27;17&#x27;</span>:<span class="number">185</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">178</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">185</span>&#125;)</span><br><span class="line">print(height1[<span class="string">&#x27;13&#x27;</span>])<span class="comment">#检索13号的身高</span></span><br><span class="line">print(height1[<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#检索1、2号的身高</span></span><br><span class="line">print(height1.values&gt;=<span class="number">186</span>)<span class="comment">#检索大于186的球员</span></span><br><span class="line">print(height1)<span class="comment">#打印所有身高</span></span><br></pre></td></tr></table></figure></li><li><p>通过append添加成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">a=Series([<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;10&#x27;</span>],index=[<span class="number">180</span>,<span class="number">185</span>])</span><br><span class="line">height1=Series(&#123;<span class="string">&#x27;13&#x27;</span> :<span class="number">187</span>, <span class="string">&#x27;14&#x27;</span> :<span class="number">190</span>, <span class="string">&#x27;17&#x27;</span>:<span class="number">185</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">178</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">185</span>&#125;)</span><br><span class="line">height2=height1.append(a)</span><br><span class="line">print(height2)</span><br></pre></td></tr></table></figure></li><li><p>删除成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">height1=Series(&#123;<span class="string">&#x27;13&#x27;</span> :<span class="number">187</span>, <span class="string">&#x27;14&#x27;</span> :<span class="number">190</span>, <span class="string">&#x27;17&#x27;</span>:<span class="number">185</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">178</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">185</span>&#125;)</span><br><span class="line">height1.dorp(<span class="string">&#x27;13&#x27;</span>,<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">print(height1)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Data-Frame对象"><a href="#Data-Frame对象" class="headerlink" title="Data_Frame对象"></a>Data_Frame对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = [[<span class="number">19</span>,<span class="number">170</span>, <span class="number">68</span>], [<span class="number">20</span>, <span class="number">165</span>,<span class="number">65</span>], [<span class="number">18</span>,<span class="number">175</span>, <span class="number">65</span>]]</span><br><span class="line">students=DataFrame (data, index= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], columns=[<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;height&#x27;</span>,<span class="string">&#x27;weight&#x27;</span>])</span><br><span class="line">print(students)</span><br><span class="line"><span class="comment">#   age  height  weight</span></span><br><span class="line"><span class="comment">#1   19     170      68</span></span><br><span class="line"><span class="comment">#2   20     165      65</span></span><br><span class="line"><span class="comment">#3   18     175      65</span></span><br></pre></td></tr></table></figure><ol><li>添加数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">students[<span class="string">&#x27;expense&#x27;</span>]=[<span class="number">1500</span>,<span class="number">1600</span>,<span class="number">1200</span>]</span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   19     170      68     1500</span></span><br><span class="line"><span class="comment">#2   20     165      65     1600</span></span><br><span class="line"><span class="comment">#3   18     175      65     1200</span></span><br></pre></td></tr></table></figure></li><li>修改数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">students[<span class="string">&#x27;expense&#x27;</span>]=<span class="number">1000</span></span><br><span class="line">print(stdents)</span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   19     170      68     1000</span></span><br><span class="line"><span class="comment">#2   20     165      65     1000</span></span><br><span class="line"><span class="comment">#3   18     175      65     1000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">students.loc[<span class="number">1</span>, :] = [<span class="number">21</span>,<span class="number">188</span>, <span class="number">70</span>,<span class="number">20</span>] </span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   21      78      70       20</span></span><br><span class="line"><span class="comment">#2   20     165      65     1000</span></span><br><span class="line"><span class="comment">#3   18     175      65     1000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">students.drop(<span class="number">1</span>,axis=<span class="number">0</span>)<span class="comment">#axis=0表示行</span></span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   21      78      70       20</span></span><br><span class="line"><span class="comment">#2   20     165      65     1000</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">students.drop(<span class="string">&#x27;expense&#x27;</span>, axis=<span class="number">1</span>) <span class="comment"># 删除expense列，axis=1表示列</span></span><br><span class="line"><span class="comment">#   age  height  weight  </span></span><br><span class="line"><span class="comment">#1   21      78      70 </span></span><br><span class="line"><span class="comment">#2   20     165      65 </span></span><br><span class="line"><span class="comment">#3   18     175      65</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students.drop([<span class="number">1</span>,<span class="number">2</span>],axis=<span class="number">0</span>) <span class="comment"># 删除多行</span></span><br></pre></td></tr></table></figure><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">csv=pd.read_csv(file,sep=<span class="string">&#x27;, &#x27;</span>,header= <span class="string">&#x27;infer&#x27;</span> , index_col=<span class="literal">None</span> , names, skiprows, ...)</span><br><span class="line"><span class="comment">#读取csv文件</span></span><br><span class="line"></span><br><span class="line">exc=pd.read_excel(file，sheetname,... )</span><br><span class="line"><span class="comment">#读取excel文件</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>file</th><th>字符串，文件路径和文件名</th></tr></thead><tbody><tr><td>sep</td><td>字符串，每行各数据之间的分隔符，默认为“,”</td></tr><tr><td>header</td><td>header =None,文件中第一行不是列索引</td></tr><tr><td>index_col</td><td>数字，用作行索引的列序号</td></tr><tr><td>names</td><td>列表，定义列索引，默认文件中第- - 行为列索引</td></tr><tr><td>skiprows</td><td>整数或列表，需要忽略的行数或需要跳过的行号列表，skiprows=[2,3,5]，跳过2，3，5行</td></tr></tbody></table><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><p>……</p>]]></content>
    
    
    <summary type="html">数据分析的笔记（未完）</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于opencv的人脸检测与识别</title>
    <link href="http://example.com/2020/10/18/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2020/10/18/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%AF%86%E5%88%AB/</id>
    <published>2020-10-18T02:30:09.000Z</published>
    <updated>2020-10-29T09:12:08.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用opencv进行人脸检测与识别"><a href="#利用opencv进行人脸检测与识别" class="headerlink" title="利用opencv进行人脸检测与识别"></a>利用opencv进行人脸检测与识别</h1><h2 id="1-OpenCV基本操作"><a href="#1-OpenCV基本操作" class="headerlink" title="1. OpenCV基本操作"></a>1. OpenCV基本操作</h2><h3 id="1-1-配置环境"><a href="#1-1-配置环境" class="headerlink" title="1.1 配置环境"></a>1.1 配置环境</h3><p>按win+R输入cmd打开命令行，在命令行下，输入</p><p>pip install numpy</p><p>pip install opencv-python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#程序运行时，加入模块</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="1-2-图片加载、显示和保存"><a href="#1-2-图片加载、显示和保存" class="headerlink" title="1.2 图片加载、显示和保存"></a>1.2 图片加载、显示和保存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 生成图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line"><span class="comment"># 生成灰色图片</span></span><br><span class="line">imgGrey = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment"># 展示原图</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line"><span class="comment"># 展示灰色图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;imgGrey&quot;</span>, imgGrey)</span><br><span class="line"><span class="comment"># 等待图片的关闭</span></span><br><span class="line">cv2.waitKey()</span><br><span class="line"><span class="comment"># 保存灰色图片</span></span><br><span class="line">cv2.imwrite(<span class="string">&quot;Copy.jpg&quot;</span>, imgGrey)</span><br></pre></td></tr></table></figure><h3 id="1-3-图像显示窗口创建与销毁"><a href="#1-3-图像显示窗口创建与销毁" class="headerlink" title="1.3 图像显示窗口创建与销毁"></a>1.3 图像显示窗口创建与销毁</h3><p>cv2.namedWindow(窗口名，属性) 创建一个窗口</p><p>属性—指定窗口大小模式： </p><p>cv2.WINDOW_AUTOSIZE：根据图像大小自动创建大小<br>cv2.WINDOW_NORMAL：窗口大小可调整<br>cv2.destoryAllWindows(窗口名) 删除任何建立的窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&quot;img&quot;</span>, cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="1-4-图片宽、高、通道数获取"><a href="#1-4-图片宽、高、通道数获取" class="headerlink" title="1.4 图片宽、高、通道数获取"></a>1.4 图片宽、高、通道数获取</h3><p>img.shape 返回图像高（图像矩阵的行数）、宽（图像矩阵的列数）和通道数3个属性组成的元组，若图像是非彩色图，则只返回高和宽组成的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line">imgGrey = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sp1 = img.shape</span><br><span class="line">sp2 = imgGrey.shape</span><br><span class="line"></span><br><span class="line">print(sp1)</span><br><span class="line">print(sp2)</span><br><span class="line"><span class="comment"># ======输出=======</span></span><br><span class="line"><span class="comment">#(1200, 1920, 3)</span></span><br><span class="line"><span class="comment">#(1200, 1920)</span></span><br></pre></td></tr></table></figure><h3 id="1-5-图像像素数目和图像数据类型的获取"><a href="#1-5-图像像素数目和图像数据类型的获取" class="headerlink" title="1.5 图像像素数目和图像数据类型的获取"></a>1.5 图像像素数目和图像数据类型的获取</h3><p>图像矩阵img的size属性和dtype分别对应图像的像素总数目和图像数据类型。一般情况下，图像的数据类型是uint8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">imgSize = img.size</span><br><span class="line">print(imgSize)</span><br><span class="line"></span><br><span class="line">ty = img.dtype</span><br><span class="line">print(ty)</span><br><span class="line"><span class="comment">#======输出========</span></span><br><span class="line"><span class="comment">#6912000</span></span><br><span class="line"><span class="comment">#uint8</span></span><br></pre></td></tr></table></figure><h3 id="1-6-生成指定大小的空图像"><a href="#1-6-生成指定大小的空图像" class="headerlink" title="1. 6 生成指定大小的空图像"></a>1. 6 生成指定大小的空图像</h3><p>emptyImage = np.zeros(img.shape, np.uint8)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line">imgZero = np.zeros(img.shape, np.uint8)</span><br><span class="line"></span><br><span class="line">imgFix = np.zeros((<span class="number">300</span>, <span class="number">500</span>, <span class="number">3</span>), np.uint8)</span><br><span class="line"><span class="comment"># imgFix = np.zeros((300,500),np.uint8)</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;imgZero&quot;</span>, imgZero)</span><br><span class="line">cv2.imshow(<span class="string">&quot;imgFix&quot;</span>, imgFix)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><h3 id="1-7-访问和操作图像像素"><a href="#1-7-访问和操作图像像素" class="headerlink" title="1.7 访问和操作图像像素"></a>1.7 访问和操作图像像素</h3><p> OpenCV中图像矩阵的顺序是B、G、R。可以直接通过坐标位置访问和操作图像像素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取图像的三通道</span></span><br><span class="line">blue,green,red = cv2.split(f)    </span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">blue = f[:,:,<span class="number">0</span>]</span><br><span class="line">green = f[:,:,<span class="number">1</span>]</span><br><span class="line">red = f[:,:,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>OpenCV中图像矩阵的顺序是B、G、R。可以直接通过坐标位置访问和操作图像像素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">img = cv2.imread(<span class="string">&quot;01.jpg&quot;</span>)</span><br><span class="line"> </span><br><span class="line">numb = img[<span class="number">50</span>,<span class="number">100</span>]</span><br><span class="line">print(numb)</span><br><span class="line"></span><br><span class="line">img[<span class="number">50</span>,<span class="number">100</span>] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)<span class="comment">#将50，100处的像素点改为红色</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><p>分开访问图像某一通道像素值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;01.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">img[<span class="number">0</span>:<span class="number">100</span>,<span class="number">100</span>:<span class="number">200</span>,<span class="number">0</span>] = <span class="number">255</span></span><br><span class="line">img[<span class="number">100</span>:<span class="number">200</span>,<span class="number">200</span>:<span class="number">300</span>,<span class="number">1</span>] = <span class="number">255</span></span><br><span class="line">img[<span class="number">200</span>:<span class="number">300</span>,<span class="number">300</span>:<span class="number">400</span>,<span class="number">2</span>] = <span class="number">255</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><p>更改某一矩阵中的像素值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;01.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">img[<span class="number">0</span>:<span class="number">50</span>,<span class="number">1</span>:<span class="number">100</span>] = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>) </span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><h3 id="1-8-图像三通道分离和合并"><a href="#1-8-图像三通道分离和合并" class="headerlink" title="1.8 图像三通道分离和合并"></a>1.8 图像三通道分离和合并</h3><p>分离图像通道可以使用cv2中的split函数，合并使用merge函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line">img = cv2.imread(<span class="string">&quot;01.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">b , g , r = cv2.split(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b = cv2.split(img)[0]</span></span><br><span class="line"><span class="comment"># g = cv2.split(img)[1]</span></span><br><span class="line"><span class="comment"># r = cv2.split(img)[2]</span></span><br><span class="line"></span><br><span class="line">merged = cv2.merge([b,g,r])</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;Blue&quot;</span>,b)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Green&quot;</span>,g)</span><br><span class="line">cv2.imshow(<span class="string">&quot;Red&quot;</span>,r)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;Merged&quot;</span>,merged)</span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><h3 id="1-9-在图像上输出文字及图片"><a href="#1-9-在图像上输出文字及图片" class="headerlink" title="1.9 在图像上输出文字及图片"></a>1.9 在图像上输出文字及图片</h3><p>使用putText函数在图片上输出文字，函数原型：<br><code>putText(img, text, org, fontFace, fontScale, color, thickness=None, lineType=None, bottomLeftOrigin=None)</code></p><table><thead><tr><th>img</th><th>图像</th></tr></thead><tbody><tr><td>text</td><td>要输出的文本</td></tr><tr><td>org</td><td>文字的起点坐标</td></tr><tr><td>fontFace</td><td>字体</td></tr><tr><td>fontScale</td><td>字体大小</td></tr><tr><td>color</td><td>字体颜色</td></tr><tr><td>thickness</td><td>字图加粗</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;01.jpg&quot;</span>)</span><br><span class="line"> </span><br><span class="line">cv2.putText(img,<span class="string">&quot;Print some text to img&quot;</span>,(<span class="number">100</span>,<span class="number">100</span>),cv2.FONT_HERSHEY_SIMPLEX,<span class="number">1</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"> </span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv2.waitKey()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>绘制矩形和圆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cv2.rectangle(img, (x, y, x + w, y + h), color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), thickness=<span class="number">12</span>)</span><br><span class="line">cv2.circle(img, center=(x + w // <span class="number">2</span>, y + h // <span class="number">2</span>), radius=w // <span class="number">2</span>, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), thickness=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="1-10-图像缩放"><a href="#1-10-图像缩放" class="headerlink" title="1.10 图像缩放"></a>1.10 图像缩放</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>, img)</span><br><span class="line"></span><br><span class="line">img2 = cv2.resize(img, (<span class="number">200</span>, <span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;img2&quot;</span>, img1)</span><br><span class="line"></span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><table><thead><tr><th>interpolation 选项</th><th>所用的插值方法</th></tr></thead><tbody><tr><td>INTER_NEAREST</td><td>最近邻插值</td></tr><tr><td>INTER_LINEAR</td><td>双线性插值（默认设置）</td></tr><tr><td>INTER_AREA</td><td>使用像素区域关系进行重采样。 它可能是图像抽取的首选方法，因为它会产生无云纹理的结果。 但是当图像缩放时，它类似于INTER_NEAREST方法。</td></tr><tr><td>INTER_CUBIC</td><td>4x4像素邻域的双三次插值</td></tr><tr><td>INTER_LANCZOS4</td><td>8x8像素邻域的Lanczos插值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;./res/aero3.jpg&#x27;</span>)</span><br><span class="line">print(img.shape[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">height, width = img.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">reSize1 = cv2.resize(img, (<span class="number">2</span>*width, <span class="number">2</span>*height), interpolation=cv2.INTER_CUBIC)</span><br><span class="line">reSize2 = cv2.resize(img, (<span class="built_in">int</span>(width/<span class="number">2</span>), <span class="built_in">int</span>(height/<span class="number">2</span>)), interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&#x27;reSize1&#x27;</span>, reSize1)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;reSize2&#x27;</span>, reSize2)</span><br><span class="line"></span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="1-11-实现正常退出"><a href="#1-11-实现正常退出" class="headerlink" title="1.11 实现正常退出"></a>1.11 实现正常退出</h3><p>cv2.waitkey(delaytime)——-&gt;returnvalue<br>在delaytime时间内,按键盘, 返回所按键的ASCII值;若未在delaytime时间内按任何键, 返回-1; 其中,dalaytime: 单位ms;<br>note: </p><ol><li>当delaytime为0时,表示forever,永不退回.</li><li>当按ecs键时,因为esc键ASCII值为27,所有returnvalue的值为27, 一般用这个机制实现在delaytime内正常退出.</li><li>也使用 if cv2.waitKey(1) &amp; 0xFF == ord(‘q’): break</li><li>来实现1ms之内的正常退出.</li><li>其中, ord(‘q’)：返回q对应的Unicode码对应的值，q对应的Unicode数值为113。</li><li>0xFF：0xFF是一个位掩码，十六进制常数，二进制值为11111111, 它将左边的24位设置为0,把返回值限制在在0和255之间。ord(’ ‘)返回按键对应的整数（ASCII码）<h3 id="1-12-保存图像"><a href="#1-12-保存图像" class="headerlink" title="1.12 保存图像"></a>1.12 保存图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">#cv2.IMWRITE_JPEG_QUALITY的值默认是long，需要强制转为int</span></span><br><span class="line"><span class="comment">#对于img格式，其质量为0-100的范围，其中默认是95</span></span><br><span class="line">   cv2.imwrite(<span class="string">&quot;./5.jpg&quot;</span>, img, [<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="number">5</span>])</span><br><span class="line">   cv2.imwrite(<span class="string">&quot;./100.jpg&quot;</span>, img, [<span class="built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="number">100</span>])</span><br><span class="line"><span class="comment">#对于png格式，其质量为0-9范围，其中默认是3</span></span><br><span class="line">   cv2.imwrite(<span class="string">&quot;./0.png&quot;</span>, img, [<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">0</span>])</span><br><span class="line">   cv2.imwrite(<span class="string">&quot;./9.png&quot;</span>, img, [<span class="built_in">int</span>(cv2.IMWRITE_PNG_COMPRESSION), <span class="number">9</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 待检测的图片路径</span></span><br><span class="line">imagepath=<span class="string">&quot;1.jpg&quot;</span></span><br><span class="line"> </span><br><span class="line">image = cv2.imread(imagepath)</span><br><span class="line">gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取人脸识别训练数据</span></span><br><span class="line"><span class="comment">#对于人脸特征的一些描述，opencv在读取完数据后很据训练中的样品数据，</span></span><br><span class="line"><span class="comment">#就可以感知读取到的图片上的特征，进而对图片进行人脸识别。</span></span><br><span class="line"><span class="comment">#xml数据下载：https://github.com/opencv/opencv/tree/master/data/haarcascades</span></span><br><span class="line"></span><br><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">r&#x27;./haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 探测人脸</span></span><br><span class="line"><span class="comment"># 根据训练的数据来对新图片进行识别的过程。</span></span><br><span class="line">faces = face_cascade.detectMultiScale(</span><br><span class="line">  gray,</span><br><span class="line">  scaleFactor = <span class="number">1.15</span>,</span><br><span class="line">  minNeighbors = <span class="number">5</span>,</span><br><span class="line">  minSize = (<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">  <span class="comment">#flags = cv2.HAAR_SCALE_IMAGE</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 我们可以随意的指定里面参数的值，来达到不同精度下的识别。返回值就是opencv对图片的探测结果的体现。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 处理人脸探测的结果</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;发现&#123;0&#125;个人脸!&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(faces)))</span><br><span class="line"><span class="keyword">for</span>(x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">    cv2.rectangle(image,(x,y),(x+w,y+w),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># cv2.circle(image,((x+x+w)/2,(y+y+h)/2),w/2,(0,255,0),2)</span></span><br><span class="line"> </span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-Haar级联分类器"><a href="#2-Haar级联分类器" class="headerlink" title="2. Haar级联分类器"></a>2. Haar级联分类器</h2><h3 id="2-1-种类"><a href="#2-1-种类" class="headerlink" title="2.1 种类"></a>2.1 种类</h3><p>顾名思义——</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">haarcascade_eye.xml</span><br><span class="line">haarcascade_eye_tree_eyeglasses.xml</span><br><span class="line">haarcascade_frontalface_alt.xml</span><br><span class="line">haarcascade_frontalface_alt_tree.xml</span><br><span class="line">haarcascade_frontalface_alt2.xml</span><br><span class="line">haarcascade_frontalface_default.xml</span><br><span class="line">haarcascade_fullbody.xml</span><br><span class="line">haarcascade_lefteye_2splits.xml</span><br><span class="line">haarcascade_lowerbody.xml</span><br><span class="line">haarcascade_mcs_eyepair_big.xml</span><br><span class="line">haarcascade_mcs_eyepair_small.xml</span><br><span class="line">haarcascade_mcs_leftear.xml</span><br><span class="line">haarcascade_mcs_lefteye.xml</span><br><span class="line">haarcascade_mcs_mouth.xml</span><br><span class="line">haarcascade_mcs_nose.xml</span><br><span class="line">haarcascade_mcs_rightear.xml</span><br><span class="line">haarcascade_mcs_righteye.xml</span><br><span class="line">haarcascade_mcs_upperbody.xml</span><br><span class="line">haarcascade_profileface.xml</span><br><span class="line">haarcascade_righteye_2splits.xml</span><br><span class="line">haarcascade_smile.xml</span><br><span class="line">haarcascade_upperbody.xml</span><br></pre></td></tr></table></figure><h3 id="2-2-detectMultiScale函数"><a href="#2-2-detectMultiScale函数" class="headerlink" title="2.2 detectMultiScale函数"></a>2.2 detectMultiScale函数</h3><p>函数原型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objects = cv2.CascadeClassifier.detectMultiScale( image[, scaleFactor[,￼   minNeighbors[, flags[, minSize[, maxSize]]]]] )</span><br></pre></td></tr></table></figure><p>检测人脸和眼睛应该出现的位置</p><table><thead><tr><th>image</th><th>待检测图像，通常设置为灰度图像</th></tr></thead><tbody><tr><td>scaleFactor</td><td>窗口缩放的比例</td></tr><tr><td>minNeighbors</td><td>检测的目标相邻矩形的最小个数，默认三，如果希望检测严格可以调高</td></tr><tr><td>flags</td><td>边缘检测器，拒绝一些区域</td></tr><tr><td>minSize</td><td>最小尺寸，小于这个尺寸的可以忽略</td></tr><tr><td>naxSize</td><td>最大尺寸，大于这个尺寸的可以忽略</td></tr></tbody></table><h3 id="2-3-LBPH识别"><a href="#2-3-LBPH识别" class="headerlink" title="2.3 LBPH识别"></a>2.3 <del>LBPH识别</del></h3><p><del>retval = cv2.face.LBPHFaceRecognizer_create( [, radius[, neighbors[,￼grid_x[, grid_y[, threshold]]]]])</del></p><p><del>方法：PCA</del></p><p><del>暂时并不需要完成识别，只需要检测</del></p><h2 id="3-识别"><a href="#3-识别" class="headerlink" title="3.识别"></a>3.识别</h2><p>导入haarcascade_eye.xml和haarcascade_frontalface_default.xml</p><p>在Github下载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileUrl=https://github.com/opencv/opencv</span><br></pre></td></tr></table></figure><h3 id="3-1-人脸导入以及灰度处理"><a href="#3-1-人脸导入以及灰度处理" class="headerlink" title="3.1 人脸导入以及灰度处理"></a>3.1 人脸导入以及灰度处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 载入人脸识别和眼睛识别的两个xml文件</span></span><br><span class="line">face_xml = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">eye_xml = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_eye.xml&#x27;</span>)</span><br><span class="line"><span class="comment"># 载入图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;face.jpg&#x27;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;src&#x27;</span>, img)</span><br><span class="line"><span class="comment"># 灰度处理</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure><h3 id="3-2-识别人脸并且用方框标记"><a href="#3-2-识别人脸并且用方框标记" class="headerlink" title="3.2 识别人脸并且用方框标记"></a>3.2 识别人脸并且用方框标记</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 人脸识别</span></span><br><span class="line">face = face_xml.detectMultiScale(gray, <span class="number">1.3</span>, <span class="number">2</span>)  <span class="comment"># 参数：1、灰度图片， 2、缩放比例， 3、阈值</span></span><br><span class="line">print(<span class="string">&quot;这张图片中有%d张人脸&quot;</span> % <span class="built_in">len</span>(face))</span><br><span class="line"><span class="comment"># 绘制出识别到的人脸</span></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> face:</span><br><span class="line">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)  <span class="comment"># 绘制人脸方框</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;dst&#x27;</span>, img)</span><br><span class="line">    cv2.waitkey(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-识别眼睛并用方框标记"><a href="#3-3-识别眼睛并用方框标记" class="headerlink" title="3.3 识别眼睛并用方框标记"></a>3.3 识别眼睛并用方框标记</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在人脸的基础上识别眼睛</span></span><br><span class="line">    face_gray = gray[y:y+h, x:x+w]</span><br><span class="line">    face_color = img[y:y+h, x:x+w]</span><br><span class="line">    <span class="comment"># 眼睛识别</span></span><br><span class="line">    eyes = eye_xml.detectMultiScale(face_gray)</span><br><span class="line">    print(<span class="string">&quot;在这张脸上有%d个眼睛&quot;</span> % <span class="built_in">len</span>(eyes))</span><br><span class="line">    <span class="comment"># 绘制出识别到的眼睛</span></span><br><span class="line">    <span class="keyword">for</span> (e_x, e_y, e_w, e_h) <span class="keyword">in</span> eyes:</span><br><span class="line">        cv2.rectangle(face_color, (e_x, e_y), (e_x+e_w, e_y+e_h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)  <span class="comment"># 绘制眼睛方框</span></span><br></pre></td></tr></table></figure><h3 id="3-4-对图片进行完整处理"><a href="#3-4-对图片进行完整处理" class="headerlink" title="3.4 对图片进行完整处理"></a>3.4 对图片进行完整处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-17 18:38</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : test01.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;WWQ&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 载入人脸识别和眼睛识别的两个xml文件</span></span><br><span class="line">face_xml = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">eye_xml = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_eye.xml&#x27;</span>)</span><br><span class="line"><span class="comment"># 载入图片</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;face.jpg&#x27;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;src&#x27;</span>, img)</span><br><span class="line"><span class="comment"># 灰度处理</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 人脸识别</span></span><br><span class="line">face = face_xml.detectMultiScale(gray, <span class="number">1.3</span>, <span class="number">2</span>)  <span class="comment"># 参数：1、灰度图片， 2、缩放比例， 3、阈值</span></span><br><span class="line">print(<span class="string">&quot;这张图片中有%d张人脸&quot;</span> % <span class="built_in">len</span>(face))</span><br><span class="line"><span class="comment"># 绘制出识别到的人脸</span></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> face:</span><br><span class="line">    cv2.rectangle(img, (x, y), (x+w, y+h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)  <span class="comment"># 绘制人脸方框</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;dst&#x27;, img)</span></span><br><span class="line">    <span class="comment"># 在人脸的基础上识别眼睛</span></span><br><span class="line">    face_gray = gray[y:y+h, x:x+w]</span><br><span class="line">    face_color = img[y:y+h, x:x+w]</span><br><span class="line">    <span class="comment"># 眼睛识别</span></span><br><span class="line">    eyes = eye_xml.detectMultiScale(face_gray)</span><br><span class="line">    print(<span class="string">&quot;在这张脸上有%d个眼睛&quot;</span> % <span class="built_in">len</span>(eyes))</span><br><span class="line">    <span class="comment"># 绘制出识别到的眼睛</span></span><br><span class="line">    <span class="keyword">for</span> (e_x, e_y, e_w, e_h) <span class="keyword">in</span> eyes:</span><br><span class="line">        cv2.rectangle(face_color, (e_x, e_y), (e_x+e_w, e_y+e_h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)  <span class="comment"># 绘制眼睛方框</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;dst&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="3-5-检测画面中人脸的个数"><a href="#3-5-检测画面中人脸的个数" class="headerlink" title="3.5 检测画面中人脸的个数"></a>3.5 检测画面中人脸的个数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-17 18:38</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : test01.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 待检测的图片路径</span></span><br><span class="line">imagepath=<span class="string">&quot;test01.jpg&quot;</span></span><br><span class="line"> </span><br><span class="line">image = cv2.imread(imagepath)</span><br><span class="line">gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 获取人脸识别训练数据</span></span><br><span class="line"><span class="string">对于人脸特征的一些描述，opencv在读取完数据后很据训练中的样品数据，</span></span><br><span class="line"><span class="string">就可以感知读取到的图片上的特征，进而对图片进行人脸识别。</span></span><br><span class="line"><span class="string">xml数据下载，</span></span><br><span class="line"><span class="string">参考：https://github.com/opencv/opencv/tree/master/data/haarcascades</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">r&#x27;./haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 探测人脸</span></span><br><span class="line"><span class="comment"># 根据训练的数据来对新图片进行识别的过程。</span></span><br><span class="line">faces = face_cascade.detectMultiScale(</span><br><span class="line">  gray,</span><br><span class="line">  scaleFactor = <span class="number">1.15</span>,</span><br><span class="line">  minNeighbors = <span class="number">5</span>,</span><br><span class="line">  minSize = (<span class="number">5</span>,<span class="number">5</span>),</span><br><span class="line">  <span class="comment">#flags = cv2.HAAR_SCALE_IMAGE</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 我们可以随意的指定里面参数的值，来达到不同精度下的识别。返回值就是opencv对图片的探测结果的体现。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 处理人脸探测的结果</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;发现&#123;0&#125;个人脸!&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(faces)))</span><br><span class="line"><span class="keyword">for</span>(x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">    cv2.rectangle(image,(x,y),(x+w,y+w),(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>),<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># cv2.circle(image,((x+x+w)/2,(y+y+h)/2),w/2,(0,255,0),2)</span></span><br><span class="line"> </span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>,image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="4-提取人眼区域的瞳孔位置"><a href="#4-提取人眼区域的瞳孔位置" class="headerlink" title="4.提取人眼区域的瞳孔位置"></a>4.提取人眼区域的瞳孔位置</h2><h3 id="4-1-提取人眼的位置，并且二值化"><a href="#4-1-提取人眼的位置，并且二值化" class="headerlink" title="4.1 提取人眼的位置，并且二值化"></a>4.1 提取人眼的位置，并且二值化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-17 19:27</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : test01.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">src = cv2.imread(<span class="string">&quot;/home/jon/code/python/img/eye_area.jpg&quot;</span>)</span><br><span class="line">gray = cv2.cvtColor(src, cv.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">&quot;gray image&quot;</span>, gray)</span><br><span class="line">ret,binary = cv2.threshold(gray, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)</span><br><span class="line">cv2.imshow(<span class="string">&quot;binary image&quot;</span>, binary)</span><br></pre></td></tr></table></figure><h3 id="4-2-对其降噪处理"><a href="#4-2-对其降噪处理" class="headerlink" title="4.2 对其降噪处理"></a>4.2 对其降噪处理</h3><p>要想得到眼球，我们可以通过一个圆形的结构元素，对这张图像做个开操作(先腐蚀再膨胀)，但是还存在一个问题，中心的圆形区域还存在噪声，需要先把这个噪声剔除<img src="https://img-blog.csdnimg.cn/20190425160356134.JPG" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element1 = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">-1</span>,<span class="number">-1</span>))</span><br><span class="line">tmp = cv2.morphologyEx(binary,cv2.MORPH_CLOSE,element1,<span class="literal">None</span>,(<span class="number">-1</span>,<span class="number">-1</span>),<span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;tmp image&quot;</span>, tmp)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190425161034606.JPG" alt="在这里插入图片描述">这样图像就干净了，去除了噪声后，我们也就可以通过圆形的结构元素提取眼球位置<br>注意：这里的矩形结构元素不能太大了，不然会把里面的2个大黑点当作噪声去除了，从而导致找不到眼球</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element2 = cv.getStructuringElement(cv.MORPH_ELLIPSE,(<span class="number">16</span>,<span class="number">16</span>),(<span class="number">-1</span>,<span class="number">-1</span>))</span><br><span class="line">dst = cv.morphologyEx(tmp,cv.MORPH_OPEN,element2)</span><br><span class="line">cv.imshow(<span class="string">&quot;eye image&quot;</span>, dst)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190425161314888.JPG" alt="在这里插入图片描述">如图得到眼球，下面只需要来个轮廓发现并填充颜色即可<br>注意：这里的圆形区域的大小需要适当大点，或许需要根据不同的图片坐下微调以达到理想的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cloneImage, contours, hierarchy = cv2.findContours(dst, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE, <span class="literal">None</span>, <span class="literal">None</span>, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> i, contour <span class="keyword">in</span> <span class="built_in">enumerate</span>(contours):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;find &quot;</span></span><br><span class="line">    cv2.drawContours(src, contours, i, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;dst image&quot;</span>, src)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-3-完整判断眼睛代码"><a href="#4-3-完整判断眼睛代码" class="headerlink" title="4.3 完整判断眼睛代码"></a>4.3 完整判断眼睛代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-17 18:38</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : test01.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"><span class="comment"># from PIL import Image</span></span><br><span class="line"><span class="keyword">import</span> cv2 </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">src = cv2.imread(<span class="string">&quot;/home/jon/code/python/img/tpl.jpg&quot;</span>)</span><br><span class="line">gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">&quot;gray image&quot;</span>, gray)</span><br><span class="line">ret,binary = cv2.threshold(gray, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)</span><br><span class="line">cv2.imshow(<span class="string">&quot;binary image&quot;</span>, binary)</span><br><span class="line"></span><br><span class="line">element1 = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>,<span class="number">3</span>),(<span class="number">-1</span>,<span class="number">-1</span>))</span><br><span class="line">tmp = cv2.morphologyEx(binary,cv2.MORPH_CLOSE,element1,<span class="literal">None</span>,(<span class="number">-1</span>,<span class="number">-1</span>),<span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;tmp image&quot;</span>, tmp)</span><br><span class="line"></span><br><span class="line">element2 = cv2.getStructuringElement(cv2.MORPH_ELLIPSE,(<span class="number">16</span>,<span class="number">16</span>),(<span class="number">-1</span>,<span class="number">-1</span>))</span><br><span class="line">dst = cv2.morphologyEx(tmp,cv.MORPH_OPEN,element2)</span><br><span class="line">cv2.imshow(<span class="string">&quot;eye image&quot;</span>, dst)</span><br><span class="line"></span><br><span class="line">cloneImage, contours, hierarchy = cv2.findContours(dst, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE, <span class="literal">None</span>, <span class="literal">None</span>, (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> i, contour <span class="keyword">in</span> <span class="built_in">enumerate</span>(contours):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;find &quot;</span></span><br><span class="line">    cv2.drawContours(src, contours, i, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;dst image&quot;</span>, src)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="5-视频操作"><a href="#5-视频操作" class="headerlink" title="5. 视频操作"></a>5. 视频操作</h2><h3 id="5-1-读取视频"><a href="#5-1-读取视频" class="headerlink" title="5.1 读取视频"></a>5.1 读取视频</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cap = cv2. VideoCapture (<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = cap. read()</span><br><span class="line">    cv2. imshow(<span class="string">&#x27; Video&#x27;</span>,frame)</span><br><span class="line">    C = cv2. waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> c == <span class="number">27</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>1、cap = cv2.VideoCapture(0)</p><p>VideoCapture()中参数是0，表示打开笔记本的内置摄像头，参数是视频文件路径则打开视频，如cap = cv2.VideoCapture(“../test.avi”)</p><p>2、ret,frame = cap.read()</p><p> cap.read()按帧读取视频，ret,frame是获cap.read()方法的两个返回值。其中<code>ret</code>是布尔值，如果读取帧是正确的则返回True，如果文件读取到结尾，它的返回值就为False。<code>frame</code>就是每一帧的图像，是个三维矩阵。</p><p>3、cv2.waitKey(1)，waitKey（）方法本身表示等待键盘输入，</p><p>参数是1，表示延时1ms切换到下一帧图像，对于视频而言；</p><p>参数为0，如cv2.waitKey(0)只显示当前帧图像，相当于视频暂停,；</p><p>参数过大如cv2.waitKey(1000)，会因为延时过久而卡顿感觉到卡顿。</p><p>c得到的是键盘输入的ASCII码，esc键对应的ASCII码是27，即当按esc键是if条件句成立</p><p>4、调用release()释放摄像头，调用destroyAllWindows()关闭所有图像窗口。</p><h3 id="5-2-将视频的每一帧识别出人像"><a href="#5-2-将视频的每一帧识别出人像" class="headerlink" title="5.2 将视频的每一帧识别出人像"></a>5.2 将视频的每一帧识别出人像</h3><p>将上述的方法整合<br>即可实现每一帧的视频中的图像展示出来<br>示例代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-19 16:32</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : videoOpen.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">dataFaceUrl = <span class="string">r&#x27;E:\opencv\opencv-master\data\haarcascades\haarcascade_frontalface_default.xml&#x27;</span></span><br><span class="line">dataEyesUrl = <span class="string">r&#x27;E:\opencv\opencv-master\data\haarcascades\haarcascade_eye.xml&#x27;</span></span><br><span class="line">videoUrl=<span class="string">r&#x27;D:\Desktop\python\demo\testOpencv\video1.mp4&#x27;</span></span><br><span class="line">eye_cascade = cv2.CascadeClassifier(dataEyeUrl)</span><br><span class="line">face_cascade = cv2.CascadeClassifier(dataFaceUrl)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    cap=cv2.VideoCapture(videoUrl)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret,frame=cap.read()</span><br><span class="line">        <span class="comment"># cv2.imshow(&#x27;video&#x27;,frame)</span></span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        BBox = face_cascade.detectMultiScale(gray, <span class="number">1.3</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> BBox:</span><br><span class="line">            frame = cv2.rectangle(frame, (x, y), (x + w, y + h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">        height, width = frame.shape[:<span class="number">2</span>]</span><br><span class="line">        reSize2 = cv2.resize(frame, (<span class="built_in">int</span>(width / <span class="number">2</span>), <span class="built_in">int</span>(height / <span class="number">2</span>)), interpolation=cv2.INTER_CUBIC)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;release&#x27;</span>, reSize2)</span><br><span class="line">        c = cv2.waitKey(<span class="number">100</span>//<span class="number">30</span>)<span class="comment">#假定视频文件30帧</span></span><br><span class="line">        <span class="keyword">if</span> c==<span class="number">27</span>:<span class="comment">#按下esc退出</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="5-3-识别人脸中的眼睛是否完整"><a href="#5-3-识别人脸中的眼睛是否完整" class="headerlink" title="5.3 识别人脸中的眼睛是否完整"></a>5.3 识别人脸中的眼睛是否完整</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eyesDetect</span>(<span class="params">x, y, w, h,img,gray</span>):</span></span><br><span class="line">    face_gray = gray[y:y + h, x:x + w]</span><br><span class="line">    face_color = img[y:y + h, x:x + w]</span><br><span class="line">    <span class="comment"># 眼睛识别</span></span><br><span class="line">    eyes = eye_cascade.detectMultiScale(face_gray)</span><br><span class="line">    <span class="comment"># 绘制出识别到的眼睛</span></span><br><span class="line">    <span class="keyword">for</span> (e_x, e_y, e_w, e_h) <span class="keyword">in</span> eyes:</span><br><span class="line">        cv2.rectangle(face_color, (e_x, e_y), (e_x + e_w, e_y + e_h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>) </span><br><span class="line">        <span class="comment"># 绘制眼睛方框</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="5-4-识别人脸及眼睛代码"><a href="#5-4-识别人脸及眼睛代码" class="headerlink" title="5.4 识别人脸及眼睛代码"></a>5.4 识别人脸及眼睛代码</h3><p>待调整：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-19 16:32</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : videoOpen.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">dataFaceUrl = <span class="string">r&#x27;E:\opencv\opencv-master\data\haarcascades\haarcascade_frontalface_default.xml&#x27;</span></span><br><span class="line">dataEyeUrl = <span class="string">r&#x27;E:\opencv\opencv-master\data\haarcascades\haarcascade_eye.xml&#x27;</span></span><br><span class="line">videoUrl=<span class="string">r&#x27;D:\Desktop\whx.mp4&#x27;</span></span><br><span class="line">eyeCascade = cv2.CascadeClassifier(dataEyeUrl)</span><br><span class="line">faceCascade = cv2.CascadeClassifier(dataFaceUrl)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># cap=cv2.VideoCapture(0)</span></span><br><span class="line">    cap = cv2.VideoCapture(videoUrl)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        flag,frame=cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        flag1=<span class="number">1</span><span class="comment">#代表眼睛数目正常</span></span><br><span class="line">        flag2=<span class="number">1</span><span class="comment">#代表脸部数目正常</span></span><br><span class="line">        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)<span class="comment">#灰化，转为黑白</span></span><br><span class="line">        faces = faceCascade.detectMultiScale(gray, <span class="number">1.3</span>, <span class="number">6</span>,minSize=(<span class="number">150</span>,<span class="number">150</span>))<span class="comment">#返回四维列表，最小大小暂时设置为150，防止误识别，后期可以再修改</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">len</span>(faces)==<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">                frame = cv2.rectangle(frame, (x, y), (x + w, y + h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                faceGray = gray[y:y + <span class="built_in">int</span>(h*<span class="number">2</span>/<span class="number">3</span>), x:x + w]<span class="comment">#这里取脸部上方2/3，为了防止误识别嘴巴</span></span><br><span class="line">                faceFrame = frame[y:y + <span class="built_in">int</span>(h*<span class="number">2</span>/<span class="number">3</span>), x:x + w]</span><br><span class="line">                eyes = eyeCascade.detectMultiScale(faceGray,<span class="number">1.3</span>,<span class="number">7</span>)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">len</span>(eyes)==<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> (e_x, e_y, e_w, e_h) <span class="keyword">in</span> eyes:</span><br><span class="line">                        cv2.rectangle(faceFrame, (e_x, e_y), (e_x + e_w, e_y + e_h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    flag1=<span class="number">0</span><span class="comment">#代表眼睛个数不为2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag2=<span class="number">0</span><span class="comment">#代表眼睛个数不为1</span></span><br><span class="line">        <span class="keyword">if</span> flag1==<span class="number">1</span> <span class="keyword">and</span> flag2==<span class="number">1</span>:<span class="comment">#只有当脸的个数为1，眼睛数为2，输出</span></span><br><span class="line">            cv2.putText(frame,<span class="string">&quot;ok&quot;</span>,(<span class="number">30</span>,<span class="number">50</span>),cv2.FONT_HERSHEY_SIMPLEX,<span class="number">3</span>,(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv2.putText(frame,<span class="string">&quot;error&quot;</span>,(<span class="number">30</span>,<span class="number">50</span>),cv2.FONT_HERSHEY_SIMPLEX,<span class="number">3</span>,(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line">        height, width = frame.shape[:<span class="number">2</span>]</span><br><span class="line">        reSize2 = cv2.resize(frame, (<span class="built_in">int</span>(width / <span class="number">1.3</span>), <span class="built_in">int</span>(height / <span class="number">1.3</span>)), interpolation=cv2.INTER_CUBIC)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;release&#x27;</span>, reSize2)</span><br><span class="line">        esc = cv2.waitKey(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> esc == <span class="number">27</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    cv2.distoryAllWindows()</span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="6-优化"><a href="#6-优化" class="headerlink" title="6. 优化"></a>6. 优化</h2><h3 id="6-1待续"><a href="#6-1待续" class="headerlink" title="6.1待续"></a>6.1<del>待续</del></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;利用opencv进行人脸检测与识别&quot;&gt;&lt;a href=&quot;#利用opencv进行人脸检测与识别&quot; class=&quot;headerlink&quot; title=&quot;利用opencv进行人脸检测与识别&quot;&gt;&lt;/a&gt;利用opencv进行人脸检测与识别&lt;/h1&gt;&lt;h2 id=&quot;1-Ope</summary>
      
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    <category term="python" scheme="http://example.com/categories/opencv/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="人脸识别" scheme="http://example.com/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>网页爬虫项目实战经验</title>
    <link href="http://example.com/2020/10/12/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    <id>http://example.com/2020/10/12/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/</id>
    <published>2020-10-12T12:12:03.000Z</published>
    <updated>2020-10-28T11:50:26.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网页爬虫项目实战经验"><a href="#网页爬虫项目实战经验" class="headerlink" title="网页爬虫项目实战经验"></a>网页爬虫项目实战经验</h1><p>此篇记录了网页爬虫的基本使用库，以及常用的正则表达式操作等。<br>同时给出了豆瓣电影top250的爬取方式（经典爬虫入门项目）。<br>以及对于CSDN的博主主页单个以及多个文章的爬取，并利用工具将其转换为pdf格式</p><h1 id="1-Bs4"><a href="#1-Bs4" class="headerlink" title="1.Bs4"></a>1.Bs4</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bs4将复杂html文档转换成一个复杂的树形结构，每个节点都是python对象，所有对象可以分为<span class="number">4</span>种</span><br><span class="line"></span><br><span class="line">-Tag</span><br><span class="line">-NavigableString</span><br><span class="line">-BeautifulSoup</span><br><span class="line">-Comment</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-1-analyze"><a href="#1-1-analyze" class="headerlink" title="1.1 analyze"></a>1.1 analyze</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bs4分析文档</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./baidu.html&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">html = file.read()</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.head))<span class="comment">#&lt;class &#x27;bs4.element.Tag&#x27;&gt;标签及其内容</span></span><br><span class="line"><span class="comment">#1.tag  标签及内容：拿到它所找到的第一个内容</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.title.string))<span class="comment">#&lt;class &#x27;bs4.element.NavigableString&#x27;&gt;标签里的内容</span></span><br><span class="line"><span class="comment">#2.NavigableString标签里的内容</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.a.attrs))<span class="comment">#&lt;class &#x27;dict&#x27;&gt;#&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="comment">#3.标签内部的字典信息</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs))<span class="comment">#&lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br><span class="line"><span class="comment">#4.表示整个文档</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.a.string))<span class="comment">#&lt;class &#x27;bs4.element.Comment&#x27;&gt;</span></span><br><span class="line"><span class="comment">#5.第一个a中的注释里的内容,不包含注释符号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-Traversal"><a href="#1-2-Traversal" class="headerlink" title="1.2 Traversal"></a>1.2 Traversal</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文档的遍历</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./baidu.html&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">html = file.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">print(bs.head.contents)<span class="comment">#列表类型，可以用下标访问</span></span><br><span class="line">print(bs.head.contents[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-find"><a href="#1-3-find" class="headerlink" title="1.3 find"></a>1.3 find</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#文档搜索</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./baidu.html&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">html = file.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.find_all()</span></span><br><span class="line"><span class="comment">#查找与字符串完全匹配的内容</span></span><br><span class="line">t_list=bs.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#所有&lt;a&gt;标签下面的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.search()</span></span><br><span class="line"><span class="comment">#正则表达式来搜索</span></span><br><span class="line">t_list=bs.find_all(re.<span class="built_in">compile</span>(<span class="string">&quot;a&quot;</span>))<span class="comment">#匹配与正则表达式a有关的全部内容</span></span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.根据函数的要求来搜索</span></span><br><span class="line"><span class="comment">#自定义函数查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_is_exists</span>(<span class="params">tag</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tag.has_attr(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line">t_list=bs.find_all(name_is_exists)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.kwargs</span></span><br><span class="line">寻找<span class="built_in">id</span>=<span class="string">&quot;head&quot;</span>内的全部内容</span><br><span class="line">t_list=bs.find_all(<span class="built_in">id</span>=<span class="string">&quot;head&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.文本参数</span></span><br><span class="line">寻找文本的内容</span><br><span class="line">t_list=bs.find_all(text=[<span class="string">&quot;hao123&quot;</span>,<span class="string">&quot;贴吧&quot;</span>,<span class="string">&quot;地图&quot;</span>])</span><br><span class="line">t_list=bs.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&quot;\d&quot;</span>))  <span class="comment">#寻找符合正则表达式的项目，这里是寻找所有整数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.limit参数</span></span><br><span class="line">t_list=bs.find_all(<span class="string">&quot;a&quot;</span>,limit=<span class="number">3</span>)   <span class="comment">#只搜索三个</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.css选择器</span></span><br><span class="line">t_list=bs.select(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">t_list=bs.select(<span class="string">&quot;.mnav&quot;</span>)<span class="comment">#寻找类名</span></span><br><span class="line">t_list=bs.select(<span class="string">&#x27;#u1&#x27;</span>)<span class="comment">#通过id来查找</span></span><br><span class="line">t_list=bs.select(<span class="string">&quot;a[class=&#x27;bri&#x27;]&quot;</span>)<span class="comment">#通过属性来查找</span></span><br><span class="line">t_list=bs.select(<span class="string">&quot;head&gt;title&quot;</span>)<span class="comment">#通过子标签来查找</span></span><br><span class="line">t_list=bs.select(<span class="string">&quot;.mnav ~ .bri&quot;</span>)<span class="comment">#通过子标签来查找</span></span><br><span class="line">print(t_list[<span class="number">0</span>].get_text())<span class="comment">#获取文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h1 id="2-Re"><a href="#2-Re" class="headerlink" title="2. Re"></a>2. Re</h1><hr><p>#正则表达式：字符串模式（判断字符串是否符合一定标准）<br>import re<br>#创建模式对象</p><h2 id="2-1-new-object"><a href="#2-1-new-object" class="headerlink" title="2.1 new object"></a>2.1 new object</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#search</span></span><br><span class="line">pat=re.<span class="built_in">compile</span>(<span class="string">&quot;AA&quot;</span>)<span class="comment">#此处的AA属于正则表达式</span></span><br><span class="line">ans=pat.search(<span class="string">&quot;ABC&quot;</span>)<span class="comment">#这里的search内部属于被搜索的内容</span></span><br><span class="line">print(ans)<span class="comment">#输出None</span></span><br><span class="line">ans2=pat.search(<span class="string">&quot;AABCAA&quot;</span>)<span class="comment">#优先找到第一个结果</span></span><br><span class="line">print(ans2)<span class="comment">#输出&lt;re.Match object; span=(3, 5), match=&#x27;AA&#x27;&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-findall"><a href="#2-2-findall" class="headerlink" title="2.2 findall"></a>2.2 findall</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#findall</span></span><br><span class="line">ans=re.findall(<span class="string">&quot;a+&quot;</span>,<span class="string">&quot;aaabc&quot;</span>)<span class="comment">#前面是正则表达式，后面是待求的结果</span></span><br><span class="line">print(ans)<span class="comment">#输出[&#x27;aaa&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-sub"><a href="#2-3-sub" class="headerlink" title="2.3 sub"></a>2.3 sub</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sub(1,2,3)</span></span><br><span class="line">ans=re.sub(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;abcdcasd&quot;</span>)<span class="comment">#对于最后一个表达式，用a换成A</span></span><br><span class="line">print(ans)</span><br><span class="line"><span class="comment">#建议在正则表达式种，被比较的字符前面加上r，不用担心转义字符的问题</span></span><br></pre></td></tr></table></figure><h2 id="2-4-demo"><a href="#2-4-demo" class="headerlink" title="2.4 demo"></a>2.4 demo</h2><p>1、匹配中文:[\u4e00-\u9fa5]</p><p>2、英文字母:[a-zA-Z]</p><p>3、数字:[0-9]</p><p>4、匹配中文，英文字母和数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$<br>同时判断输入长度：<br>[\u4e00-\u9fa5_a-zA-Z0-9_]{4,10}</p><p>5、<br>(?!_)　　不能以<em>开头<br>(?!.*?</em>$)　　不能以_结尾<br>[a-zA-Z0-9_\u4e00-\u9fa5]+　　至少一个汉字、数字、字母、下划线<br>$　　与字符串结束的地方匹配</p><p>6、只含有汉字、数字、字母、下划线，下划线位置不限：<br>^[a-zA-Z0-9_\u4e00-\u9fa5]+$</p><p>7、由数字、26个英文字母或者下划线组成的字符串<br>^\w+$</p><p>8、2~4个汉字<br>“^[\u4E00-\u9FA5]{2,4}$”;</p><p>9、最长不得超过7个汉字，或14个字节(数字，字母和下划线)正则表达式<br>^[\u4e00-\u9fa5]{1,7}$|^[\dA-Za-z_]{1,14}$</p><p>10、匹配双字节字符(包括汉字在内)：[^x00-xff]<br>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p><p>11、匹配空白行的正则表达式：ns*r<br>评注：可以用来删除空白行</p><p>12、匹配HTML标记的正则表达式：&lt;(S*?)[^&gt;]<em>&gt;.</em>?|&lt;.*? /&gt;<br>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p><p>13、匹配首尾空白字符的正则表达式：^s*|s*$<br>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p><p>14、匹配Email地址的正则表达式：^[a-zA-Z0-9][\w.-]<em>[a-zA-Z0-9]@[a-zA-Z0-9][\w.-]</em>[a-zA-Z0-9].[a-zA-Z][a-zA-Z.]*[a-zA-Z]$</p><p>评注：表单验证时很实用</p><p>15、手机号：^((13[0-9])|(14[0-9])|(15[0-9])|(17[0-9])|(18[0-9]))\d{8}$</p><p>16、身份证：(^\d{15}$)|(^\d{17}([0-9]|X|x)$)</p><p>17、匹配网址URL的正则表达式：[a-zA-z]+://[^s]*<br>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p><p>18、匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>评注：表单验证时很实用</p><p>19、匹配国内电话号码：d{3}-d{8}|d{4}-d{7}<br>评注：匹配形式如 0511-4405222 或 021-87888822</p><p>20、匹配腾讯QQ号：[1-9][0-9]{4,}<br>评注：腾讯QQ号从10000开始</p><p>21、匹配中国邮政编码：[1-9]d{5}(?!d)<br>评注：中国邮政编码为6位数字</p><p>22、匹配身份证：d{15}|d{18}<br>评注：中国的身份证为15位或18位</p><p>23、匹配ip地址：d+.d+.d+.d+<br>评注：提取ip地址时有用</p><p>24、匹配特定数字：<br>^[1-9]d*$　 　 //匹配正整数<br>^-[1-9]d*$ 　 //匹配负整数<br>^-?[1-9]d*$　　 //匹配整数<br>^[1-9]d*|0$　 //匹配非负整数（正整数 + 0）<br>^-[1-9]d*|0$　　 //匹配非正整数（负整数 + 0）<br>^[1-9]d*.d*|0.d*[1-9]d*$　　 //匹配正浮点数<br>^-([1-9]d*.d*|0.d*[1-9]d*)$　 //匹配负浮点数<br>^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$　 //匹配浮点数<br>^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）<br>^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）<br>评注：处理大量数据时有用，具体应用时注意修正</p><p>25、匹配特定字符串：<br>^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串<br>^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串<br>^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串<br>^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串<br>^w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p><p>26、<br>在使用RegularExpressionValidator验证控件时的验证功能及其验证表达式介绍如下:<br>只能输入数字：“^[0-9]<em>$”<br>只能输入n位的数字：“^d{n}$”<br>只能输入至少n位数字：“^d{n,}$”<br>只能输入m-n位的数字：“^d{m,n}$”<br>只能输入零和非零开头的数字：“^(0|[1-9][0-9]</em>)$”<br>只能输入有两位小数的正实数：“^[0-9]+(.[0-9]{2})?$”<br>只能输入有1-3位小数的正实数：“^[0-9]+(.[0-9]{1,3})?$”<br>只能输入非零的正整数：“^+?[1-9][0-9]<em>$”<br>只能输入非零的负整数：“^-[1-9][0-9]</em>$”<br>只能输入长度为3的字符：“^.{3}$”<br>只能输入由26个英文字母组成的字符串：“^[A-Za-z]+$”<br>只能输入由26个大写英文字母组成的字符串：“^[A-Z]+$”<br>只能输入由26个小写英文字母组成的字符串：“^[a-z]+$”<br>只能输入由数字和26个英文字母组成的字符串：“^[A-Za-z0-9]+$”<br>只能输入由数字、26个英文字母或者下划线组成的字符串：“^w+$”<br>验证用户密码:“^[a-zA-Z]w{5,17}$”正确格式为：以字母开头，长度在6-18之间，<br>只能包含字符、数字和下划线。<br>验证是否含有^%&amp;’,;=?$”等字符：“[^%&amp;’,;=?$x22]+”<br>只能输入汉字：“^[u4e00-u9fa5],{0,}$”<br>验证Email地址：“^w+[-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)<em>$”<br>验证InternetURL：“^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]</em>)?$”<br>验证身份证号（15位或18位数字）：“^d{15}|d{}18$”<br>验证一年的12个月：“^(0?[1-9]|1[0-2])$”正确格式为：“01”-“09”和“1”“12”<br>验证一个月的31天：“^((0?[1-9])|((1|2)[0-9])|30|31)$”<br>正确格式为：“01”“09”和“1”“31”。<br>匹配中文字符的正则表达式： [u4e00-u9fa5]<br>匹配双字节字符(包括汉字在内)：[^x00-xff]<br>匹配空行的正则表达式：n[s| ]<em>r<br>匹配HTML标记的正则表达式：/&lt;(.*)&gt;.</em>|&lt;(.*) /&gt;/<br>匹配首尾空格的正则表达式：(^s*)|(s*$)<br>匹配Email地址的正则表达式：w+([-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)*<br>匹配网址URL的正则表达式：http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?</p><h1 id="3-Urllib"><a href="#3-Urllib" class="headerlink" title="3. Urllib"></a>3. Urllib</h1><hr><h2 id="3-1-get"><a href="#3-1-get" class="headerlink" title="3.1 get"></a>3.1 get</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#1、获取一个get请求</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    responce = urllib.request.urlopen(<span class="string">&quot;http://httpbin.org/get&quot;</span>,timeout=<span class="number">0.01</span>)</span><br><span class="line">    print(responce.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment">#对获取到的网页源码进行utf-8解码</span></span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&quot;time out&quot;</span>)   <span class="comment">#超时处理</span></span><br></pre></td></tr></table></figure><h2 id="3-2-post"><a href="#3-2-post" class="headerlink" title="3.2 post"></a>3.2 post</h2><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2、获取一个post请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span>&#125;), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&quot;http://httpbin.org/post&quot;</span>,data = data)</span><br><span class="line">print(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">responce = urllib.request.urlopen(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">print(responce.status)  <span class="comment">#获取状态码</span></span><br><span class="line">print(responce.getheaders())   <span class="comment">#获取全部信息</span></span><br><span class="line">print(responce.getheader(<span class="string">&quot;Server&quot;</span>))    <span class="comment">#获取全部信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-418-error"><a href="#3-3-418-error" class="headerlink" title="3.3 418 error"></a>3.3 418 error</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3、post请求，反418</span></span><br><span class="line">url=<span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">req=urllib.request.Request(url=url, data=data, headers=headers, method=<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">response=urllib.request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="3-4-test"><a href="#3-4-test" class="headerlink" title="3.4 test"></a>3.4 test</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#4、爬取豆瓣</span></span><br><span class="line">url=<span class="string">&quot;https://www.douban.com&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">req=urllib.request.Request(url=url, headers=headers)</span><br><span class="line">response=urllib.request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h1 id="4-Xwlt"><a href="#4-Xwlt" class="headerlink" title="4. Xwlt"></a>4. Xwlt</h1><h2 id="4-1-new"><a href="#4-1-new" class="headerlink" title="4.1 new"></a>4.1 new</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="comment">#创建对象</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)<span class="comment">#创建工作表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        worksheet.write(i<span class="number">-1</span>, j<span class="number">-1</span>, <span class="string">&#x27;%d*%d=%d&#x27;</span>%(i,j,i*j))  <span class="comment"># 行,列，内容</span></span><br><span class="line"></span><br><span class="line">workbook.save(<span class="string">&quot;student.xls&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="5-Release"><a href="#5-Release" class="headerlink" title="5. Release"></a>5. Release</h1><h2 id="5-1-Top250"><a href="#5-1-Top250" class="headerlink" title="5.1 Top250"></a>5.1 Top250</h2><p>爬取豆瓣电影Top250，并将其保存在sql数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020/10/6 21:00</span></span><br><span class="line"><span class="comment">#@Author : chasing</span></span><br><span class="line"><span class="comment">#@File : spyder.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># 网页解析，获取数据</span></span><br><span class="line"><span class="keyword">import</span> re  <span class="comment"># 正则表达式，进行文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error  <span class="comment"># 制定URL，获取网页数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt  <span class="comment"># 进行excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3  <span class="comment"># 进行SQLite数据库操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">    <span class="comment"># 1.爬取网页</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line">    <span class="comment">#savepath = &quot;豆瓣电影Top250.xls&quot;</span></span><br><span class="line">    dbpath = <span class="string">&quot;movie.db&quot;</span></span><br><span class="line">    <span class="comment"># 3.保存数据</span></span><br><span class="line">    <span class="comment"># saveData(datalist,savepath)</span></span><br><span class="line">    saveData2DB(datalist, dbpath)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># askURL(&quot;https://movie.douban.com/top250?start=&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 影片详情链接的规则</span></span><br><span class="line">findLink = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)  <span class="comment"># 创建正则表达式对象，表示规则（字符串的模式）</span></span><br><span class="line"><span class="comment"># 影片图片</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>, re.S)  <span class="comment"># re.S 让换行符包含在字符中</span></span><br><span class="line"><span class="comment"># 影片片名</span></span><br><span class="line">findTitle = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 影片评分</span></span><br><span class="line">findRating = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到评价人数</span></span><br><span class="line">findJudge = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span&gt;(\d*)人评价&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到概况</span></span><br><span class="line">findInq = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到影片的相关内容</span></span><br><span class="line">findBd = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    datalist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):  <span class="comment"># 调用获取页面信息的函数，10次</span></span><br><span class="line">        url = baseurl + <span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        html = askURL(url)  <span class="comment"># 保存获取到的网页源码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;item&quot;</span>): <span class="comment">#查找符合要求的字符串，形成列表</span></span><br><span class="line">            <span class="comment"># print(item)   #测试：查看电影item全部信息</span></span><br><span class="line">            data = []  <span class="comment"># 保存一部电影的所有信息</span></span><br><span class="line">            item = <span class="built_in">str</span>(item)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 影片详情的链接</span></span><br><span class="line">            link = re.findall(findLink, item)[<span class="number">0</span>]  <span class="comment"># re库用来通过正则表达式查找指定的字符串</span></span><br><span class="line">            data.append(link)  <span class="comment"># 添加链接</span></span><br><span class="line"></span><br><span class="line">            imgSrc = re.findall(findImgSrc, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)  <span class="comment"># 添加图片</span></span><br><span class="line"></span><br><span class="line">            titles = re.findall(findTitle, item)  <span class="comment"># 片名可能只有一个中文名，没有外国名</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(titles) == <span class="number">2</span>):</span><br><span class="line">                ctitle = titles[<span class="number">0</span>]  <span class="comment"># 添加中文名</span></span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = titles[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 去掉无关的符号</span></span><br><span class="line">                data.append(otitle)  <span class="comment"># 添加外国名</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(titles[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 外国名字留空</span></span><br><span class="line"></span><br><span class="line">            rating = re.findall(findRating, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(rating)  <span class="comment"># 添加评分</span></span><br><span class="line"></span><br><span class="line">            judgeNum = re.findall(findJudge, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(judgeNum)  <span class="comment"># 提加评价人数</span></span><br><span class="line"></span><br><span class="line">            inq = re.findall(findInq, item)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(inq) != <span class="number">0</span>:</span><br><span class="line">                inq = inq[<span class="number">0</span>].replace(<span class="string">&quot;。&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 去掉句号</span></span><br><span class="line">                data.append(inq)                <span class="comment"># 添加概述</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">&quot; &quot;</span>)  <span class="comment"># 留空</span></span><br><span class="line"></span><br><span class="line">            bd = re.findall(findBd, item)[<span class="number">0</span>]</span><br><span class="line">            bd = re.sub(<span class="string">&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>, <span class="string">&quot; &quot;</span>, bd)  <span class="comment"># 去掉&lt;br/&gt;</span></span><br><span class="line">            bd = re.sub(<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot; &quot;</span>, bd)  <span class="comment"># 替换/</span></span><br><span class="line">            data.append(bd.strip())  <span class="comment"># 去掉前后的空格</span></span><br><span class="line"></span><br><span class="line">            datalist.append(data)  <span class="comment"># 把处理好的一部电影信息放入datalist</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到指定一个URL的网页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    head = &#123;  <span class="comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 用户代理，表示告诉豆瓣服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）</span></span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url, headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;code&quot;</span>):</span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            print(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData</span>(<span class="params">datalist, savepath</span>):</span></span><br><span class="line">    print(<span class="string">&quot;save....&quot;</span>)</span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>, style_compression=<span class="number">0</span>)  <span class="comment"># 创建workbook对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">&#x27;豆瓣电影Top250&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)  <span class="comment"># 创建工作表</span></span><br><span class="line">    col = (<span class="string">&quot;电影详情链接&quot;</span>, <span class="string">&quot;图片链接&quot;</span>, <span class="string">&quot;影片中文名&quot;</span>, <span class="string">&quot;影片外国名&quot;</span>, <span class="string">&quot;评分&quot;</span>, <span class="string">&quot;评价数&quot;</span>, <span class="string">&quot;概况&quot;</span>, <span class="string">&quot;相关信息&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>, i, col[i])  <span class="comment"># 列名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>):</span><br><span class="line">        print(<span class="string">&quot;第%d条&quot;</span> % (i+<span class="number">1</span>))</span><br><span class="line">        data = datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>, j, data[j])  <span class="comment"># 数据</span></span><br><span class="line"></span><br><span class="line">    book.save(savepath)  <span class="comment"># 保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData2DB</span>(<span class="params">datalist, dbpath</span>):</span></span><br><span class="line">    init_db(dbpath)</span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datalist:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">4</span> <span class="keyword">or</span> index == <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            data[index] = <span class="string">&#x27;&quot;&#x27;</span>+data[index]+<span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                insert into movie250 (</span></span><br><span class="line"><span class="string">                info_link,pic_link,cname,ename,score,rated,instroduction,info) </span></span><br><span class="line"><span class="string">                values(%s)&#x27;&#x27;&#x27;</span> % <span class="string">&quot;,&quot;</span>.join(data)</span><br><span class="line">        print(sql)</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>(<span class="params">dbpath</span>):</span></span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        create table movie250 </span></span><br><span class="line"><span class="string">        (</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">        info_link text,</span></span><br><span class="line"><span class="string">        pic_link text,</span></span><br><span class="line"><span class="string">        cname varchar,</span></span><br><span class="line"><span class="string">        ename varchar,</span></span><br><span class="line"><span class="string">        score numeric ,</span></span><br><span class="line"><span class="string">        rated numeric ,</span></span><br><span class="line"><span class="string">        instroduction text,</span></span><br><span class="line"><span class="string">        info text</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>  <span class="comment"># 创建数据表</span></span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 当程序执行时</span></span><br><span class="line">    <span class="comment"># 调用函数</span></span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># init_db(&quot;movietest.db&quot;)</span></span><br><span class="line">    print(<span class="string">&quot;爬取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="6-CSDN"><a href="#6-CSDN" class="headerlink" title="6. CSDN"></a>6. CSDN</h1><h2 id="6-1-for-a-certain-passage"><a href="#6-1-for-a-certain-passage" class="headerlink" title="6.1 for a certain passage"></a>6.1 for a certain passage</h2><p>对于一个博主的确切的文章链接，可以使用以下代码爬取其中的文章内容，并保存为pdf格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-12 18:08</span></span><br><span class="line"><span class="comment">#@Author : chasing</span></span><br><span class="line"><span class="comment">#@File : csdn.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line">BaseUrl=<span class="string">&#x27;https://blog.csdn.net/justidle/article/details/106850487&#x27;</span></span><br><span class="line">cmp=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;meta name=&quot;keywords&quot; content=&quot;(.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36 Edg/86.0.622.38&#x27;</span>&#125;</span><br><span class="line">response = requests.get(BaseUrl, headers=headers)</span><br><span class="line">print(<span class="string">&quot;响应体：&quot;</span>+response.text)</span><br><span class="line">Title=re.findall(cmp,response.text)</span><br><span class="line">FileUrl=<span class="string">&#x27;D:\\desktop\\&#x27;</span>+<span class="string">&#x27; &#x27;</span>.join(Title)+<span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">print(<span class="string">&quot;期望保存位置：&quot;</span>+FileUrl)</span><br><span class="line">Html1=<span class="string">r&#x27;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&#x27;</span></span><br><span class="line">Html2=<span class="string">r&#x27;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#123;content&#125;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">html=Html1+<span class="string">&#x27; &#x27;</span>.join(Title)+Html2</span><br><span class="line">selector = parsel.Selector(response.text)</span><br><span class="line">article = selector.css(<span class="string">&#x27;article&#x27;</span>).get()</span><br><span class="line">print(<span class="string">&quot;文章本体：&quot;</span>+article)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.html&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html.<span class="built_in">format</span>(content=article))</span><br><span class="line">config = pdfkit.configuration(wkhtmltopdf=<span class="string">&#x27;E:\\wkhtmltopdf\\bin\\wkhtmltopdf.exe&#x27;</span>)</span><br><span class="line">pdfkit.from_file(<span class="string">&quot;1.html&quot;</span>,FileUrl,configuration=config)</span><br><span class="line">print(<span class="string">&quot;文件保存成功，保存文件的路径为：&quot;</span>+FileUrl)</span><br><span class="line">print(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-2-All-passages"><a href="#6-2-All-passages" class="headerlink" title="6.2 All passages"></a>6.2 All passages</h2><p>对于博主的全部文章，可以使用以下方法，获取其所有文章的链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-12 20:09</span></span><br><span class="line"><span class="comment">#@Author : chasing</span></span><br><span class="line"><span class="comment">#@File : Release.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入相应的模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># Pages=askPages(BaseUrl)</span></span><br><span class="line">    <span class="comment"># print(Pages)</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    askUrl(baseUrl, i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">100</span>,<span class="number">1</span>):</span><br><span class="line">        tempUrl = baseUrl+<span class="built_in">str</span>(i)</span><br><span class="line">        askUrl(tempUrl, i)</span><br><span class="line">    Response()</span><br><span class="line"></span><br><span class="line">findChinese=re.<span class="built_in">compile</span>(<span class="string">r&#x27;[\u4e00-\u9fa5]+&#x27;</span>,re.S)<span class="comment">#pdfkit不能能保存含有特殊符号名称的文件</span></span><br><span class="line">findBranch=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot; target=&quot;_blank&quot;&gt;&#x27;</span>)</span><br><span class="line">findFile=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;meta name=&quot;keywords&quot; content=&quot;(.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line"><span class="comment"># findPages=re.compile(r&#x27;&lt;li data-page=&quot;(\d+)&quot; class=&quot;ui-pager&quot;&gt;.*?&lt;/li&gt;&#x27;,re.S)</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36 Edg/86.0.622.38&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">baseUrl=<span class="string">&#x27;https://blog.csdn.net/qq_27133869&#x27;</span></span><br><span class="line"><span class="comment"># 页面数量为动态</span></span><br><span class="line"><span class="comment"># def askPages(BaseUrl):#js</span></span><br><span class="line"><span class="comment">#     response = requests.get(BaseUrl, headers=headers)</span></span><br><span class="line"><span class="comment">#     print(response.text)</span></span><br><span class="line"><span class="comment">#     Pages = re.findall(FindPages, response.text)</span></span><br><span class="line"><span class="comment">#     return Pages</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askUrl</span>(<span class="params">baseUrl,i</span>):</span></span><br><span class="line">    baseResponse = requests.get(baseUrl, headers=headers)</span><br><span class="line">    <span class="comment"># print(baseResponse.text)</span></span><br><span class="line">    branchUrls=re.findall(findBranch,baseResponse.text)</span><br><span class="line">    <span class="keyword">assert</span> branchUrls</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        branchUrls.pop()<span class="comment">#删除帮助文档</span></span><br><span class="line">    <span class="keyword">assert</span> branchUrls<span class="comment">#为空直接跳出，节省资源</span></span><br><span class="line">    <span class="comment"># print(branchUrls)</span></span><br><span class="line">    times=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> BranchUrl <span class="keyword">in</span> branchUrls:</span><br><span class="line">        branchResponse = requests.get(BranchUrl, headers=headers)</span><br><span class="line">        <span class="comment">#保存的文件名</span></span><br><span class="line">        tempTitle = <span class="string">&#x27;&#x27;</span>.join(re.findall(findFile, branchResponse.text))</span><br><span class="line">        print(tempTitle)</span><br><span class="line">        print(re.findall(findChinese, tempTitle))</span><br><span class="line">        finalTitle = <span class="string">&quot; &quot;</span>.join(re.findall(findChinese, tempTitle))</span><br><span class="line">        print(<span class="string">&quot;第 %d 面的 %d 篇文章名为:&quot;</span> %(i, times)+<span class="built_in">str</span>(finalTitle)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="comment">#最终网页源代码</span></span><br><span class="line">        finalHtml =<span class="string">r&#x27;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&#x27;</span> + <span class="string">&#x27; &#x27;</span>.join(finalTitle) + <span class="string">r&#x27;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#123;content&#125;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">        <span class="comment">#pdf文件的保存位置</span></span><br><span class="line">        fileUrl = <span class="string">&#x27;D:\\desktop\\CSDN\\littlePING\\&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(finalTitle) + <span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;第 %d 面的 %d 篇文章保存路径为:&quot;</span> %(i, times) + <span class="built_in">str</span>(fileUrl) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        selector = parsel.Selector(branchResponse.text)</span><br><span class="line">        article = selector.css(<span class="string">&#x27;article&#x27;</span>).get()</span><br><span class="line">        <span class="comment">#文件保存的位置</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;temp.html&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(finalHtml.<span class="built_in">format</span>(content=article))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            config = pdfkit.configuration(wkhtmltopdf=<span class="string">&#x27;E:\\wkhtmltopdf\\bin\\wkhtmltopdf.exe&#x27;</span>)</span><br><span class="line">            <span class="comment"># config = pdfkit.configuration(wkhtmltopdf=path_wk)</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;temp.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                pdfkit.from_file(f, fileUrl, configuration=config)</span><br><span class="line">            print(<span class="string">&quot;第 %d 面的 %d 篇文章pdf文件保存成功！&quot;</span> % (i, times)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&quot;第 %d 面的 %d 篇文章pdf文件保存失败！&quot;</span> % (i, times)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># continue</span></span><br><span class="line">        times+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;页面 %d 中的所有文件保存成功&quot;</span>%i+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Response</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 当程序执行时</span></span><br><span class="line">    <span class="comment"># 调用函数</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网页爬虫项目实战经验&quot;&gt;&lt;a href=&quot;#网页爬虫项目实战经验&quot; class=&quot;headerlink&quot; title=&quot;网页爬虫项目实战经验&quot;&gt;&lt;/a&gt;网页爬虫项目实战经验&lt;/h1&gt;&lt;p&gt;此篇记录了网页爬虫的基本使用库，以及常用的正则表达式操作等。&lt;br&gt;同时给出</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="网页爬虫" scheme="http://example.com/tags/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python基础笔记</title>
    <link href="http://example.com/2020/10/06/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/06/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-06T07:53:09.000Z</published>
    <updated>2020-10-28T11:57:24.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章——基础知识"><a href="#第一章——基础知识" class="headerlink" title="第一章——基础知识"></a>第一章——基础知识</h1><h2 id="1、模块的引入"><a href="#1、模块的引入" class="headerlink" title="1、模块的引入"></a>1、模块的引入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#demo：</span></span><br><span class="line"><span class="comment"># 随机数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入import 模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"></span><br><span class="line">a=random.randint(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#a最终被赋值为1，2，3，4，5之间的随机一个数，左闭右闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里包括1和5！</span></span><br></pre></td></tr></table></figure><h2 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#type() 获取信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">a=<span class="string">&#x27;520.0&#x27;</span></span><br><span class="line">b=<span class="built_in">float</span>(a)</span><br><span class="line"><span class="built_in">type</span>(a)<span class="comment">#输出&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(b)<span class="comment">#输出&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#函数isinstance(var,class)</span></span><br><span class="line"><span class="comment">#对比前后类型</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">10</span>,<span class="built_in">int</span>)<span class="comment">#输出True</span></span><br></pre></td></tr></table></figure><hr><p><em>强制类型转换</em></p><ul><li><p>不同于C/C++的(int)a和(double)b</p></li><li><p>py中的强制类型转换的括号框住表达式</p></li><li><p>改为 int(a)和float(b)</p></li></ul><h2 id="3、符号运算"><a href="#3、符号运算" class="headerlink" title="3、符号运算"></a>3、符号运算</h2><table><thead><tr><th align="center">+</th><th align="left">加</th></tr></thead><tbody><tr><td align="center">-</td><td align="left">减</td></tr><tr><td align="center">*</td><td align="left">乘</td></tr><tr><td align="center">/</td><td align="left">除，会自动转换为浮点类型，与C/C++不同</td></tr><tr><td align="center">%</td><td align="left">取余</td></tr><tr><td align="center">**</td><td align="left">幂运算，等同于计算器中的^，结果为浮点型或整形，根据结果而定</td></tr><tr><td align="center">//</td><td align="left">带余除法，就算是浮点型运算也会保留整数部分，例如3.0//2=1.0</td></tr></tbody></table><h2 id="4、逻辑运算"><a href="#4、逻辑运算" class="headerlink" title="4、逻辑运算"></a>4、逻辑运算</h2><table><thead><tr><th>and</th><th>与</th></tr></thead><tbody><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table><p><em>三目运算符</em></p><ul><li>a= 语句1 if 条件 else 语句2</li></ul><p>例如: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=x <span class="keyword">if</span> x&lt;y <span class="keyword">else</span> y</span><br><span class="line"><span class="comment">#a赋值为x,y中小的那个</span></span><br></pre></td></tr></table></figure><h2 id="5、其余函数"><a href="#5、其余函数" class="headerlink" title="5、其余函数"></a>5、其余函数</h2><p>assert: 同C/C++的asset(断言)</p><blockquote><ul><li>同C/C++一样</li><li>assert 1&gt;2</li><li>结果为False，程序直接终止</li></ul></blockquote><h1 id="第二章——循环"><a href="#第二章——循环" class="headerlink" title="第二章——循环"></a>第二章——循环</h1><h2 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for循环</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;chasing&quot;</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#5表示结束，[0,5)，左闭右开</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;&quot;</span>)<span class="comment">#end=&quot;&quot;表示不换行，在循环结束以后不执行任何操作</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出01234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#从1到10，[1,10)，但是不会包括10，左闭右开</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出123456789</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):<span class="comment">#for(int i=0;i&lt;100;i+=10)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#从1到100，每次i增加10，但是不会包括100，直到100跳出循环，左闭右开</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;，&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出0，10，20，30，40，50，60，70，80，90，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line"></span><br><span class="line">  <span class="comment">#遍历字符串</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出chasing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#遍历每一个列表</span></span><br><span class="line"></span><br><span class="line">  print(a[i], end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出aa,bb,cc,dd,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、while循环"><a href="#2、while循环" class="headerlink" title="2、while循环"></a>2、while循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#while循环</span></span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count&lt;<span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">  print(count,<span class="string">&quot;小于5&quot;</span>)</span><br><span class="line"></span><br><span class="line">  count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> count&gt;<span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#只要进入while循环，正常出来，或者没有进入while循环，则else写不写都一样</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#触发else 的唯一情况就是while里面有break且被执行，for同理</span></span><br><span class="line"></span><br><span class="line">  print(count,<span class="string">&quot;大于或等于5&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、break和continue"><a href="#3、break和continue" class="headerlink" title="3、break和continue"></a>3、break和continue</h2><table><thead><tr><th>break</th><th>跳出循环</th></tr></thead><tbody><tr><td>continue</td><td>跳过当前循环</td></tr><tr><td>pass</td><td>占位语句，相当于C/C++的;（空语句）， 不做任何事情</td></tr></tbody></table><blockquote><p>样例1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出2019到2100第一个闰年</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2019</span>,<span class="number">2100</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">and</span> (i%<span class="number">100</span>!=<span class="number">0</span>) <span class="keyword">or</span> (i%<span class="number">400</span>==<span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;2019-2100第一个闰年是%d&quot;</span>%i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2019-2100第一个闰年是2020</span></span><br></pre></td></tr></table></figure><blockquote><p>样例2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#打印99乘法表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%d*%d=%d&quot;</span>%(i,j,i*j),end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">  print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章——字符串"><a href="#第三章——字符串" class="headerlink" title="第三章——字符串"></a>第三章——字符串</h1><p>注意，python3默认是utf-8编码。字符串都是unicode字符串。</p><p>字符串可以使用单引号，双引号，三引号（三个单引号，三个双引号）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">word=<span class="string">&#x27;zifu&#x27;</span></span><br><span class="line">sentence =<span class="string">&quot;juzi&quot;</span></span><br><span class="line">paragraph=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  duan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  luo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#&quot;&quot;&quot;  &quot;&quot;&quot;保存原始的所有格式</span></span><br><span class="line"></span><br><span class="line">print(word)</span><br><span class="line"></span><br><span class="line">print(sentence)</span><br><span class="line"></span><br><span class="line">print(paragraph)</span><br></pre></td></tr></table></figure><p>双引号””里面没有转义字符，但是可以使用 ‘，即str=”I’m a boy”，这里的’m不会报错</p><p>而使用单引号，则需要str =’I\‘m a boy’</p><h2 id="1、截取、切片"><a href="#1、截取、切片" class="headerlink" title="1、截取、切片"></a>1、截取、切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">my_str=<span class="string">&quot;shu_chasing&quot;</span></span><br><span class="line"></span><br><span class="line">print(my_str)</span><br><span class="line"></span><br><span class="line">print(my_str[<span class="number">0</span>:<span class="number">3</span>])<span class="comment">#输出shu</span></span><br><span class="line"></span><br><span class="line">print(my_str[<span class="number">1</span>:<span class="number">11</span>:<span class="number">2</span>])<span class="comment">#输出h_hsn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[起始位置:结束位置:步进值]，这里也是不包括11在内</span></span><br><span class="line"></span><br><span class="line">print(my_str[<span class="number">6</span>:])<span class="comment">#输出从第6个到结尾，即asing，这里不包括第6个</span></span><br><span class="line"></span><br><span class="line">print(my_str[:<span class="number">6</span>])<span class="comment">#输出从第一个到第6个，即shu_ch</span></span><br><span class="line"></span><br><span class="line">print(my_str+<span class="string">&quot;,nihao&quot;</span>)<span class="comment">#输出shu_chasing,nihao</span></span><br><span class="line"></span><br><span class="line">print(my_str*<span class="number">3</span>)<span class="comment">#输出shu_chasingshu_chasingshu_chasing</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、转义字符"><a href="#2、转义字符" class="headerlink" title="2、转义字符"></a>2、转义字符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用、实现转义字符的功能</span></span><br><span class="line"></span><br><span class="line">mystring=<span class="string">r&#x27;c:\now&#x27;</span></span><br><span class="line"></span><br><span class="line">print(mystring)</span><br><span class="line"><span class="comment">#输出就是c:\now，去掉前面的r则会出现换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在字符串前面加上r表示原始字符串，不会翻译转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串不能以\结尾</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、字符串常用函数"><a href="#3、字符串常用函数" class="headerlink" title="3、字符串常用函数"></a>3、字符串常用函数</h2><h3 id="1-大写转小写casefold"><a href="#1-大写转小写casefold" class="headerlink" title="1.大写转小写casefold"></a>1.大写转小写casefold</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;SHU_chasing&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.casefold()</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#shu_chasing</span></span><br></pre></td></tr></table></figure><h3 id="2-第一个转大写capitalize"><a href="#2-第一个转大写capitalize" class="headerlink" title="2.第一个转大写capitalize"></a>2.第一个转大写capitalize</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;shu_chasing&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.casefold()</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#Shu_chasing</span></span><br></pre></td></tr></table></figure><h3 id="3-查找find"><a href="#3-查找find" class="headerlink" title="3.查找find"></a>3.查找find</h3><blockquote><p>函数原型find(sub[,start[,end]])<br>可以选择范围<br>也可以不写范围搜索全部</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;shu_chasing&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.find(<span class="string">&#x27;s&#x27;</span>))   <span class="comment">#输出0</span></span><br><span class="line">print(<span class="built_in">str</span>.find(<span class="string">&#x27;s&#x27;</span>, <span class="number">3</span> ,<span class="number">10</span>))    <span class="comment">#7</span></span><br></pre></td></tr></table></figure><h3 id="4-统计数目count"><a href="#4-统计数目count" class="headerlink" title="4.统计数目count"></a>4.统计数目count</h3><blockquote><p>函数原型count(sub[,start[,end]])<br>可以选择范围<br>也可以不写范围搜索全部</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;shu_chasing&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.count(<span class="string">&#x27;s&#x27;</span>))   <span class="comment">#输出2</span></span><br><span class="line">print(<span class="built_in">str</span>.count(<span class="string">&#x27;s&#x27;</span>, <span class="number">3</span> ,<span class="number">10</span>))<span class="comment">#输出1</span></span><br></pre></td></tr></table></figure><h3 id="5-替换replace"><a href="#5-替换replace" class="headerlink" title="5.替换replace"></a>5.替换replace</h3><blockquote><p>函数原型replace(old, new[,count])<br>将old的字符串转换为指定的字符串</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;I love math&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.replace(<span class="string">&#x27;math&#x27;</span>,<span class="string">&#x27;programming&#x27;</span>)</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出I love programming</span></span><br></pre></td></tr></table></figure><h3 id="6-拆分split"><a href="#6-拆分split" class="headerlink" title="6.拆分split"></a>6.拆分split</h3><p>split(sep=None, maxsplit=-1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;D:\software\python&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.split(sep=<span class="string">&#x27;\\&#x27;</span>)<span class="comment">#注意这里是两个\\</span></span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出[&#x27;D:&#x27;, &#x27;software&#x27;, &#x27;python&#x27;]，转为列表类型</span></span><br></pre></td></tr></table></figure><h3 id="7-拼接join"><a href="#7-拼接join" class="headerlink" title="7.拼接join"></a>7.拼接join</h3><blockquote><p>不能写成str.join(‘\‘)<br>join被指定为字符串其中的一个用法<br>join的参数支持一切可以迭代的对象（列表，元组，字典，文件，集合，生成器）<br>推荐使用join替代加号拼接<br>+会频繁进行内存复制和触发垃圾回收机制</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=[<span class="string">&#x27;D:&#x27;</span>, <span class="string">&#x27;software&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;\\&#x27;</span>.join(<span class="built_in">str</span>)<span class="comment">#转义字符</span></span><br><span class="line">print(<span class="built_in">str</span>)              <span class="comment">#D:\software\python</span></span><br><span class="line"><span class="built_in">str</span>=[<span class="string">&#x27;D:&#x27;</span>, <span class="string">&#x27;software&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>)</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出D:softwarepython</span></span><br></pre></td></tr></table></figure><h1 id="第四章——列表list"><a href="#第四章——列表list" class="headerlink" title="第四章——列表list[ ]"></a>第四章——列表list[ ]</h1><blockquote><ul><li>1.非常类似于数组</li></ul></blockquote><blockquote><ul><li>2.可以同时使用字符串，整形，浮点型等等</li></ul></blockquote><blockquote><ul><li>3.可以为负数下标</li></ul></blockquote><blockquote><ul><li>4.可以嵌套，类似二维数组</li></ul></blockquote><h2 id="1、遍历列表"><a href="#1、遍历列表" class="headerlink" title="1、遍历列表"></a>1、遍历列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#namelist=[] #定义空列表</span></span><br><span class="line"></span><br><span class="line">namelist=[<span class="string">&quot;xiaozhang&quot;</span>,<span class="string">&quot;2.3&quot;</span>,<span class="string">&quot;10&quot;</span>]<span class="comment">#可以为不同类型的变量，储存混合类型</span></span><br><span class="line"></span><br><span class="line">print(namelist[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">print(namelist[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(namelist[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">  print(namelist[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">-2</span>,<span class="number">0</span>):<span class="comment">#输出最后两个元素</span></span><br><span class="line"></span><br><span class="line">  print(namelist[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> namelist:</span><br><span class="line"></span><br><span class="line">  print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(namelist))<span class="comment">#输出长度</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(namelist):</span><br><span class="line"></span><br><span class="line">  print(namelist[i])</span><br><span class="line"></span><br><span class="line">  i+=<span class="number">1</span><span class="comment">#不能写i++</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、数据操作"><a href="#2、数据操作" class="headerlink" title="2、数据操作"></a>2、数据操作</h2><h3 id="1-append增加"><a href="#1-append增加" class="headerlink" title="1. append增加"></a>1. append增加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">namelist=[<span class="string">&quot;xiaozhang&quot;</span>,<span class="string">&quot;2.3&quot;</span>,<span class="string">&quot;10&quot;</span>]<span class="comment">#可以为不同类型的变量，储存混合类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> namelist:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line"></span><br><span class="line">nametemp=<span class="built_in">input</span>(<span class="string">&quot;请输入添加的数据&quot;</span>)</span><br><span class="line">namelist.append(nametemp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> namelist:</span><br><span class="line"></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果多了append的内容[&quot;xiaozhang&quot;,&quot;2.3&quot;,&quot;10&quot;, ____]</span></span><br></pre></td></tr></table></figure><blockquote><p>#特别的，使用乘法<br>a=[1]<br>   a=a*3<br>#最后a就是[1, 1, 1]</p></blockquote><h3 id="2-append和extend区别"><a href="#2-append和extend区别" class="headerlink" title="2. append和extend区别"></a>2. append和extend区别</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#append和extend的区别</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">a.append(b)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果为[1,2,[3,4]]，将一个列表作为整个整体，加入列表中</span></span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果为[1,2,[3,4],3,4]，将b列表中的每一个，逐一加入列表中</span></span><br></pre></td></tr></table></figure><h3 id="3-insert用法"><a href="#3-insert用法" class="headerlink" title="3. insert用法"></a>3. insert用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#insert用法</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">1</span>,<span class="number">200</span>)<span class="comment">#第一个表示下标，第二个表示元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为0,200,1,2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-del删除"><a href="#4-del删除" class="headerlink" title="4. del删除"></a>4. del删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#del删除</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>]<span class="comment">#可以出现重复数据</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]<span class="comment">#删除指定下标的元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为[0, 10, 30, 10, 40, 50]</span></span><br><span class="line"></span><br><span class="line">a.pop()<span class="comment">#弹出末尾最后一个元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为[0, 10, 30, 10, 40]</span></span><br><span class="line"></span><br><span class="line">a.remove(<span class="number">10</span>)<span class="comment">#删除第一个值为10的元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为[0, 30, 10, 40]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#[]修改</span></span><br><span class="line"></span><br><span class="line">b=[<span class="string">&quot;chasing&quot;</span>]</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>]=<span class="string">&quot;shu_chasing&quot;</span><span class="comment">#直接修改就可以了</span></span><br></pre></td></tr></table></figure><h3 id="5-index查找与count计数"><a href="#5-index查找与count计数" class="headerlink" title="5. index查找与count计数"></a>5. index查找与count计数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">findname=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入想找的元素&quot;</span>))<span class="comment">#记得修改为整数型</span></span><br><span class="line"><span class="keyword">if</span> findname <span class="keyword">in</span> a:</span><br><span class="line">  print(<span class="string">&quot;找到了一样的元素&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">&quot;没有找到相同的元素&quot;</span>)</span><br><span class="line"><span class="comment">#index查找</span></span><br><span class="line">a=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">print(a.index(<span class="number">10</span>,<span class="number">1</span>,<span class="number">4</span>))<span class="comment">#返回下标1，在1-3范围内查找元素10，这个范围左闭右开——[1,4)</span></span><br><span class="line">print(a.index(<span class="number">10</span>,<span class="number">1</span>,<span class="number">7</span>))<span class="comment">#返回第一个出现的下标1，在1-6范围内查找元素10，这个范围左闭右开——[1,7)</span></span><br><span class="line"><span class="comment">#count计数</span></span><br><span class="line">print(a.count(<span class="number">10</span>))<span class="comment">#统计查找的元素出现了几次</span></span><br></pre></td></tr></table></figure><blockquote><p>list.index(item)        #从头到尾找</p><p>list.index(item, start, end)    #在开始和结束之间找</p></blockquote><h3 id="6-reverse反转和sort排序"><a href="#6-reverse反转和sort排序" class="headerlink" title="6.reverse反转和sort排序"></a>6.reverse反转和sort排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#反转和排序</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[1, 4, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[3, 2, 4, 1]</span></span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[4, 3, 2, 1]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、列表的嵌套"><a href="#3、列表的嵌套" class="headerlink" title="3、列表的嵌套"></a>3、列表的嵌套</h2><blockquote><p>类似于二维数组</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a=[[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">40</span>,<span class="number">50</span>],[<span class="number">30</span>,<span class="number">60</span>,<span class="number">70</span>]]</span><br><span class="line">print(a[<span class="number">0</span>])<span class="comment">#输出[10, 20]</span></span><br><span class="line">print(a[<span class="number">1</span>][<span class="number">0</span>])<span class="comment">#输出40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">offices=[[],[],[]]</span><br><span class="line">names=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    index= random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[index].append(name)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> office <span class="keyword">in</span> offices:</span><br><span class="line">    print(<span class="string">&quot;办公室%d的人数是：%d&quot;</span>%(i,<span class="built_in">len</span>(office)))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> office:</span><br><span class="line">        print(<span class="string">&quot;%s&quot;</span>%name,end=<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;n&quot;</span>)</span><br><span class="line"><span class="comment">#以下是随机结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#办公室1的人数是：0</span></span><br><span class="line"><span class="comment">#办公室2的人数是：2</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="comment">#办公室3的人数是：3</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><blockquote><p>sort默认是归并排序<br>实际上, sort有三个参数<br>sort(func, key, reverse)</p></blockquote><h1 id="第五章——元组tuple"><a href="#第五章——元组tuple" class="headerlink" title="第五章——元组tuple( )"></a>第五章——元组tuple( )</h1><h2 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h2><blockquote><p>tuple(元组)</p><ul><li>与list类似，不同处在于tuple不能修改元素，</li><li>写在小括号里，元素之间用逗号隔开</li><li>元素不可变，但是包含可变对象</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t1=(<span class="number">2.33</span>,<span class="string">&#x27;abcd&#x27;</span>,<span class="number">786</span>,)</span><br><span class="line">t2=(<span class="number">1</span>,)</span><br><span class="line">t3=(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="number">2.3</span>])</span><br><span class="line">print(t1)<span class="comment">#(2.33, &#x27;abcd&#x27;, 786)</span></span><br><span class="line">print(t2)<span class="comment">#(1,)</span></span><br><span class="line">print(t3[<span class="number">2</span>][<span class="number">1</span>]) <span class="comment">#2.3</span></span><br></pre></td></tr></table></figure><p>如果创建空的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tup1=()<span class="comment">#空的元组</span></span><br><span class="line">tup2=(<span class="number">50</span>)<span class="comment">#整形</span></span><br><span class="line">tup3=(<span class="number">100</span>,)<span class="comment">#含有一个元素的元组，如果只有一个，则需要加逗号,在这里也可以写tup3=100,</span></span><br><span class="line"><span class="comment">#可以不需要小括号，但是一定要逗号</span></span><br><span class="line">tup4=(<span class="number">150</span>,<span class="number">200</span>)<span class="comment">#含有多个元素的元组</span></span><br><span class="line">print(<span class="built_in">type</span>(tup1))</span><br><span class="line">print(tup2)</span><br><span class="line">print(<span class="built_in">type</span>(tup2))</span><br><span class="line">print(tup3)</span><br><span class="line">print(<span class="built_in">type</span>(tup3))</span><br><span class="line">print(tup4)</span><br><span class="line">print(<span class="built_in">type</span>(tup4))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#50</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;int&#x27;&gt;，这里不加，就是整形</span></span><br><span class="line"><span class="comment">#(100,)</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#(150, 200)</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、遍历与切片"><a href="#2、遍历与切片" class="headerlink" title="2、遍历与切片"></a>2、遍历与切片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tup1=(<span class="string">&quot;abc&quot;</span>,<span class="number">10</span>,<span class="number">23.4</span>)</span><br><span class="line"></span><br><span class="line">print(tup1)<span class="comment">#输出(&#x27;abc&#x27;, 10, 23.4)</span></span><br><span class="line"></span><br><span class="line">print(tup1[<span class="number">-1</span>])<span class="comment">#输出23.4</span></span><br><span class="line"></span><br><span class="line">print(tup1[<span class="number">0</span>:<span class="number">2</span>])<span class="comment"># 输出(&#x27;abc&#x27;, 10)，这里只有[0,2)，即[0,1]，左闭右开</span></span><br></pre></td></tr></table></figure><h2 id="3、增加"><a href="#3、增加" class="headerlink" title="3、增加"></a>3、增加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tup1=(<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line"><span class="comment">#tup[1]=100</span></span><br><span class="line"><span class="comment">#报错，不能修改tup的值，&#x27;tuple&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure><ul><li>不能“新增”</li><li>只能设置新的变量</li><li>分配新的空间<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup1=(<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line">tup2=(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">tup3=tup1+tup2</span><br><span class="line">print(tup3)<span class="comment">#(12, 34, 56, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、删除"><a href="#4、删除" class="headerlink" title="4、删除"></a>4、删除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tup1=(<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line">print(<span class="string">&quot;删除前&quot;</span>)</span><br><span class="line">print(tup1)</span><br><span class="line"><span class="keyword">del</span> tup1<span class="comment">#删除了整个元组变量，可以完成，以后不能访问tup1</span></span><br><span class="line"><span class="comment">#print(&quot;删除后&quot;)</span></span><br><span class="line"><span class="comment">#print(tup1)</span></span><br><span class="line"><span class="comment">#报错，不能访问tup1的内容，name &#x27;tup1&#x27; is not defined</span></span><br><span class="line"><span class="comment">#del tup[1]</span></span><br><span class="line"><span class="comment">#报错，不能删除某一个下标，&#x27;tuple&#x27; object doesn&#x27;t support item deletion</span></span><br></pre></td></tr></table></figure><h2 id="5、基本操作"><a href="#5、基本操作" class="headerlink" title="5、基本操作"></a>5、基本操作</h2><table><thead><tr><th>操作名称</th><th>操作方法</th><th>举例</th></tr></thead><tbody><tr><td>元素成员关系</td><td>in</td><td>2 in list1</td></tr><tr><td>得到重复元素数量</td><td>count</td><td>tup1.count(1)</td></tr></tbody></table><table><thead><tr><th>操作名称</th><th>操作方法</th><th>举例</th></tr></thead><tbody><tr><td>访问元组中的元素</td><td>通过下标直接访问</td><td>print(tup[10])</td></tr><tr><td>遍历元组</td><td>通过for循环</td><td>for i in tup:    print(i)</td></tr><tr><td>元组的切片</td><td>使用[ :  : ]</td><td>tup[2:10:1]，[::-1]表示倒序</td></tr><tr><td>元组的加法操作</td><td>+</td><td>tup3=tup1+tup2</td></tr></tbody></table><h2 id="6、基本函数"><a href="#6、基本函数" class="headerlink" title="6、基本函数"></a>6、基本函数</h2><table><thead><tr><th>函数名称</th><th>操作方法</th><th>备注</th></tr></thead><tbody><tr><td>获取数组长度</td><td>len()</td><td>len(tup)-1就是最后一个元素的下标</td></tr><tr><td>获取元组元素最大值</td><td>max()</td><td></td></tr><tr><td>获取元组元素最小值</td><td>min()</td><td></td></tr><tr><td>强制类型转换</td><td>tuple()</td><td></td></tr><tr><td>获取随机元素</td><td>choice()</td><td>加上import random 模块</td></tr></tbody></table><h2 id="7、字符串操作"><a href="#7、字符串操作" class="headerlink" title="7、字符串操作"></a>7、字符串操作</h2><blockquote><p>*同元组一样，字符串也是不能被修改的<br>如果必须修改，则需要使用切片和拼接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;cgasing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>[:<span class="number">1</span>]+<span class="string">&quot;h&quot;</span>+<span class="built_in">str</span>[<span class="number">2</span>:]<span class="comment">#修改第二个</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出chasing</span></span><br></pre></td></tr></table></figure><h1 id="第六章——序列"><a href="#第六章——序列" class="headerlink" title="第六章——序列"></a>第六章——序列</h1><h2 id="1、总结"><a href="#1、总结" class="headerlink" title="1、总结"></a>1、总结</h2><p>列表、元组、字符串的共同点</p><blockquote><p>可以通过索引得到每一个元素<br>默认索引从0开始<br>可以切片得到范围内的集合<br>有共同操作符（重复、拼接、成员）<br><em>以上统称为——序列</em></p></blockquote><h2 id="2、操作函数"><a href="#2、操作函数" class="headerlink" title="2、操作函数"></a>2、操作函数</h2><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>list([iterable])</td><td>强制将可迭代对象转换为列表</td><td>a=list((1,2,3))</td></tr><tr><td>tuple([iterable])</td><td>强制将可迭代对象转换为元组</td><td>a=tuple((1,2,3))</td></tr><tr><td>str(obj)</td><td>强制将对象转换为字符串</td><td>a=str(10)</td></tr><tr><td>len(sub)</td><td>返回sub参数长度</td><td>len(str1)</td></tr><tr><td>max()</td><td>返回参数集合最大值</td><td>max(list)</td></tr><tr><td>min()</td><td>返回参数集合最小值（保证数据类型统一）</td><td>min(list)</td></tr><tr><td>sum(iterable[, start])</td><td>返回所有元素值的总和</td><td>sum(list,5)</td></tr><tr><td>sorted(iterable,key=None,reverse=False)</td><td>返回排序后的列表</td><td>sorted(list)</td></tr><tr><td>reversed(sequence)</td><td>返回逆向迭代序列的结果</td><td>reversed(list)</td></tr><tr><td>enumerate(iterable)</td><td>生成一个二元组构成的一个迭代对象</td><td>见下文</td></tr><tr><td>zip(iter1[,iter2[…]])</td><td>返回各个可迭代参数共同组成的元组</td><td>见下文</td></tr></tbody></table><p>enumerate用法，可以单独理解为枚举</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#enumerate</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;chasing&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">str</span>):</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">str</span>):</span><br><span class="line">print(i,j)</span><br><span class="line"><span class="comment">#(0, &#x27;c&#x27;)</span></span><br><span class="line"><span class="comment">#(1, &#x27;h&#x27;)</span></span><br><span class="line"><span class="comment">#(2, &#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">#(3, &#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">#(4, &#x27;i&#x27;)</span></span><br><span class="line"><span class="comment">#(5, &#x27;n&#x27;)</span></span><br><span class="line"><span class="comment">#(6, &#x27;g&#x27;)</span></span><br><span class="line"><span class="comment"># 0 c</span></span><br><span class="line"><span class="comment"># 1 h</span></span><br><span class="line"><span class="comment"># 2 a</span></span><br><span class="line"><span class="comment"># 3 s</span></span><br><span class="line"><span class="comment"># 4 i</span></span><br><span class="line"><span class="comment"># 5 n</span></span><br><span class="line"><span class="comment"># 6 g</span></span><br></pre></td></tr></table></figure><p>zip用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">str1=<span class="string">&quot;chasing&quot;</span></span><br><span class="line">turple1=(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(list1, str1, turple1):</span><br><span class="line">print(i)</span><br><span class="line"><span class="comment">#(1, &#x27;c&#x27;, 2)</span></span><br><span class="line"><span class="comment">#(7, &#x27;h&#x27;, 4)</span></span><br><span class="line"><span class="comment">#(3, &#x27;a&#x27;, 6)</span></span><br><span class="line"><span class="comment">#(5, &#x27;s&#x27;, 8)</span></span><br><span class="line"><span class="comment">#(6, &#x27;i&#x27;, 10)</span></span><br></pre></td></tr></table></figure><h1 id="第七章——字典"><a href="#第七章——字典" class="headerlink" title="第七章——字典 { }"></a>第七章——字典 { }</h1><h2 id="1、字典dict定义"><a href="#1、字典dict定义" class="headerlink" title="1、字典dict定义"></a>1、字典dict定义</h2><blockquote><p>字典，即散列表</p><p>是无序对象的集合，使用键-值(key-value)存储，具有极快的速度</p><p>查找，插入、删除都为O(1)复杂度</p><p>键(key)必须使用不可变类型<br>同一个字典的key是唯一的<br>类似于json的对象，C++的map，数据结构的红黑树，哈希表</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字典的定义</span></span><br><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">print(info[<span class="string">&quot;name&quot;</span>])<span class="comment">#输出chasing</span></span><br><span class="line">print(info[<span class="string">&quot;age&quot;</span>])<span class="comment">#输出18</span></span><br><span class="line"><span class="comment">#print(info[&quot;gender&quot;])</span></span><br><span class="line"><span class="comment">#错误，KeyError: &#x27;gender&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接访问</span></span><br><span class="line">print(info.get(<span class="string">&quot;gender&quot;</span>))</span><br><span class="line"><span class="comment">#输出None，没有找到默认返回None</span></span><br><span class="line">print(info.get(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;not found&quot;</span>))<span class="comment">#修改默认的值</span></span><br><span class="line"><span class="comment">#输出not found，没有找到返回not found</span></span><br></pre></td></tr></table></figure><h2 id="2、添加"><a href="#2、添加" class="headerlink" title="2、添加"></a>2、添加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">newID=<span class="built_in">input</span>(<span class="string">&quot;请输入新的学号：&quot;</span>)</span><br><span class="line">info[<span class="string">&quot;ID&quot;</span>]=newID</span><br><span class="line">print(info[<span class="string">&quot;ID&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;删除前：%s&quot;</span>%info[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="comment">#使用del info则删除整个字典</span></span><br><span class="line"><span class="comment">#print(&quot;删除后：%s&quot;%info[&quot;name&quot;])#删除后键值对后，再次访问就会报错</span></span><br><span class="line"><span class="comment">#报错KeyError &#x27;name&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4、清除"><a href="#4、清除" class="headerlink" title="4、清除"></a>4、清除</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;19&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;删除前：%s&quot;</span>%info)<span class="comment">#删除前：&#123;&#x27;name&#x27;: &#x27;chasing&#x27;, &#x27;age&#x27;: &#x27;18&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">info.clear()       <span class="comment">#只是清空</span></span><br><span class="line">print(<span class="string">&quot;删除后：%s&quot;</span>%info)<span class="comment">#删除后：&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5、修改"><a href="#5、修改" class="headerlink" title="5、修改"></a>5、修改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;19&quot;</span>&#125;</span><br><span class="line">info[<span class="string">&quot;age&quot;</span>]=<span class="number">20</span></span><br><span class="line">print(info[<span class="string">&quot;age&quot;</span>])<span class="comment">#输出20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、查找"><a href="#6、查找" class="headerlink" title="6、查找"></a>6、查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">19120397</span>&#125;</span><br><span class="line">print(info.keys())<span class="comment">#得到所有的键dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;id&#x27;])</span></span><br><span class="line">print(info.values()) <span class="comment">#得到所有的值dict_values([&#x27;chasing&#x27;, &#x27;18&#x27;, 19120397])</span></span><br><span class="line">print(info.items())<span class="comment">#得到所有的项dict_items([(&#x27;name&#x27;, &#x27;chasing&#x27;), (&#x27;age&#x27;, &#x27;18&#x27;), (&#x27;id&#x27;, 19120397)])</span></span><br><span class="line"><span class="comment">#每个键值对都是元组</span></span><br></pre></td></tr></table></figure><h2 id="7、遍历所有的键、值、项"><a href="#7、遍历所有的键、值、项" class="headerlink" title="7、遍历所有的键、值、项"></a>7、遍历所有的键、值、项</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">19120397</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.keys():</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.values():</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> info.iems():</span><br><span class="line">print(<span class="string">&quot;%s\t%s&quot;</span>%(i,j))</span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># age</span></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"><span class="comment"># chasing</span></span><br><span class="line"><span class="comment"># 18</span></span><br><span class="line"><span class="comment"># 19120397</span></span><br><span class="line"><span class="comment"># name    chasing</span></span><br><span class="line"><span class="comment"># age     18</span></span><br><span class="line"><span class="comment"># id      19120397</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第八章——集合"><a href="#第八章——集合" class="headerlink" title="第八章——集合 { }"></a>第八章——集合 { }</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><blockquote><p>set和dict类似，也是key的集合，但是不储存value<br>同C++一样，set不能存相同的元素，重复元素自动过滤<br>但是不同的是，set是无序的<br>操作方法与其他相同<br>for、update、add、remove、pop、clear、del等等</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s)<span class="comment">#输出&#123;1, 2, 3&#125;</span></span><br><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">print(s)<span class="comment">#输出&#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2、小结"><a href="#2、小结" class="headerlink" title="2、小结"></a>2、小结</h2><table><thead><tr><th></th><th>是否有序</th><th>是否可变类型</th></tr></thead><tbody><tr><td><strong>列表[]</strong></td><td>有序</td><td>可变类型</td></tr><tr><td>元组()</td><td>有序</td><td>不可变类型</td></tr><tr><td><strong>字典{}</strong></td><td>无序</td><td>key不可变，value可变</td></tr><tr><td>集合{}</td><td>无序</td><td>可变类型，不重复</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><h1 id="第九章——函数"><a href="#第九章——函数" class="headerlink" title="第九章——函数"></a>第九章——函数</h1><p>提高编码效率，减少重复</p><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><ol><li>定义方式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">code</span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure></li><li>demo：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printname</span>():</span></span><br><span class="line">print(<span class="string">&quot;chasing&quot;</span>)</span><br><span class="line">printname()<span class="comment">#输出chasing</span></span><br></pre></td></tr></table></figure><h2 id="2、带参数函数"><a href="#2、带参数函数" class="headerlink" title="2、带参数函数"></a>2、带参数函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">c=a+b</span><br><span class="line">print(c)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">#输出3</span></span><br></pre></td></tr></table></figure><h2 id="3、带返回值函数"><a href="#3、带返回值函数" class="headerlink" title="3、带返回值函数"></a>3、带返回值函数</h2><ol><li>返回单个值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">c=a+b</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">#输出3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>返回多个值<br> 和lua相同</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divid</span>(<span class="params">a,b</span>):</span></span><br><span class="line">shang=a//b</span><br><span class="line">yushu=a%b</span><br><span class="line"><span class="keyword">return</span> shang,yushu<span class="comment">#多个返回值用逗号分隔</span></span><br><span class="line">sh,yu=devid(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&quot;商：%d，余数：%d&quot;</span>%(sh,yu))<span class="comment">#输出商：2，余数：1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>局部变量和全局变量<br> &lt;1&gt;在函数内的作为局部变量<br> &lt;2&gt;在函数外定义的为全局变量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">a=<span class="number">10</span><span class="comment">#优先使用全局变量</span></span><br><span class="line">print(a)</span><br><span class="line">a=<span class="number">200</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">print(a)</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 200</span></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在函数中的使用全局变量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line"><span class="keyword">global</span> a=<span class="number">10</span><span class="comment">#添加global</span></span><br><span class="line">print(a)</span><br><span class="line">a=<span class="number">200</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">print(a)</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 200</span></span><br><span class="line"><span class="comment"># 200</span></span><br></pre></td></tr></table></figure><h1 id="第十章——拷贝"><a href="#第十章——拷贝" class="headerlink" title="第十章——拷贝"></a>第十章——拷贝</h1><h2 id="1、元组默认深拷贝"><a href="#1、元组默认深拷贝" class="headerlink" title="1、元组默认深拷贝"></a>1、元组默认深拷贝</h2><blockquote><p>直接赋值：其实就是对象的引用（别名）。<br>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。<br>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tuple2 = <span class="built_in">tuple</span>(tuple1)</span><br><span class="line">print(tuple2)</span><br><span class="line">print(<span class="string">&quot;tuple1==tuple2 ?&quot;</span>,tuple1==tuple2)</span><br><span class="line">print(<span class="string">&quot;tuple1 is tuple2 ?&quot;</span>,tuple1 <span class="keyword">is</span> tuple2)</span><br><span class="line"></span><br><span class="line">tuple3 = copy.copy(tuple1)</span><br><span class="line">print(tuple3)</span><br><span class="line">print(<span class="string">&quot;tuple1==tuple3 ?&quot;</span>,tuple1==tuple3)</span><br><span class="line">print(<span class="string">&quot;tuple1 is tuple3 ?&quot;</span>,tuple1 <span class="keyword">is</span> tuple3)</span><br><span class="line"></span><br><span class="line">tuple4 = tuple1[:]</span><br><span class="line">print(tuple4)</span><br><span class="line">print(<span class="string">&quot;tuple1==tuple4 ?&quot;</span>,tuple1==tuple4)</span><br><span class="line">print(<span class="string">&quot;tuple1 is tuple4 ?&quot;</span>,tuple1 <span class="keyword">is</span> tuple4)</span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#tuple1==tuple2 ? True</span></span><br><span class="line"><span class="comment">#tuple1 is tuple2 ? True</span></span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#tuple1==tuple3 ? True</span></span><br><span class="line"><span class="comment">#tuple1 is tuple3 ? True</span></span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#tuple1==tuple4 ? True</span></span><br><span class="line"><span class="comment">#tuple1 is tuple4 ? True</span></span><br></pre></td></tr></table></figure><h2 id="2、地址类型的传递"><a href="#2、地址类型的传递" class="headerlink" title="2、地址类型的传递"></a>2、地址类型的传递</h2><blockquote><p>Python中对象的赋值都是进行对象引用（内存地址）传递<br>使用copy.copy()，可以进行对象的浅拷贝，它复制了对象，但对于对象中的元素，依然使用原始的引用.<br>如果需要复制一个容器对象，以及它里面的所有元素（包含元素的子元素），可以使用copy.deepcopy()进行深拷贝<br>对于非容器类型（如数字、字符串、和其他’原子’类型的对象）没有被拷贝一说</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章——基础知识&quot;&gt;&lt;a href=&quot;#第一章——基础知识&quot; class=&quot;headerlink&quot; title=&quot;第一章——基础知识&quot;&gt;&lt;/a&gt;第一章——基础知识&lt;/h1&gt;&lt;h2 id=&quot;1、模块的引入&quot;&gt;&lt;a href=&quot;#1、模块的引入&quot; class=&quot;he</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="基础教程" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于WSL的Ubuntu子系统安装</title>
    <link href="http://example.com/2020/10/01/%E5%9F%BA%E4%BA%8EWSL%E7%9A%84Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2020/10/01/%E5%9F%BA%E4%BA%8EWSL%E7%9A%84Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2020-10-01T08:20:43.000Z</published>
    <updated>2020-10-28T13:33:48.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>主流的电脑主要运行着四大类系统，分别是微软的Windows、苹果的MacOS、Linux的发行版以及Unix类系统。<br>作为世界上使用量最多的windows系统，以图形界面的友好占据了大部分使用者。但是相对来说，由于Linux和Unix的开源，市面出现的众多基于Linux内核和Unix内核的发行版系统，其中Linux类系统数量最多、用户基数大，广泛使用于各行各业。</p><p>相对于Windows在桌面系统中的统治地位，Linux凭借着强大的命令工具，以及极其可靠的稳定性扎根于服务器端的应用。</p><p>正是因为Linux的强大命令，当今全球至少三分之二的服务器运行着Linux系统。</p><p>毋庸置疑，也因为Linux操作系统这种无可替代的特性，Windows系统也在最新的Windows10中引入了Linux子系统，简称WSL（Windows Subsystem for Linux）。</p><p>而对于一般人的电脑而言，使用Linux系统无外乎三种方法：</p><ol><li>使用虚拟机</li><li>使用双系统</li><li>只使用Linux系统</li></ol><p>但是以上方法都有对应的缺点：<br>虚拟机过于吃系统配置，运行速度也不是特别理想。双系统在每次切换时都需要重启系统，使用较为麻烦。<br>只使用Linux系统，则无法体验到Windows下多元的软件生态。</p><p>而WSL克服了以上所有缺点。</p><p>对于Win10中的Linux子系统，它并不是通过虚拟化技术实现的，所以它的性能高于虚拟机。<br>并且集成于windows系统中，免去了之前Linux、Windows双系统来回切换的麻烦。</p><p>这将是是目前较为完美的Linux和Windows双系统解决方案。</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h2 id="2-1-启用windows功能"><a href="#2-1-启用windows功能" class="headerlink" title="2.1.启用windows功能"></a>2.1.启用windows功能</h2><p>控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能或Win + R运行control appwiz.cpl指令。</p><p>在控制面版中启用Linux子系统。</p><h2 id="2-2-执行指令"><a href="#2-2-执行指令" class="headerlink" title="2.2.执行指令"></a>2.2.执行指令</h2><p>使用管理员身份运行Powershell，执行</p><p>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</p><h2 id="2-3-进入Microsoft-Store"><a href="#2-3-进入Microsoft-Store" class="headerlink" title="2.3. 进入Microsoft Store"></a>2.3. 进入Microsoft Store</h2><p>下载Windows terminal终端，再输入WSL找到Ubuntu系统，点击安装</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-4-设置用户"><a href="#2-4-设置用户" class="headerlink" title="2.4.设置用户"></a>2.4.设置用户</h2><p>设置用户名和密码。</p><p>进入系统。</p><p>把软件源修改为国内，由于官方源服务器在国外，访问较慢。</p><p>源的修改有两种方式：</p><ol><li>通过修改源列表，即/etc/apt/sources.list。</li><li>通过<code>apt-add-repository</code>命令。</li></ol><p>修改为清华大学的服务器源。</p><p>在命令行按下bash，进入Ubuntu系统，使用screenfetch可见文章封面。</p><h1 id="3-使用vscode开发"><a href="#3-使用vscode开发" class="headerlink" title="3. 使用vscode开发"></a>3. 使用vscode开发</h1><p>在bash命令行按下code .</p><p>即可打开vscode，进入界面，下载好Remote - WSLms-vscode-remote.remote-wsl</p><p>新建文件夹，设置配置文件，即可使用此方法进行开发。</p><h1 id="4-补充"><a href="#4-补充" class="headerlink" title="4. 补充"></a>4. 补充</h1><p>其他使用技巧</p><p>Linux子系统中可直接运行exe程序。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在文件管理器中打开当前Linux下的目录。</span><br><span class="line">explorer.exe .</span><br></pre></td></tr></table></figure><p>也就是说在Linux子系统中，我们可以同时运行为Linux和Windows编译的程序。</p><p>可直接在cmd/powershell中运行bash脚本，具体为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash test.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h1&gt;&lt;p&gt;主流的电脑主要运行着四大类系统，分别是微软的Windows、苹果的MacOS、Linux的发行版以及Unix类系统。&lt;b</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    <category term="Ubuntu" scheme="http://example.com/categories/Linux/Ubuntu/"/>
    
    <category term="Windows" scheme="http://example.com/categories/Linux/Ubuntu/Windows/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
    <category term="WSL" scheme="http://example.com/tags/WSL/"/>
    
  </entry>
  
</feed>
