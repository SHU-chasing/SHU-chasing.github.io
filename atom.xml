<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chasing&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-02T15:40:42.855Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>祝健聪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机学院分流建议</title>
    <link href="http://example.com/2021/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2%E5%88%86%E6%B5%81%E5%BB%BA%E8%AE%AE/"/>
    <id>http://example.com/2021/04/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E9%99%A2%E5%88%86%E6%B5%81%E5%BB%BA%E8%AE%AE/</id>
    <published>2021-04-02T14:26:09.000Z</published>
    <updated>2021-04-02T15:40:42.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="计算机学院分流建议"><a href="#计算机学院分流建议" class="headerlink" title="计算机学院分流建议"></a>计算机学院分流建议</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>此文所有内容仅供参考，如有不同意见请理性提出，不合理之处我会做出修改。<br>写作过程中难免有所偏向，也为了让读者更好的了解计算机专业的现状。<br>其中，带有强烈主观色彩的部分我已用<del>删除线标记</del>，如果觉得用语不合适请选择性忽略这部分。</p><h2 id="1-计算机专业现状"><a href="#1-计算机专业现状" class="headerlink" title="1.计算机专业现状"></a>1.计算机专业现状</h2><p><code>计算机是一个什么样的专业，我到底该不选计算机相关专业？</code><br>  在18年全国语文二卷的作文上，曾出现过一个名词“幸存者效应”，这对于我们在选择专业时，是个很重要的思想。直白来讲，便是不要因为局部个体而看不到整体的表象。例如我们不能通过某次北大清华出现了作弊考生，就断言名牌大学容忍作弊行为。同理，我们不能通过父母的某某亲戚，学了计算机成为了人上人，就判断这是对你而言很好的出路。</p><p>  在知乎这一平台，几乎人人都在斥责生化环材，同时也有很多人热烈拥护计算机。这也很可能进入同一个误区，因为要知道知乎平台的平均学历是很高的，并不是人人都能毕业后成为年薪20w，30w的牛人。需要认识到的是，选择计算机并不意味着就一定能有高薪。</p><p>  对于我们学校本科生的就业情况而言，计算机的平均薪资确实靠前列，但也不至于达到知乎平均水平的地步，我校就业的平均薪资还是被不少牛逼的人拉起来的。相比之下，其实中位数更加具有参考性。但是对于绝大部分人而言，计算机确实是一个相对具有性价比的选择。时代在进步，技术在进步，从我校数年前计算机专业最后排名的99%无人问津，到现在成为最为难进的专业之一，这其中确实也是能从中体会到互联网时代发展所带来的红利。而且相较于金融行业，计算机这一专业，对学历和人脉的要求并不是特别高，只要你有能力有本事，能够参加面试，那么是金子总会发光的。但是如果你没有任何本事，同那颗树一般，旁人议论“真卷啊，真卷啊”，但树干确实空无一物，那也便无从抱怨计算机不是一个好专业了。</p><p>  由上不难看出，计算机这一专业，存在着非常强的两极分化，不管是技术能力，工资收入，还是个人综合素质，差距都非常大。其已不是正态分布，而是幂律化分布，很可能是服从28定律甚至是“19定律”。有的人能够靠过硬本领收获offer无数，有的人却只能靠着过时技术做搬砖的码农。前者吹捧计算机是最好的专业，后者倍感35岁焦虑。你的未来的发展究竟如何，最主要还是在于个人的努力，因为不是你选择了计算机就能毕业后就一定收获高薪，计算机专业只是能够给你提供一个更好的上限和平台而已。</p><p>  最主要的是，到底要不要选择计算机专业，这取决于你自己对于计算机的喜爱程度，如果你本身对编程相关不怎么感兴趣，C语言这类课程学的很难受，那就绝对不要跟风选择计算机。要知道专业的选择很可能是一生的，尽管不能排除日后你有换专业的可能，但是我还是建议你慎重做好选择，毕竟你有进计算机专业的分数，很可能对于其他专业你都具有选择权。不要一时盲目而走了弯路。相反，如果你很热爱编程，对计算机相关技术感兴趣，同时有很不错的自学能力和钻研精神，那么计算机专业就再合适不过了。</p><p>  此外，需要说明，来到计院会有不少不是零基础的牛人，他们有的从中学期间便开始学习计算机知识。这里我们也只能接受事实，并努力追赶。要知道无论选择什么专业，你都会遇见这样的人，我相信大部分同学都还是0基础的，做好自己就好。</p><h2 id="2-关于分流"><a href="#2-关于分流" class="headerlink" title="2.关于分流"></a>2.关于分流</h2><p><code>某某绩点+高考过线多少多少分，能不能进计算机学院？</code></p><p>其实这种问题从本质上来说，很难给出很好的判断。</p><p>因为每年的高考成绩都有浮动，大一期间每一门科目的考试试卷，评判标准都是不同的，每一年的学生专业的偏好也有所区别。以上综合因素的累加导致最终结果很难判断，绩点也不适合作为量化指标。最主要的还是你的年级排名和高考归一化以后的成绩，这部分是已知的。综测部分虽然看上去只有10%，但是却非常拉分，因为几乎所有人的平均成绩分数集中在80分上下（90分以上的神仙和70以下的人真的很少），在分数密集的情况下，如果综测能提个1分，那便可以超越不少人，这部分的成绩是属于我有你无的定位，所以不要小看。</p><p>1、就一般情况而言，高考归一化后成绩能在70分以上的话，那么就已经不算拖后腿了，因为还是有不少同学是处于刚过线范围的。这里的加分对上海和江苏地区的考生更为友好，哪怕高过投档线几分也能够在分流的成绩上加上不少。<br>2、相对于高考困难省，那么很可能高考成绩可能就会作为拖累，例如我自己江西19年高考过线5分，分流结算成绩65左右，在排名时就会有一定的退步，不过这都是可接受范围之内。<br>3、如果学院专业排名在20-30%左右，高考只要是个正常水平不拖后腿，综测哪怕不加分，进计院的概率便已经相当大了。<br>4、高考很一般的话，如果在综测的时候，能有奖学金和综合素质加分，综测加分在0.8-1.4左右都可以提升非常大，那么这个排名限额还可以降低一点，综测分数很好很好的同学可以把要求降低到30-40%左右。<br>5、对于高考成绩极其突出及综测成绩能拿到1.4以上的同学，甚至50-60%都可能进来的可能。<br>6、相对应的，对于高考刚过线没多少或者是专项考生，那么在绩点方面的要求便会高上一些，可能要在年级排名10%-20%以内，才可以说稳进计算机专业，如果有综测加分的话最好不过。<br>7、分流最终的成绩，在较靠近中间的段位，因为人数更加密集，拉分、抬分会变得更加明显，如果是靠前段为的话，分数差距较大，就比较难拉开差距。<br>8、以上七点主要是针对未分理工12类的粗略判断，百分比的估计较为保守，做个大致参考就好，主要看今年的计划人数与学生水平而定。</p><p>不管如何，在你知道自己高考成绩并进入上大开始，你应该早已经有一个清晰的定位，即我应该努力到什么程度才能选上我心仪的专业。既然上大给了一个能够不仅仅通过高考决定专业的规则，那么为了进入好的专业理所当然需要付出更多。</p><h2 id="3-专业之间的区别"><a href="#3-专业之间的区别" class="headerlink" title="3.专业之间的区别"></a>3.专业之间的区别</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1.概述"></a>3.1.概述</h3><p><code>计算机专业那么多，到底选哪个好？</code></p><p>这一部分也是会有不少同学提问的点，在现在计算机学院开设了4门专业，计算机科学与技术，网络空间安全，智能科学与技术，人工智能，以下简称计科，网安，智科，AI。（大数据相关属于通信学院，可能了解并不是很多）<br>这一部分很多同学疑问的地方也在于，自己并不了解各个方向的知识，面对教学大纲和专业计划书，以及各式各样的专业名词，或多或少会产生疑惑。</p><p>在这里首先需要说明一点：选择进了计算机学院以后，教学内容都是差不太多的。只不过是有部分的偏向，但是实际上的内容相差并不会特别大，跨专业的学生平时的专业交流也不会有很大的难度。</p><p>既然课程的安排大体上相差不多，那么在课程安排上，我们只需要将重心关注在专业之间的不同点处。大体上，计算机科学与技术可以说是计算机方向上的“理工大类“。其他三个专业更像是“分流”的细专业。</p><p>一句话总结四个专业都要学的课程：面向对象程序设计，离散数学，计算机组成原理（与体系结构），计算机组成原理，计算机网络，操作系统。</p><p>这几科可以说是是最主要的核心课程了，如果要来计院，不管选哪个专业，那么以上都是必修课，对计科而言数据结构和计算机组成原理和离散数学都要上两学期，相对更加重视基础一些。<br>一般来说，对于计算机考研的话，我们简称专业课编号为408，即计算机组成原理、数据结构、计算机网络、操作系统，作为考研的专业课程这四门一定要学好学扎实。</p><h3 id="3-2-细分专业"><a href="#3-2-细分专业" class="headerlink" title="3.2.细分专业"></a>3.2.细分专业</h3><p>再提及专业差距方面：<br>智科和AI专业的差距并不是特别大，AI多了数据处理与知识挖掘，智能计算系统，智科而言主要多了信号处理，信息论等偏通信方向的课。</p><p>但是在这里需要特别强调的是，建议数学能力<code>特别特别特别</code>强的学生选择智科和AI（三个特别，尤其是AI）。在机器学习这个方向上的数学能力要求实际上会超过计算机编程能力的要求，特别是线性代数、概率论等知识。如果数学能力不强的同学请慎重选择，如今的AI方向内卷十分严重，行业内的大佬各大公司都抢着想要，但是能力平平无奇的人除了git clone什么都不会，很难找到特别满意的工作。上下限差距极大，如果你为了成为那个上限需要的努力也会比别人多很多很多。</p><p>此外，单读就AI而言，类似于金融类的专业，是很重视学历的（相较于传统计科），因为行业内更认可学历更可以代表你的综合能力。这个方向研究生几乎是必读的，甚至很可能需要读博士，选择这个专业要做好长期学习的准备。同时上海大学作为一个211，在简历上或许不能为你添很多色，最好是确保自己有能力考上名牌985的研究生再做选择。<del>我个人对上大的人工智能专业持保留态度。</del>如果数学和计算机实力都很强的同学，或许可以考虑。</p><p>网安方面的话，如果要参加CTF竞赛基本上靠学生自觉，其他的专业教学也是更加偏向安全方向，网安相关的老师能力还是不错的。同样的，网安方向最好能够读研究生，本科学历就业难度相对会比较大一些。</p><p>计科可以说是教学安排较为“亲民”的了，我两个智科网安的室友学一学期的计组都表示学的很难受，而计科的计组分成了两学期，相对好一些。同时对于智科网安的矩阵代数，信号处理这种课，很多人也反映学不到啥技术，<del>感觉教学计划还需要一定时间沉淀，毕竟是新开的课。</del>此外，在计科，是可以自由选择喜好的方向的，即你可以选择在计科学习网络安全相关，也可以学习机器学习，深度学习相关等等，并没有把方向放的那么死。不过这也可能成为缺点，就是你不知道学什么方向，同时，你也很可能相比别人会晚一步再确定自己的目标。</p><p>与此同时，也不需要因为选择了二级学科就成为了你的技术桎梏，计算机相关还是有不少通用的技能的。</p><h2 id="4-相关教学环境"><a href="#4-相关教学环境" class="headerlink" title="4.相关教学环境"></a>4.相关教学环境</h2><p>1、学院硬件方面的话，<del>自强4000和网安实验室是给游客参观用的，</del>ACM实验室成为队员的话有机会进，数字逻辑实验室电脑开机用时两分半击败了全国1%的电脑，至于其他上机课的机房，反正我感觉大部分人每节上机课都是自己带电脑。</p><p>2、一般而言，计算机学习本身并不需要特别强的电脑配置，因为程序员编程说白了还是文本工作者，一般的电脑都能够胜任常规操作。</p><p>3、但是针对AI或者智科等涉及机器学习的领域的话，有条件的可以选择使用台式机并自用显卡（最近矿难真是苦了老百姓），或者请提前联系相关的老师，看看能不能借到带有显卡的服务器，使用服务器运行你的代码，这两个二选一即可，做机器学习还是非常吃显卡的算力的。</p><p>4、此外，对于研讨，曾有人戏称计算机工程与科学学院是研讨与报告学院。确实存在这种情况，不过目前来看，面向对象和计网都没了研讨，数据结构和少数计组老师还是有研讨的习惯，其他的研讨真的已经减少了很多。至于报告，除掉实验课，对于大部分课程，不管是个人报告还是小组总结，都还是要写的，把其当成一个练笔的手段就好。</p><p>5、也有不少人喷计院的教材，从学长的笑谈中也可知——“数据结构并查集模板提交oj无一例外TLE；计组随处可见的奔腾处理器；javaEE学习的ssh已经过时等等”。不过以上问题也不仅仅发生在我校，国内很多计算机高校教学都存在这类问题。这里需要强调的是，与其怨天尤人不如学会接受。上大计院最不好的地方就是给你一种“世界只有这么大”的错觉，要想真正要做一个有实力的人的话，需要付出很多课外努力。</p><p>6、课堂的学习，借用他人说的两点，<code>“只学好课内的知识是不可能找到不错的工作的”</code>，<code>“计算机专业人与人之间的差距比人和狗还要大”</code>，其中含义慢慢品味。</p><h2 id="5-学习生活方面"><a href="#5-学习生活方面" class="headerlink" title="5.学习生活方面"></a>5.学习生活方面</h2><p>​    1、大一分流结束以后搬寝室是必然的，至于搬到哪里还是要等学校通知，19级计院理院机自学院全体都住在新世纪。不过就室友而言，相较于应数，计院不被允许自选室友。在我们分寝室的时候，以一整个学院为单位划分，很可能最后跟你一个寝室的同学学号都在你前后附近，不管你们具体是计科、智科、网安、人工智能哪个专业。即如果你和你现在前后寝室学号相近的同学约好一起来计院的话，大概率搬家后还会分到同一个寝室。（具体还是看学校安排）</p><p>​    2、上课的时候还是有不少人愿意坐前排，其中女生居多，也可见有情侣选一样的课表一直坐一块。计院的男女比例不算特别高，不像应数有的班可能女生比男生还多。</p><p>​    3、选课的时候，上课时间安排的候选项没有大一那么多，感觉计院选课有一种“连带效应”，就是你跟某某人有一节课一样的话，那你很可能很多课都跟他一样。这时候可以约上好友选一样的课，一起组队，一起交大作业报告啥的，总会比路人队友靠谱些。</p><p>​    4、到了大二以后部分课会转移到东区，建议学个骑车方便点，不过很迷的是在东区的大部分课都不是在计院大楼上。</p><p>​    5、社团的话目前最主要就是开源社区，参与其中，积极写点项目，能收获不少。相对应的也有学生会等组织（如果是特别想锻炼自己或者是很想评选领导力奖学金的可以考虑），但是大二的学习并不同大一，学习难度和学习压力等会增加不少。<del>不是很建议花费太多时间到课外活动上，我个人认为这些应该是大一就体会过了的。</del></p><p>​    6、ACM竞赛方面的话，也记住一个等式，即：</p><p><code>上海大学有很多ACM牛人=上海大学ACM强≠你来了上大ACM就一定会很强</code></p><p>加入ACM需要花费几乎所有的时间和精力，如果有noip经验或者是极强的数学功底，同时能找到两个同样具有实力，且志同道合的队友，可以考虑参加。<del>但是如果发现不合适请尽快退出，不要浪费过多时间，不如用来做做项目，为了就业刷刷力扣，也比死磕竞赛要强的多。</del>我自己就是刷了一段时间算法题以后，意识到能力不足，主动退出的。</p><p>​    7、同时对CTF竞赛，与上同理，不过上大对CTF竞赛的重视程度小于ACM竞赛，大部分还是需要自学，如果能与有能力有目标的队友组队，可以尝试一下。不管是CTF还是ACM，如果有奖项的话，在就业时写在简历上是非常加分的，而且就当前保研政策来看，有了这类奖状基本能够较容易保研，属于高风险高回报那种。</p><p>​    8、其他的学习生活上的日常也和大一无很多差异，自大二减少了活动课以后，班级之间的意识小了许多，也没有特别强的班集体荣誉感，就感觉同班同学之间的联系也没那么大了，与此同时班干部要干的事情也少了不少。</p><p>不过总的来说，社交圈广的人不管哪节课都能遇到熟人有说有笑，只会低头的小透明依旧一天上课到头也就只认得出几个室友。学习生活是否精彩取决于个人而不是专业。</p><h2 id="6-提前的准备"><a href="#6-提前的准备" class="headerlink" title="6.提前的准备"></a>6.提前的准备</h2><p>既然以经打算进入计算机学院的话，那么在进入专业学院之前就可以提前做好一些工作了，在这里我提供了一些思路，仅供参考。</p><p>以下顺序分先后：<br>    1、学习markdown文本语法格式，并学会使用typora写一些简单的技术博客。<br>    作为程序员最为常用的.md文本，光是支持代码高亮已经吊打word很多了，学会这个在今后记笔记上都会有帮助，同时这可能也是一个“大家默认都会，但是没人会教的技术”。<br>    2、注册一个GitHub账号，并学习一下基本操作，如怎么下载别人代码，上传自己的代码等。<br>    GitHub作为全世界最大的同性交友网站，懂得都懂。<br>    3、使用hexo等框架制作一个个人博客。<br>    在完成以上两点以后，便可以开始习惯写博客来记笔记了，这里更推荐使用hexo框架，具体的使用细节，遇到bug解决等，请全程参考百度谷歌等搜索引擎，这其中并不需要很多编程的技术和计算机专业知识。但是在这个过程中你会学到很多，包括如何使用搜索引擎解决技术问题，Git的常规命令等。（完成之后可以找我拉个友链hhh）<br>    4、开始学习一门新的语言（C++，Java，Python，JavaScript，C#，Golang，PHP，Rust，etc）<br>    一旦提及语言很容易引战，但是实际上你能不能排位上王者，跟你用哪个英雄并无关系。同样是走中单，你用婉儿、沈梦溪、张良都能上分，不过是各英雄有特长而已，路走对了就好，即发挥语言在某个领域的特长。只要你不用蔡文姬打野这样，其实问题都不会太大。这里对于已经选定了AI方向的同学，可以提前开始学习tensorflow和pytorch框架（首选pytorch），配合吴恩达老师的机器学习网课同时兼顾数学能力的培养，智科可以考虑提前学习matlab操作，其他的都可以根据爱好来，没有方向的话，随便选个热门语言（C++，Java，Python等）都行。<br>    5、在完成4的过程中，利用已经完成的123，学会记笔记并养成发布博客的好习惯。<br>    6、学习Linux操作系统，精通常用的命令，知晓一切皆文件的内涵。<br>    Linux操作系统是程序员必会的技能，提前学习百利无害。</p><h2 id="7-结语"><a href="#7-结语" class="headerlink" title="7.结语"></a>7.结语</h2><p>以上内容是我对于一年来上大的计院学习小小的总结，其中含有不少我自己的观点，选择专业时，请保持充分的理性。<br>文中批评了不少计院的不足之处，也列举了计算机专业的一些优势，主要目的是为了让大家更加了解计院的现状，既然有不足，便要学会去克服。我也希望这其中列举的缺点不是你放弃计院的理由，也不要因为某方面的好处而盲目选择计院。关键的关键还是你自己需要理性分析自己的爱好与个人特点，再综合做出选择。这其中不管是学长，你的老师或是家人，都只能是提供一些建议而已。<br>最后，祝各位都能分流到自己心爱的专业。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>np和cv制作数据增广</title>
    <link href="http://example.com/2020/12/22/np%E5%92%8Ccv%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%B9%BF/"/>
    <id>http://example.com/2020/12/22/np%E5%92%8Ccv%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%B9%BF/</id>
    <published>2020-12-22T06:20:20.000Z</published>
    <updated>2020-12-22T06:30:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用cv和np进行数据增广"><a href="#利用cv和np进行数据增广" class="headerlink" title="利用cv和np进行数据增广"></a>利用cv和np进行数据增广</h1><p>在制作数据集的时候，发现现存有的数据不够的情况，在老师的帮助之下，进行了数据增广处理。</p><p>由于现有的数据较少，尽能尽可能扩大现有的训练集样本容量。</p><p>数据增广是深度学习中常用的技巧之一，主要用于增加训练数据集，让数据集尽可能的多样化，使得训练的模型具有更强的泛化能力．现有的各大深度学习框架都已经自带了数据增广，但是平时在用的使用只是直接调用了对应的接口函数，而没有进行详细的分析．在实际应用中，并非所有的增广方式都适用当前的训练数据，需要根据自己的数据集特征来确定应该使用哪几种数据增广方式。</p><p>使用对应的矩阵实现图像的变换，直接贴代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAugment</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,debug=<span class="literal">False</span></span>):</span></span><br><span class="line">        self.debug=debug</span><br><span class="line">        print(<span class="string">&quot;Data augment...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">basic_matrix</span>(<span class="params">self,translation</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;基础变换矩阵&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> np.array([[<span class="number">1</span>,<span class="number">0</span>,translation[<span class="number">0</span>]],[<span class="number">0</span>,<span class="number">1</span>,translation[<span class="number">1</span>]],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adjust_transform_for_image</span>(<span class="params">self,img,trans_matrix</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据图像调整当前变换矩阵&quot;&quot;&quot;</span></span><br><span class="line">        transform_matrix=copy.deepcopy(trans_matrix)</span><br><span class="line">        height, width, channels = img.shape</span><br><span class="line">        transform_matrix[<span class="number">0</span>:<span class="number">2</span>, <span class="number">2</span>] *= [width, height]</span><br><span class="line">        center = np.array((<span class="number">0.5</span> * width, <span class="number">0.5</span> * height))</span><br><span class="line">        transform_matrix = np.linalg.multi_dot([self.basic_matrix(center), transform_matrix, self.basic_matrix(-center)])</span><br><span class="line">        <span class="keyword">return</span> transform_matrix</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply_transform</span>(<span class="params">self,img,transform</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;仿射变换&quot;&quot;&quot;</span></span><br><span class="line">        output = cv2.warpAffine(img, transform[:<span class="number">2</span>, :], dsize=(img.shape[<span class="number">1</span>], img.shape[<span class="number">0</span>]),</span><br><span class="line">                                flags=cv2.INTER_LINEAR, borderMode=cv2.BORDER_REFLECT, borderValue=<span class="number">0</span>,)   <span class="comment">#cv2.BORDER_REPLICATE,cv2.BORDER_TRANSPARENT</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span>(<span class="params">self,img,trans_matrix</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;应用变换&quot;&quot;&quot;</span></span><br><span class="line">        tmp_matrix=self.adjust_transform_for_image(img, trans_matrix)</span><br><span class="line">        out_img=self.apply_transform(img, tmp_matrix)</span><br><span class="line">        <span class="keyword">if</span> self.debug:</span><br><span class="line">            self.show(out_img)</span><br><span class="line">        <span class="keyword">return</span> out_img</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_vector</span>(<span class="params">self,<span class="built_in">min</span>,<span class="built_in">max</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成范围矩阵&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">min</span>=np.array(<span class="built_in">min</span>)</span><br><span class="line">        <span class="built_in">max</span>=np.array(<span class="built_in">max</span>)</span><br><span class="line">        print(<span class="built_in">min</span>.shape,<span class="built_in">max</span>.shape)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">min</span>.shape==<span class="built_in">max</span>.shape</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">min</span>.shape) == <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> np.random.uniform(<span class="built_in">min</span>, <span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self,img</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;可视化&quot;&quot;&quot;</span></span><br><span class="line">        cv2.imshow(<span class="string">&quot;outimg&quot;</span>,img)</span><br><span class="line">        cv2.waitKey()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_transform</span>(<span class="params">self,img,min_translation,max_translation</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;平移变换&quot;&quot;&quot;</span></span><br><span class="line">        factor=self.random_vector(min_translation,max_translation)</span><br><span class="line">        trans_matrix=np.array([[<span class="number">1</span>, <span class="number">0</span>, factor[<span class="number">0</span>]],[<span class="number">0</span>, <span class="number">1</span>, factor[<span class="number">1</span>]],[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">        out_img=self.apply(img,trans_matrix)</span><br><span class="line">        <span class="keyword">return</span> trans_matrix, out_img</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_flip</span>(<span class="params">self,img,factor</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;水平或垂直翻转&quot;&quot;&quot;</span></span><br><span class="line">        flip_matrix = np.array([[factor[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>],[<span class="number">0</span>, factor[<span class="number">1</span>], <span class="number">0</span>],[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">        out_img=self.apply(img,flip_matrix)</span><br><span class="line">        <span class="keyword">return</span> flip_matrix, out_img</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_rotate</span>(<span class="params">self,img,factor</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;随机旋转&quot;&quot;&quot;</span></span><br><span class="line">        angle=np.random.uniform(factor[<span class="number">0</span>],factor[<span class="number">1</span>])</span><br><span class="line">        print(<span class="string">&quot;angle:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(angle))</span><br><span class="line">        rotate_matrix=np.array([[np.cos(angle), -np.sin(angle), <span class="number">0</span>],[np.sin(angle), np.cos(angle), <span class="number">0</span>],[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">        out_img=self.apply(img,rotate_matrix)</span><br><span class="line">        <span class="keyword">return</span> rotate_matrix, out_img</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_scale</span>(<span class="params">self,img,min_translation,max_translation</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;随机缩放&quot;&quot;&quot;</span></span><br><span class="line">        factor=self.random_vector(min_translation, max_translation)</span><br><span class="line">        scale_matrix = np.array([[factor[<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>],[<span class="number">0</span>, factor[<span class="number">1</span>], <span class="number">0</span>],[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">        out_img=self.apply(img,scale_matrix)</span><br><span class="line">        <span class="keyword">return</span> scale_matrix, out_img</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">random_shear</span>(<span class="params">self,img,factor</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;随机剪切，包括横向和众向剪切&quot;&quot;&quot;</span></span><br><span class="line">        angle = np.random.uniform(factor[<span class="number">0</span>], factor[<span class="number">1</span>])</span><br><span class="line">        print(<span class="string">&quot;fc:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(angle))</span><br><span class="line">        crop_matrix = np.array([[<span class="number">1</span>, factor[<span class="number">0</span>], <span class="number">0</span>], [factor[<span class="number">1</span>], <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">        out_img=self.apply(img,crop_matrix)</span><br><span class="line">        <span class="keyword">return</span> crop_matrix, out_img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    demo=DataAugment(debug=<span class="literal">True</span>)</span><br><span class="line">    img=cv2.imread(<span class="string">&quot;/pathto/dataArgu/wr.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 平移测试</span></span><br><span class="line">    _,outimg=demo.random_transform(img,(<span class="number">0.1</span>,<span class="number">0.1</span>),(<span class="number">0.2</span>,<span class="number">0.2</span>))  <span class="comment">#(-0.3,-0.3),(0.3,0.3)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 垂直变换测试</span></span><br><span class="line">    _, outimg =demo.random_flip(img,(<span class="number">1.0</span>,<span class="number">-1.0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 水平变换测试</span></span><br><span class="line">    _, outimg =demo.random_flip(img, (<span class="number">-1.0</span>, <span class="number">1.0</span>))</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># 旋转变换测试</span></span><br><span class="line">    _, outimg =demo.random_rotate(img,(<span class="number">0.5</span>,<span class="number">0.8</span>))</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># # 缩放变换测试</span></span><br><span class="line">    _, outimg =demo.random_scale(img,(<span class="number">1.2</span>, <span class="number">1.2</span>),(<span class="number">1.3</span>,<span class="number">1.3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机裁剪测试</span></span><br><span class="line">    _, outimg =demo.random_shear(img,(<span class="number">0.2</span>,<span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组合变换</span></span><br><span class="line">    t1,_=demo.random_transform(img,(<span class="number">-0.3</span>,<span class="number">-0.3</span>),(<span class="number">0.3</span>,<span class="number">0.3</span>))</span><br><span class="line">    t2,_=demo.random_rotate(img,(<span class="number">0.5</span>,<span class="number">0.8</span>))</span><br><span class="line">    t3,_=demo.random_scale(img,(<span class="number">1.5</span>,<span class="number">1.5</span>),(<span class="number">1.7</span>,<span class="number">1.7</span>))</span><br><span class="line">    tmp=np.linalg.multi_dot([t1,t2,t3])</span><br><span class="line">    print(<span class="string">&quot;tmp:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(tmp))</span><br><span class="line">    out=demo.apply(img,tmp)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="ML" scheme="http://example.com/categories/python/ML/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>大一学习资料分享</title>
    <link href="http://example.com/2020/11/28/%E5%A4%A7%E4%B8%80%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/"/>
    <id>http://example.com/2020/11/28/%E5%A4%A7%E4%B8%80%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/</id>
    <published>2020-11-28T05:11:09.000Z</published>
    <updated>2020-11-28T05:11:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SHU社区学院资料整理"><a href="#SHU社区学院资料整理" class="headerlink" title="SHU社区学院资料整理"></a>SHU社区学院资料整理</h1><p>本着开源的原则，加之疫情期间在家全程的线上教学，在本人爱好收集文件的习惯之下，留下了一系列在社区学院期间学习的资料。涵盖了微积分，大学物理，线性代数，工程制图，中国近现代史纲要，军事理论等学科。其中包括课本、历年试卷、教学课件、笔记等，现将所有内容分享如下。<br>全文所分享的所有资料，仅供上海大学大一学生学习与交流使用。文章版权归个人所有，未经作者授权禁止转载（或注明出处），不得将其中的资料用作任何商业用途。</p><h2 id="1、大一课本："><a href="#1、大一课本：" class="headerlink" title="1、大一课本："></a>1、大一课本：</h2><p>大一期间的绝大多数课本pdf版（<del>还有部分英语课本等，尽力完善</del>）（英语课本B级已全）</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1E_NHlq-ERxFlMb6ZOvZIfA">https://pan.baidu.com/s/1E_NHlq-ERxFlMb6ZOvZIfA</a></p></blockquote><blockquote><p>提取码：dykb </p></blockquote><h2 id="2、历年期末试卷："><a href="#2、历年期末试卷：" class="headerlink" title="2、历年期末试卷："></a>2、历年期末试卷：</h2><p>部分学科的历年期末测试试卷</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/13eB0v-wAEBkCBeHpp7NfUg">https://pan.baidu.com/s/13eB0v-wAEBkCBeHpp7NfUg</a></p></blockquote><blockquote><p>提取码：qmsj </p></blockquote><h2 id="3、理工大类微积分试卷："><a href="#3、理工大类微积分试卷：" class="headerlink" title="3、理工大类微积分试卷："></a>3、理工大类微积分试卷：</h2><p>理工大类的微积分测试卷以及练习题等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1Purl_p4G2LMvmpwHeBqImA">https://pan.baidu.com/s/1Purl_p4G2LMvmpwHeBqImA</a></p></blockquote><blockquote><p>提取码：gssj </p></blockquote><h2 id="4、线性代数资料："><a href="#4、线性代数资料：" class="headerlink" title="4、线性代数资料："></a>4、线性代数资料：</h2><p>史上最全的线性代数资料，包括大多数课件课本pdf，测试题，历年试卷，猴博士教程等等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1P95PTcMIWNJUCoK4rQ9s1w">https://pan.baidu.com/s/1P95PTcMIWNJUCoK4rQ9s1w</a></p></blockquote><blockquote><p>提取码：xxds </p></blockquote><h2 id="5、-高等数学电子教案："><a href="#5、-高等数学电子教案：" class="headerlink" title="5、 高等数学电子教案："></a>5、 高等数学电子教案：</h2><p>我校高等数学电子课件，转载自微信公众号“上大数学在线”，读者可以自行选择关注</p><p>(链接已经失效了555~)<br>~&gt;链接：<a href="https://pan.baidu.com/s/1Bum6HY9qrrzp6gY0Zc6x9Q">https://pan.baidu.com/s/1Bum6HY9qrrzp6gY0Zc6x9Q</a> </p><p><del>&gt;提取码：gdsx</del></p><h2 id="6、大学物理电子教案："><a href="#6、大学物理电子教案：" class="headerlink" title="6、大学物理电子教案："></a>6、大学物理电子教案：</h2><p>大学物理的课件，由于线上上课质量不齐，整理的数目较少</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1oigVp21in-MPKVmmPHur4A">https://pan.baidu.com/s/1oigVp21in-MPKVmmPHur4A</a></p></blockquote><blockquote><p>提取码：dxwl </p></blockquote><h2 id="7、工程制图和计算机绘图基础："><a href="#7、工程制图和计算机绘图基础：" class="headerlink" title="7、工程制图和计算机绘图基础："></a>7、工程制图和计算机绘图基础：</h2><p>工程制图的习题集答案等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1SlZDrEkvIYgibgKa8l8x3Q">https://pan.baidu.com/s/1SlZDrEkvIYgibgKa8l8x3Q</a></p></blockquote><blockquote><p>提取码：gczt </p></blockquote><h2 id="8、-军事理论资料："><a href="#8、-军事理论资料：" class="headerlink" title="8、 军事理论资料："></a>8、 军事理论资料：</h2><p>军事理论复习提纲，anki背诵词典等，以及线上考试的题库</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1B5ECxo8G-IFMUJO9Xhm2VA">https://pan.baidu.com/s/1B5ECxo8G-IFMUJO9Xhm2VA</a></p></blockquote><blockquote><p>提取码：jsll </p></blockquote><h2 id="9、中国近现代史纲要："><a href="#9、中国近现代史纲要：" class="headerlink" title="9、中国近现代史纲要："></a>9、中国近现代史纲要：</h2><p>中近纲的题库，教辅书等等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1kXq7g2xi44dUmxUo1I44uw">https://pan.baidu.com/s/1kXq7g2xi44dUmxUo1I44uw</a> </p></blockquote><blockquote><p>提取码：jxds </p></blockquote><h2 id="10、大学英语"><a href="#10、大学英语" class="headerlink" title="10、大学英语"></a>10、大学英语</h2><p>视听说、读写教程</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1QwYKqmDXa-L0wUe2173hgw">https://pan.baidu.com/s/1QwYKqmDXa-L0wUe2173hgw</a> </p></blockquote><blockquote><p>提取码：dxyy</p></blockquote><h2 id="11、大物、大化实验"><a href="#11、大物、大化实验" class="headerlink" title="11、大物、大化实验"></a>11、大物、大化实验</h2><p>大学物理实验以及大学化学实验用书，<br>实验课其实可以不用去教材科买纸质书的（</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1zIz8kGJFJ6GXlRsEB4King">https://pan.baidu.com/s/1zIz8kGJFJ6GXlRsEB4King</a> </p></blockquote><blockquote><p>提取码：sykb </p></blockquote><h2 id="12、全国大学生数学竞赛辅导"><a href="#12、全国大学生数学竞赛辅导" class="headerlink" title="12、全国大学生数学竞赛辅导"></a>12、全国大学生数学竞赛辅导</h2><p>数学竞赛的讲义、历年试卷等等</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1FCwcohCk-qN3b9EfMbbtrQ">https://pan.baidu.com/s/1FCwcohCk-qN3b9EfMbbtrQ</a> </p></blockquote><blockquote><p>提取码：sxjs </p></blockquote><h2 id="13、未完待续："><a href="#13、未完待续：" class="headerlink" title="13、未完待续："></a>13、未完待续：</h2><p>整理不易，你的每一次浏览或者打赏都是对作者最大的支持。</p><p>希望大一的同学们能够合理利用学习资源，进入自己理想的专业！</p>]]></content>
    
    
    <summary type="html">上海大学社区学院学习资料分享</summary>
    
    
    
    <category term="学习资料" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
    
    <category term="学习资料" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>使用yolov3进行物品检测</title>
    <link href="http://example.com/2020/11/17/yolov3/"/>
    <id>http://example.com/2020/11/17/yolov3/</id>
    <published>2020-11-16T16:26:09.000Z</published>
    <updated>2020-12-22T06:29:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="yolov3进行物品检测"><a href="#yolov3进行物品检测" class="headerlink" title="yolov3进行物品检测"></a>yolov3进行物品检测</h1><h2 id="1-环境配置（√）"><a href="#1-环境配置（√）" class="headerlink" title="1.环境配置（√）"></a>1.环境配置（√）</h2><h3 id="1-1-yolov3下darknet安装（√）"><a href="#1-1-yolov3下darknet安装（√）" class="headerlink" title="1.1. yolov3下darknet安装（√）"></a>1.1. yolov3下darknet安装（√）</h3><p>在WSL下，运行bash命令<br>或者使用git</p><ol><li>下载 darknet 并编译：<br>　　git clone <a href="https://github.com/pjreddie/darknet">https://github.com/pjreddie/darknet</a><br>　　cd darknet<br>　　make</li></ol><h3 id="1-2-配置labelimg工具（√）"><a href="#1-2-配置labelimg工具（√）" class="headerlink" title="1.2. 配置labelimg工具（√）"></a>1.2. 配置labelimg工具（√）</h3><p>编译运行label.exe</p><h3 id="1-3-配置NIVIDA下的CUDA以及CUDNN（√）"><a href="#1-3-配置NIVIDA下的CUDA以及CUDNN（√）" class="headerlink" title="1.3. 配置NIVIDA下的CUDA以及CUDNN（√）"></a>1.3. 配置NIVIDA下的CUDA以及CUDNN（√）</h3><p>前提：要有NVIDIA（英伟达）GEFORCE系列的显卡<br>到官网安装，配置环境变量<br>测试代码，在tensorflow1.6版本运行成功</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#Creates a graph.</span></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>], shape=[<span class="number">2</span>, <span class="number">3</span>], name=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">b = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>], shape=[<span class="number">3</span>, <span class="number">2</span>], name=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">c = tf.matmul(a, b)</span><br><span class="line"><span class="comment">#Creates a session with log_device_placement set to True.</span></span><br><span class="line">sess = tf.Session(config=tf.ConfigProto(log_device_placement=<span class="literal">True</span>))</span><br><span class="line"><span class="comment">#Runs the op.</span></span><br><span class="line">print(sess.run(c))</span><br></pre></td></tr></table></figure><h3 id="1-4-使用GPU加速（√）"><a href="#1-4-使用GPU加速（√）" class="headerlink" title="1.4. 使用GPU加速（√）"></a>1.4. 使用GPU加速（√）</h3><h3 id="1-4-运行测试程序（√）"><a href="#1-4-运行测试程序（√）" class="headerlink" title="1.4. 运行测试程序（√）"></a>1.4. 运行测试程序（√）</h3><p><code>darknet detect cfg/yolov3.cfg yolov3.weights data/dog.jpg</code></p><h2 id="2-数据准备"><a href="#2-数据准备" class="headerlink" title="2.数据准备"></a>2.数据准备</h2><h3 id="2-1-数据集的准备（？）"><a href="#2-1-数据集的准备（？）" class="headerlink" title="2.1. 数据集的准备（？）"></a>2.1. 数据集的准备（？）</h3><h3 id="2-2-给每一个图片添加标签保存为mxl文件（√）"><a href="#2-2-给每一个图片添加标签保存为mxl文件（√）" class="headerlink" title="2.2. 给每一个图片添加标签保存为mxl文件（√）"></a>2.2. 给每一个图片添加标签保存为mxl文件（√）</h3><p>使用labelimg给每个图片添加选区</p><h3 id="2-4-将XML文件转换成txt格式（√）"><a href="#2-4-将XML文件转换成txt格式（√）" class="headerlink" title="2.4. 将XML文件转换成txt格式（√）"></a>2.4. 将XML文件转换成txt格式（√）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此代码和data文件夹同目录</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="comment">#  类名</span></span><br><span class="line">class_names = [<span class="string">&#x27;IDCARD&#x27;</span>]</span><br><span class="line"><span class="comment">#  xml文件路径，train_images只需改为val_images就可以处理val_images的了</span></span><br><span class="line">path = <span class="string">&#x27;data/train_images/&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#  转换一个xml文件为txt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_xml_to_txt</span>(<span class="params">xml_file</span>):</span></span><br><span class="line">    tree = ET.parse(xml_file)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    <span class="comment"># 保存的txt文件路径</span></span><br><span class="line">    txt_file = xml_file.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> txt_file:</span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> root.findall(<span class="string">&#x27;object&#x27;</span>):</span><br><span class="line">    <span class="comment"># filename = root.find(&#x27;filename&#x27;).text</span></span><br><span class="line">    picture_width = <span class="built_in">int</span>(root.find(<span class="string">&#x27;size&#x27;</span>)[<span class="number">0</span>].text)</span><br><span class="line">    picture_height = <span class="built_in">int</span>(root.find(<span class="string">&#x27;size&#x27;</span>)[<span class="number">1</span>].text)</span><br><span class="line">    class_name = member[<span class="number">0</span>].text</span><br><span class="line">    <span class="comment">#  类名对应的index</span></span><br><span class="line">    class_num = class_names.index(class_name)</span><br><span class="line">    box_x_min = <span class="built_in">int</span>(member[<span class="number">4</span>][<span class="number">0</span>].text)  <span class="comment"># 左上角横坐标</span></span><br><span class="line">    box_y_min = <span class="built_in">int</span>(member[<span class="number">4</span>][<span class="number">1</span>].text)  <span class="comment"># 左上角纵坐标</span></span><br><span class="line">    box_x_max = <span class="built_in">int</span>(member[<span class="number">4</span>][<span class="number">2</span>].text)  <span class="comment"># 右下角横坐标</span></span><br><span class="line">    box_y_max = <span class="built_in">int</span>(member[<span class="number">4</span>][<span class="number">3</span>].text)  <span class="comment"># 右下角纵坐标</span></span><br><span class="line">    <span class="comment"># 转成相对位置和宽高</span></span><br><span class="line">    x_center = (box_x_min + box_x_max) / (<span class="number">2</span> * picture_width)</span><br><span class="line">    y_center = (box_y_min + box_y_max) / (<span class="number">2</span> * picture_height)</span><br><span class="line">    width = (box_x_max - box_x_min) / picture_width</span><br><span class="line">    height = (box_y_max - box_y_min) / picture_height</span><br><span class="line">    print(class_num, x_center, y_center, width, height)</span><br><span class="line">    txt_file.write(<span class="built_in">str</span>(class_num) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(x_center) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(y_center) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(width) + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(height) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  转换文件夹下的所有xml文件为txt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir_xml_to_txt</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">for</span> xml_file <span class="keyword">in</span> glob.glob(path + <span class="string">&#x27;*.xml&#x27;</span>):</span><br><span class="line">        single_xml_to_txt(xml_file)</span><br><span class="line"></span><br><span class="line">dir_xml_to_txt(path)</span><br></pre></td></tr></table></figure><p>生成测试以及样例的txt文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#此代码和data文件夹同目录</span></span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;data/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_train_and_val</span>(<span class="params">image_path, txt_file</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(txt_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> tf:</span><br><span class="line">        <span class="keyword">for</span> jpg_file <span class="keyword">in</span> glob.glob(image_path + <span class="string">&#x27;*.jpg&#x27;</span>):</span><br><span class="line">            tf.write(jpg_file + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">generate_train_and_val(path + <span class="string">&#x27;train_images/&#x27;</span>, path + <span class="string">&#x27;train.txt&#x27;</span>)</span><br><span class="line">generate_train_and_val(path + <span class="string">&#x27;val_images/&#x27;</span>, path + <span class="string">&#x27;val.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-5-使用darknet编译"><a href="#2-5-使用darknet编译" class="headerlink" title="2.5. 使用darknet编译"></a>2.5. 使用darknet编译</h3><h2 id="3-测试身份证识别模型"><a href="#3-测试身份证识别模型" class="headerlink" title="3.测试身份证识别模型"></a>3.测试身份证识别模型</h2><h3 id="3-1-测试视频进行目标检测"><a href="#3-1-测试视频进行目标检测" class="headerlink" title="3.1.测试视频进行目标检测"></a>3.1.测试视频进行目标检测</h3><h3 id="3-2-选取PSNR某一帧"><a href="#3-2-选取PSNR某一帧" class="headerlink" title="3.2.选取PSNR某一帧"></a>3.2.选取PSNR某一帧</h3><h3 id="3-3-导出为图片"><a href="#3-3-导出为图片" class="headerlink" title="3.3.导出为图片"></a>3.3.导出为图片</h3><h2 id="4-对倾斜画面进行矫正"><a href="#4-对倾斜画面进行矫正" class="headerlink" title="4. 对倾斜画面进行矫正"></a>4. 对倾斜画面进行矫正</h2><h2 id="5-OCR身份证上的信息"><a href="#5-OCR身份证上的信息" class="headerlink" title="5. OCR身份证上的信息"></a>5. OCR身份证上的信息</h2><h3 id="5-1-读取身份证号码"><a href="#5-1-读取身份证号码" class="headerlink" title="5.1 读取身份证号码"></a>5.1 读取身份证号码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 身份证号</span></span><br><span class="line">r = <span class="string">r&#x27;^([1-9]\d&#123;5&#125;[12]\d&#123;3&#125;(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])\d&#123;3&#125;[0-9xX])$&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据比例和偏移算出号码位置</span></span><br><span class="line"><span class="comment"># 一般面部比例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcIdRectByFaceRect_normal</span>(<span class="params">x, y, w, h</span>):</span></span><br><span class="line">    scale = <span class="built_in">float</span>(w) / <span class="number">95</span></span><br><span class="line">    x1 = <span class="built_in">int</span>(x + ((<span class="number">0</span> - <span class="number">159</span>)) * scale)</span><br><span class="line">    y1 = <span class="built_in">int</span>(y + (<span class="number">0</span> + (<span class="number">149</span>)) * scale)</span><br><span class="line">    x2 = <span class="built_in">int</span>(x + (<span class="number">0</span> - <span class="number">159</span> + (<span class="number">275</span>)) * scale)</span><br><span class="line">    y2 = <span class="built_in">int</span>(y + (<span class="number">0</span> + (<span class="number">149</span>) + (<span class="number">45</span>)) * scale)</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 较大面部比例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcIdRectByFaceRect_big</span>(<span class="params">x, y, w, h</span>):</span></span><br><span class="line">    scale = <span class="built_in">float</span>(w) / <span class="number">95</span></span><br><span class="line">    x1 = <span class="built_in">int</span>(x + ((<span class="number">0</span> - <span class="number">159</span>) + <span class="number">10</span>) * scale)</span><br><span class="line">    y1 = <span class="built_in">int</span>(y + (<span class="number">0</span> + (<span class="number">149</span> - <span class="number">3</span>)) * scale)</span><br><span class="line">    x2 = <span class="built_in">int</span>(x + (<span class="number">0</span> - <span class="number">159</span> + (<span class="number">275</span> - <span class="number">10</span>)) * scale)</span><br><span class="line">    y2 = <span class="built_in">int</span>(y + (<span class="number">0</span> + (<span class="number">149</span> - <span class="number">3</span>) + (<span class="number">45</span> - <span class="number">10</span>)) * scale)</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 较小面部比例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CalcIdRectByFaceRect_small</span>(<span class="params">x, y, w, h</span>):</span></span><br><span class="line">    scale = <span class="built_in">float</span>(w) / <span class="number">95</span></span><br><span class="line">    x1 = <span class="built_in">int</span>(x + ((<span class="number">0</span> - <span class="number">159</span>) - <span class="number">10</span>) * scale)</span><br><span class="line">    y1 = <span class="built_in">int</span>(y + (<span class="number">0</span> + (<span class="number">149</span> + <span class="number">3</span>)) * scale)</span><br><span class="line">    x2 = <span class="built_in">int</span>(x + (<span class="number">0</span> - <span class="number">159</span> + (<span class="number">275</span> + <span class="number">10</span>)) * scale)</span><br><span class="line">    y2 = <span class="built_in">int</span>(y + (<span class="number">0</span> + (<span class="number">149</span> + <span class="number">5</span>) + (<span class="number">45</span> + <span class="number">10</span>)) * scale)</span><br><span class="line">    <span class="keyword">return</span> (x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二值化算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarizing</span>(<span class="params">img, threshold</span>):</span></span><br><span class="line">    pixdata = img.load()</span><br><span class="line">    w, h = img.size</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y] &lt; threshold:</span><br><span class="line">                pixdata[x, y] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除干扰线算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">depoint</span>(<span class="params">img</span>):</span>  <span class="comment"># input: gray image</span></span><br><span class="line">    pixdata = img.load()</span><br><span class="line">    w, h = img.size</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, h - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, w - <span class="number">1</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y - <span class="number">1</span>] &gt; <span class="number">245</span>:</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x, y + <span class="number">1</span>] &gt; <span class="number">245</span>:</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x - <span class="number">1</span>, y] &gt; <span class="number">245</span>:</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> pixdata[x + <span class="number">1</span>, y] &gt; <span class="number">245</span>:</span><br><span class="line">                count = count + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">2</span>:</span><br><span class="line">                pixdata[x, y] = <span class="number">255</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  通过头像的位置 身份证号码识别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity_OCR_byFaceRect</span>(<span class="params">oImg, faceRect</span>):</span></span><br><span class="line">    (x, y, w, h) = faceRect</span><br><span class="line">    iw, ih = oImg.size</span><br><span class="line">    <span class="comment"># 将身份证放大3倍</span></span><br><span class="line">    largeImg = oImg.resize((iw * <span class="number">3</span>, ih * <span class="number">3</span>), Image.ANTIALIAS)</span><br><span class="line">    <span class="comment"># largeImg.save(&#x27;1_large.png&#x27;)</span></span><br><span class="line"></span><br><span class="line">    (x1, y1, x2, y2) = CalcIdRectByFaceRect_normal(x, y, w, h)</span><br><span class="line">    region = (x1 * <span class="number">3</span>, y1 * <span class="number">3</span>, x2 * <span class="number">3</span>, y2 * <span class="number">3</span>)</span><br><span class="line">    code = GetRegionString(largeImg, region)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(r, code):</span><br><span class="line">        (x1, y1, x2, y2) = CalcIdRectByFaceRect_small(x, y, w, h)</span><br><span class="line">        region = (x1 * <span class="number">3</span>, y1 * <span class="number">3</span>, x2 * <span class="number">3</span>, y2 * <span class="number">3</span>)</span><br><span class="line">        code = GetRegionString(largeImg, region)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(r, code):</span><br><span class="line">        (x1, y1, x2, y2) = CalcIdRectByFaceRect_big(x, y, w, h)</span><br><span class="line">        region = (x1 * <span class="number">3</span>, y1 * <span class="number">3</span>, x2 * <span class="number">3</span>, y2 * <span class="number">3</span>)</span><br><span class="line">        code = GetRegionString(largeImg, region)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> re.match(r, code):</span><br><span class="line">        code = <span class="string">&#x27;NONE&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> code, (x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetRegionString</span>(<span class="params">img, region</span>):</span></span><br><span class="line">    <span class="comment"># 裁切身份证号码图片</span></span><br><span class="line">    cropImg = img.crop(region)</span><br><span class="line">    cropImg.save(<span class="string">&#x27;/tmp/2_crop.png&#x27;</span>)</span><br><span class="line">    <span class="comment"># 转化为灰度图</span></span><br><span class="line">    grayImg = cropImg.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    <span class="comment"># grayImg.save(&#x27;3_grey.png&#x27;)</span></span><br><span class="line">    <span class="comment"># 把图片变成二值图像。</span></span><br><span class="line">    bImg = binarizing(grayImg, <span class="number">100</span>)</span><br><span class="line">    <span class="comment"># bImg.save(&#x27;4_bin.png&#x27;)</span></span><br><span class="line">    dImg = depoint(bImg)</span><br><span class="line">    <span class="comment"># dImg.save(&#x27;5_depoint.png&#x27;)</span></span><br><span class="line">    code = pytesseract.image_to_string(dImg)</span><br><span class="line">    code = PostProc(code)</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  号码后处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PostProc</span>(<span class="params">s</span>):</span></span><br><span class="line">    res = s</span><br><span class="line">    res = res.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;O&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;U&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;S&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;5&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;o&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;f&quot;</span>, <span class="string">&quot;7&quot;</span>)</span><br><span class="line">    res = res.replace(<span class="string">&quot;H&quot;</span>, <span class="string">&quot;11&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  检测身份证</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DetectFacesAndIDs</span>(<span class="params">pic_path</span>):</span></span><br><span class="line">    frame = cv2.imread(pic_path)</span><br><span class="line">    oImg = Image.<span class="built_in">open</span>(pic_path)</span><br><span class="line"></span><br><span class="line">    ih, iw = frame.shape[:<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># 人脸识别分类器</span></span><br><span class="line">    classfier = cv2.CascadeClassifier(<span class="string">&quot;/usr/local/lib/python3.6/site-packages/cv2/data/haarcascade_frontalface_alt.xml&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 识别出人脸后要画的边框的颜色，RGB格式</span></span><br><span class="line">    color = (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    color2 = (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将当前帧转换成灰度图像</span></span><br><span class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 人脸检测，1.2和2分别为图片缩放比例和需要检测的有效点数</span></span><br><span class="line">    faceRects = classfier.detectMultiScale(</span><br><span class="line">        gray, scaleFactor=<span class="number">1.2</span>, minNeighbors=<span class="number">3</span>, minSize=(<span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(faceRects) &gt; <span class="number">0</span>:  <span class="comment"># 大于0则检测到人脸</span></span><br><span class="line">        <span class="keyword">for</span> faceRect <span class="keyword">in</span> faceRects:  <span class="comment"># 单独框出每一张人脸</span></span><br><span class="line">            x, y, w, h = faceRect</span><br><span class="line">            cv2.rectangle(frame, (x, y), (x + w, y + h), color, <span class="number">2</span>)</span><br><span class="line">            code, (x1, y1, x2, y2) = identity_OCR_byFaceRect(oImg, faceRect)</span><br><span class="line">            cv2.rectangle(frame, (x1, y1), (x2, y2), color2, <span class="number">2</span>)</span><br><span class="line">            <span class="comment">#cv2.imwrite(&quot;%s.iddet.png&quot; % pic_path, frame)</span></span><br><span class="line">            <span class="keyword">return</span> code</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;NONE&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">DetectFacesAndIDs(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-2-读取身份证的地址信息"><a href="#5-2-读取身份证的地址信息" class="headerlink" title="5.2.读取身份证的地址信息"></a>5.2.读取身份证的地址信息</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    <category term="ML" scheme="http://example.com/categories/python/ML/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>随笔（二）</title>
    <link href="http://example.com/2020/11/17/%E9%9A%8F%E7%AC%94%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://example.com/2020/11/17/%E9%9A%8F%E7%AC%94%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-11-16T16:26:09.000Z</published>
    <updated>2020-11-29T02:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">写下此篇，也算是对大二的第一个学期做个完结吧。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="dda74e3b80066c031411cd50d49fcf7c74d31703c467b2ec773e994796e5bd06"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Vim yes!</title>
    <link href="http://example.com/2020/11/07/VIM%20yes%EF%BC%81/"/>
    <id>http://example.com/2020/11/07/VIM%20yes%EF%BC%81/</id>
    <published>2020-11-07T15:52:09.000Z</published>
    <updated>2020-12-14T09:14:14.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d9e6ec7a39be6383ba7b6c2acaa7846c10d0c95d6dc65310cd5b10a8affbbdd0"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="vim" scheme="http://example.com/categories/linux/vim/"/>
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
    <category term="vim" scheme="http://example.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>一切皆文件</title>
    <link href="http://example.com/2020/11/07/%E4%B8%80%E5%88%87%E7%9A%86%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/2020/11/07/%E4%B8%80%E5%88%87%E7%9A%86%E6%96%87%E4%BB%B6/</id>
    <published>2020-11-07T13:46:09.000Z</published>
    <updated>2020-12-22T06:31:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h1><h2 id="1-从／开始"><a href="#1-从／开始" class="headerlink" title="1. 从／开始"></a>1. 从／开始</h2><p>   Linux归根结底就只有一个根目录，一个独立且唯一的文件结构。<br>   在Linux系统中，目录，字符设备，块设备，套接字，打印机都抽象成了文件，每次配置文件都是在修改配置文件的参数。<br>   在默认的Linux架构下，都有层次化标准FHS，来引导分区，格式化以及其余操作。<br>   Linux默认可分为3个分区,分别是boot分区、swap分区和根分区。</p><h2 id="2-分区管理"><a href="#2-分区管理" class="headerlink" title="2. 分区管理"></a>2. 分区管理</h2><p>在 Linux 中规定，每一个硬盘设备最多能有 4个主分区（其中包含扩展分区）构成，任何一个扩展分区都要占用一个主分区号码，也就是在一个硬盘中，主分区和扩展分区一共最多是 4 个。</p><hr><p>/boot分区，它包含了操作系统的内核和在启动系统过程中所要用到的文件</p><p>/usr分区，是red hat linux系统存放软件的地方，如有可能应将最大空间分给它。</p><p>/home分区，是用户的home目录所在地，分区的大小取决于用户数目。如果是多用户共同使用一台电脑的话，这个分区是完全有必要的，况且根用户也可以很好地控制普通用户使用计算机，如对用户或者用户组实行硬盘限量使用，限制普通用户访问哪些文件等。</p><p>/var/log分区，是系统日志记录分区，如果设立了这一单独的分区，这样即使系统的日志文件出现了问题，它们也不会影响到操作系统的主分区。</p><p>/tmp分区，用来存放临时文件。这对于多用户系统或者网络服务器来说是有必要的。 </p><p>/bin分区，存放标准系统实用程序。</p><p>/dev分区，存放设备文件。</p><p>/opt分区，存放可选的安装的软件。</p><p>/sbin分区，存放标准系统管理文件。</p><h2 id="3-WSL下的文件类型分区"><a href="#3-WSL下的文件类型分区" class="headerlink" title="3. WSL下的文件类型分区"></a>3. WSL下的文件类型分区</h2><p>   在WSL下，windows的磁盘被挂载到了/mnt下，可以直接访问。<br>   即原先的cde盘被默认挂载在某个子文件夹下</p><blockquote><p>移动到别的分区</p></blockquote><p>#启用WSL<br>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</p><p>#创建目录<br>New-Item D:\WSL -ItemType Directory<br>Set-Location D:\WSL</p><p>#下载安装程序<br>Invoke-WebRequest -Uri <a href="https://aka.ms/wsl-ubuntu-1804">https://aka.ms/wsl-ubuntu-1804</a> -OutFile Ubuntu.appx -UseBasicParsing<br>Rename-Item .\Ubuntu.appx Ubuntu.zip<br>Expand-Archive .\Ubuntu.zip -Verbose</p><p>#运行程序<br>cd Ubuntu</p><blockquote><p>再次重启</p></blockquote><p>#cmd (管理员)<br>#停止<br>net stop LxssManager</p><p>#启动<br>net start LxssManager</p><p>#批处理 (管理员)<br>#停止<br>start cmd /k net stop LxssManager</p><p>#启动<br>start cmd /k net start LxssManager</p><h2 id="4-修改默认初始位置"><a href="#4-修改默认初始位置" class="headerlink" title="4.修改默认初始位置"></a>4.修改默认初始位置</h2><p>wsl下的windows terminal默认的打开位置是mnt下，c盘的用户目录。<br>这并不符合正常的操作逻辑，可以在setting.json下修改，如下图：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;2c4de342-38b7-51cf-b940-2309a097f518&#125;&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;commandline&quot;</span> : <span class="string">&quot;Ubuntu&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"> <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Ubuntu&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Wsl&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;startingDirectory&quot;</span>: <span class="string">&quot;//wsl$/Ubuntu-20.04/home/chasing&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到Ubuntu的位置，在后面添加/home/chasing，即可实现</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    <category term="WSL" scheme="http://example.com/categories/Linux/WSL/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="WSL" scheme="http://example.com/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>使用WSL终端连接远程服务器</title>
    <link href="http://example.com/2020/11/06/%E4%BD%BF%E7%94%A8WSL%E7%BB%88%E7%AB%AF%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2020/11/06/%E4%BD%BF%E7%94%A8WSL%E7%BB%88%E7%AB%AF%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-11-06T02:13:43.000Z</published>
    <updated>2020-12-14T09:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">加密？</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f1fec690b05c0321fed355ddccf94e770743c982d97cbfe50f2ec48824494b45"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="WSL" scheme="http://example.com/tags/WSL/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>随笔（一）</title>
    <link href="http://example.com/2020/11/04/%E9%9A%8F%E7%AC%94%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://example.com/2020/11/04/%E9%9A%8F%E7%AC%94%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-11-03T16:26:09.000Z</published>
    <updated>2020-12-14T09:09:40.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">刚才看完了杨学长的大学生活博客，感慨万千，遂记此篇。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="28eb41bfc87f76fd3b733ba833d2778729408fb2054dd1c2b5c39b76e5b50c93"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>web自动化实现SHU每日两报</title>
    <link href="http://example.com/2020/10/28/SHU%E6%AF%8F%E6%97%A5%E4%B8%A4%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://example.com/2020/10/28/SHU%E6%AF%8F%E6%97%A5%E4%B8%A4%E6%8A%A5%E8%87%AA%E5%8A%A8%E5%8C%96/</id>
    <published>2020-10-28T03:13:09.000Z</published>
    <updated>2020-12-22T06:31:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SHU每日两报脚本"><a href="#SHU每日两报脚本" class="headerlink" title="SHU每日两报脚本"></a>SHU每日两报脚本</h1><h2 id="1-实现原理"><a href="#1-实现原理" class="headerlink" title="1. 实现原理"></a>1. 实现原理</h2><p>利用python中的Selenium库，并结合浏览器驱动，来自动完成每日两报的操作，最后测试结果将每天的体温设置区间为36度至37度之间（含小数点后一位）。同时，在使用前可以自己选择相应的填报日期，也可以在特定日期之内完成相应的填报操作。</p><h2 id="2-使用教程"><a href="#2-使用教程" class="headerlink" title="2. 使用教程"></a>2. 使用教程</h2><h3 id="2-1-使用步骤"><a href="#2-1-使用步骤" class="headerlink" title="2.1. 使用步骤"></a>2.1. 使用步骤</h3><p>1、首先，此程序基于python 3.8.5版本运行，使用的浏览器为Edge，版本号86.0.622.51 (Official build) (64-bit)，IDE为PyCharm 2020.1.3 (Professional Edition)<br>2、打开命令行，使用pip指令安装selenium<br><code>pip install selenium</code><br>3、通过浏览器官网下载相应的浏览器启动插件，将其设置为系统环境变量(可选)，也可以在程序中自行设置浏览器启动驱动位置，如在E盘的E:\Edgedriver目录，就更改默认的地址 driverUrl = r”E:\Edgedriver\msedgedriver.exe”<br>4、运行程序时，请关闭其他任何可能影响浏览器运行的插件或者软件，如果网络信号不佳，则需要将time.sleep(1)中的数值调大，以等待网页的元素彻底加载成功</p><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><h3 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1. 准备工作"></a>3.1. 准备工作</h3><p>在本程序中，我使用了三个库，分别是selenium（主角），time以及random。<br>其次，设置好自己的浏览器驱动位置以及每日一报链接位置，并填写好自己的账号密码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">myUsername=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的学号</span></span><br><span class="line">myPassword=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的姓名</span></span><br><span class="line">baseUrl=<span class="string">r&#x27;https://selfreport.shu.edu.cn/&#x27;</span> <span class="comment">#默认的每日两报地址</span></span><br><span class="line">driverUrl = <span class="string">r&quot;E:\Edgedriver\msedgedriver.exe&quot;</span> <span class="comment">#浏览器驱动，这里以Edge示例，不同的浏览器可以去官网下载</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="comment">#完成web自动化的一系列操作</span></span><br><span class="line"><span class="keyword">import</span> time <span class="comment">#设置程序等待时间，等待浏览器加载元素完全</span></span><br><span class="line"><span class="keyword">import</span> random <span class="comment">#设置温度随机数</span></span><br></pre></td></tr></table></figure><h3 id="3-2-登录账号"><a href="#3-2-登录账号" class="headerlink" title="3.2. 登录账号"></a>3.2. 登录账号</h3><p>准备好以上步骤以后，我们就可以打开浏览器并对其进行相应的操作。</p><p>输入代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver = webdriver.Edge(driverUrl)<span class="comment">#通过驱动器打开浏览器</span></span><br><span class="line">driver.get(baseUrl)<span class="comment">#访问健康之路链接</span></span><br><span class="line">search_username = driver.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)<span class="comment">#找到用户名位置</span></span><br><span class="line">search_username.send_keys(myUsername)<span class="comment">#填写用户名</span></span><br><span class="line">search_password = driver.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)<span class="comment">#找到密码位置</span></span><br><span class="line">search_password.send_keys(myPassword)<span class="comment">#填写密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;submit&#x27;</span>).click()<span class="comment">#找到元素并且自动点击登录</span></span><br></pre></td></tr></table></figure><p>程序执行时，就会将自己的账号密码自动填入进入下章页面。</p><h3 id="3-3-进入报送历史界面"><a href="#3-3-进入报送历史界面" class="headerlink" title="3.3. 进入报送历史界面"></a>3.3. 进入报送历史界面</h3><p>如图，需要点进报送历史：<br><a href="https://imgchr.com/i/B8AzKH"><img src="https://s1.ax1x.com/2020/10/28/B8AzKH.png" alt="B8AzKH.png"></a></p><p>首先输入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">&#x27;lbReportHistory&#x27;</span>).click()<span class="comment">#找到对应历史报送的按钮，点击</span></span><br></pre></td></tr></table></figure><p>然后即可进入历史界面，在这里每天的报送记录罗列如下：</p><p><a href="https://imgchr.com/i/B8AX8O"><img src="https://s1.ax1x.com/2020/10/28/B8AX8O.png" alt="B8AX8O.png"></a></p><h3 id="3-4-填写对应的信息"><a href="#3-4-填写对应的信息" class="headerlink" title="3.4. 填写对应的信息"></a>3.4. 填写对应的信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击对应的天数：</span></span><br><span class="line"><span class="built_in">object</span> = <span class="built_in">str</span>(date) + item</span><br><span class="line">driver.find_element_by_partial_link_text(<span class="built_in">object</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 勾选承诺项：</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;p1_ChengNuo-inputEl-icon&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写体温，随机在36.0-37.0之间</span></span><br><span class="line">search_temperature = driver.find_element_by_id(<span class="string">&quot;p1_TiWen-inputEl&quot;</span>)</span><br><span class="line">temperature = <span class="built_in">str</span>(random.randint(<span class="number">360</span>, <span class="number">370</span>) / <span class="number">10</span>)</span><br><span class="line">search_temperature.send_keys(temperature)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 勾选状态&quot;良好&quot;</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;fineui_0-inputEl&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当天随申码颜色：&quot;绿色&quot;</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;fineui_7-inputEl-icon&quot;</span>).click()</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_7-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"><span class="comment"># webdriver.ActionChains(driver).move_to_element(element).click(element).perform()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 明天是否到食堂就餐：&quot;早餐，中餐，晚餐&quot;</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_8-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_9-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&#x27;fineui_10-inputEl-icon&#x27;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br></pre></td></tr></table></figure><p>以上代码均是对于填写页面元素的捕捉，并对发现的第一个元素发起提交按钮。<br>在这里，程序代码不能写成如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下操作无法实现，原因应该是元素定位相互覆盖。</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;fineui_8-inputEl-icon&quot;).click()</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;fineui_9-inputEl-icon&quot;).click()</span></span><br><span class="line"><span class="comment"># driver.find_element_bu_id(&quot;fineui_10-inputEl-icon&quot;).click()</span></span><br><span class="line"><span class="comment"># driver.find_element_by_id(&quot;p1_ctl00_btnSubmit&quot;).click()</span></span><br></pre></td></tr></table></figure><p>原因是代码中的元素相互覆盖，无法实现操作<br>最终选择并点击时的效果如下：<br><a href="https://imgchr.com/i/B8AOPK"><img src="https://s1.ax1x.com/2020/10/28/B8AOPK.png" alt="B8AOPK.png"></a></p><h3 id="3-5-点击确认按钮"><a href="#3-5-点击确认按钮" class="headerlink" title="3.5. 点击确认按钮"></a>3.5. 点击确认按钮</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点击提交</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;p1_ctl00_btnSubmit&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 点击确认</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;fineui_14&quot;</span>)</span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;fineui_19&quot;</span>)</span><br><span class="line"><span class="comment"># element = driver.find_element_by_class_name(&quot;f-btn-text&quot;)</span></span><br><span class="line">driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在这里我使用了time.sleep()函数，为了让程序停顿，原页面加载的过程中，会出现提交框晚出现的情况，所以需要让程序“等待”浏览器加载结束，最后填报。</p><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4. 完整代码"></a>4. 完整代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-25 15:24</span></span><br><span class="line"><span class="comment">#@Author : Jiancong Zhu</span></span><br><span class="line"><span class="comment">#@Email : 643601464@qq.com</span></span><br><span class="line"><span class="comment">#@File : release.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line">myUsername=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的学号</span></span><br><span class="line">myPassword=<span class="string">r&#x27;&#x27;</span> <span class="comment">#在此输入你的姓名</span></span><br><span class="line">baseUrl=<span class="string">r&#x27;https://selfreport.shu.edu.cn/&#x27;</span> <span class="comment">#默认的每日两报地址</span></span><br><span class="line">driverUrl = <span class="string">r&quot;E:\Edgedriver\msedgedriver.exe&quot;</span> <span class="comment">#浏览器驱动，这里以Edge示例，不同的浏览器可以去个官网下载</span></span><br><span class="line"><span class="keyword">from</span> selenium</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Hello,&quot;</span>)</span><br><span class="line">    driver = webdriver.Edge(driverUrl)</span><br><span class="line">    driver.get(baseUrl)</span><br><span class="line">    search_username = driver.find_element_by_id(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    search_username.send_keys(myUsername)</span><br><span class="line">    search_password = driver.find_element_by_id(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    search_password.send_keys(myPassword)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;submit&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>,<span class="number">26</span>,<span class="number">1</span>):<span class="comment">#在此修改你想实现的日期，左闭右开，如这里为[19,26)，即19至25号</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> [<span class="string">&#x27;晨报&#x27;</span>,<span class="string">&#x27;晚报&#x27;</span>]:</span><br><span class="line">            <span class="comment"># print(&quot;Hello, world!&quot;)</span></span><br><span class="line">            <span class="comment"># driver = webdriver.Edge(driverUrl)</span></span><br><span class="line">            <span class="comment"># driver.get(baseUrl)</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&#x27;username&#x27;)</span></span><br><span class="line">            <span class="comment"># search_username = driver.find_element_by_id(&#x27;username&#x27;)</span></span><br><span class="line">            <span class="comment"># search_username.send_keys(myUsername)</span></span><br><span class="line">            <span class="comment"># search_password = driver.find_element_by_id(&#x27;password&#x27;)</span></span><br><span class="line">            <span class="comment"># search_password.send_keys(myPassword)</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&#x27;submit&#x27;).click()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 进入报送历史：</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">&#x27;lbReportHistory&#x27;</span>).click()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击对应的天数：</span></span><br><span class="line">            <span class="built_in">object</span> = <span class="built_in">str</span>(date) + item</span><br><span class="line">            driver.find_element_by_partial_link_text(<span class="built_in">object</span>).click()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 勾选承诺项：</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">&quot;p1_ChengNuo-inputEl-icon&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 填写体温，随机在36.0-37.0之间</span></span><br><span class="line">            search_temperature = driver.find_element_by_id(<span class="string">&quot;p1_TiWen-inputEl&quot;</span>)</span><br><span class="line">            temperature = <span class="built_in">str</span>(random.randint(<span class="number">360</span>, <span class="number">370</span>) / <span class="number">10</span>)</span><br><span class="line">            search_temperature.send_keys(temperature)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 勾选状态&quot;良好&quot;</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;fineui_0-inputEl&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 当天随申码颜色：&quot;绿色&quot;</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">&quot;fineui_7-inputEl-icon&quot;</span>).click()</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_7-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            <span class="comment"># webdriver.ActionChains(driver).move_to_element(element).click(element).perform()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 明天是否到食堂就餐：&quot;早餐，中餐，晚餐&quot;</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_8-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_9-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&#x27;fineui_10-inputEl-icon&#x27;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 以下操作无法实现，原因应该是元素定位相互覆盖。</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&quot;fineui_8-inputEl-icon&quot;).click()</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&quot;fineui_9-inputEl-icon&quot;).click()</span></span><br><span class="line">            <span class="comment"># driver.find_element_bu_id(&quot;fineui_10-inputEl-icon&quot;).click()</span></span><br><span class="line">            <span class="comment"># driver.find_element_by_id(&quot;p1_ctl00_btnSubmit&quot;).click()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 点击提交</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;p1_ctl00_btnSubmit&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 点击确认</span></span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;fineui_14&quot;</span>)</span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">            element = driver.find_element_by_id(<span class="string">&quot;fineui_19&quot;</span>)</span><br><span class="line">            <span class="comment"># element = driver.find_element_by_class_name(&quot;f-btn-text&quot;)</span></span><br><span class="line">            driver.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, element)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    driver.quit()</span><br><span class="line">    print(<span class="string">&quot;world!&quot;</span>) <span class="comment"># 输出Hello,world! 完美的结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>: <span class="comment">#当程序执行时</span></span><br><span class="line">    main() <span class="comment">#开始</span></span><br></pre></td></tr></table></figure><h2 id="5-写在最后"><a href="#5-写在最后" class="headerlink" title="5. 写在最后"></a>5. 写在最后</h2><p>该项目从入门学习到实现用时一天，期间在调试的过程中，因为提交框的加载忘记设置延时，但是debug过程中，因为单步调试给了浏览器足够的加载时间，以至于此bug查了很久，在此感谢各网站的博主给出的经验。本着测试web自动化的初衷，加之校园的日填写网页结构较为简单，无复杂的html结构或者css样式，是个十分适合练习web自动化的网站。当然，为了实现最终结果也是走了不少弯路，这里感谢网站<code>http://www.testclass.net/</code>的免费教程，为此工程完成提供了不少帮助。此项目在GitHub完全开源，仅供学习使用，请不要为了省却时间，选择欺报或者瞒报，而放松了对疫情的警惕。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="脚本" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="web自动化" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="python" scheme="http://example.com/categories/%E8%84%9A%E6%9C%AC/web%E8%87%AA%E5%8A%A8%E5%8C%96/python/"/>
    
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
    <category term="web自动化" scheme="http://example.com/tags/web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>WEB自动化笔记</title>
    <link href="http://example.com/2020/10/28/WEB%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/28/WEB%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-28T03:13:09.000Z</published>
    <updated>2020-12-22T06:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Selenium3实现网页自动化"><a href="#Selenium3实现网页自动化" class="headerlink" title="Selenium3实现网页自动化"></a>Selenium3实现网页自动化</h1><h2 id="1-初步工作"><a href="#1-初步工作" class="headerlink" title="1.初步工作"></a>1.初步工作</h2><h3 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h3><p>安装Selenium</p><p>本文使用的是python3.8.4 64bit</p><p>使用pip指令安装selenium</p><p><code>pip install selenium</code></p><h3 id="1-2-设置浏览器驱动"><a href="#1-2-设置浏览器驱动" class="headerlink" title="1.2 设置浏览器驱动"></a>1.2 设置浏览器驱动</h3><p>首先设置浏览器的地址，手动创建一个存放浏览器驱动的目录，如： E:\driver , 将下载的浏览器驱动文件（例如：chromedriver、geckodriver）丢到该目录下。</p><p>我的电脑–&gt;属性–&gt;系统设置–&gt;高级–&gt;环境变量–&gt;系统变量–&gt;Path，将“E:\driver”目录添加到Path的值中。</p><p>验证不同的浏览器驱动是否正常使用。</p><p>from selenium import webdriver</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver = webdriver.Firefox()   <span class="comment"># Firefox浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()    <span class="comment"># Chrome浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Ie()        <span class="comment"># Internet Explorer浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Edge()      <span class="comment"># Edge浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Opera()     <span class="comment"># Opera浏览器</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.PhantomJS()   <span class="comment"># PhantomJS</span></span><br></pre></td></tr></table></figure><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h2><h3 id="2-1-元素定位"><a href="#2-1-元素定位" class="headerlink" title="2.1 元素定位"></a>2.1 元素定位</h3><p>Selenium提供了8种定位方式。</p><blockquote><p>id<br>name<br>class name<br>name<br>link text<br>partial link text<br>xpath<br>css selector</p></blockquote><p>这8种定位方式在Python selenium中所对应的方法为：</p><blockquote><p>find_element_by_id()<br>find_element_by_name()<br>find_element_by_class_name()<br>find_element_by_tag_name()<br>find_element_by_link_text()<br>find_element_by_partial_link_text()<br>find_element_by_xpath()<br>find_element_by_css_selector()</p></blockquote><p>定位使用的方法</p><p>假如我们有一个Web页面，通过前端工具（如，Firebug）查看到一个元素的属性是这样的。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">link</span>=<span class="string">&quot;#0000cc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;result_logo&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">onmousedown</span>=<span class="string">&quot;return c(&#123;&#x27;fm&#x27;:&#x27;tab&#x27;,&#x27;tab&#x27;:&#x27;logo&#x27;&#125;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;fm&quot;</span> <span class="attr">name</span>=<span class="string">&quot;f&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/s&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;soutu-btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;kw&quot;</span> <span class="attr">class</span>=<span class="string">&quot;s_ipt&quot;</span> <span class="attr">name</span>=<span class="string">&quot;wd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;255&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span>输入框</span><br></pre></td></tr></table></figure><p>我们的目的是要定位input标签的输入框。</p><ul><li>通过id定位:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_id(<span class="string">&quot;kw&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过name定位:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_name(<span class="string">&quot;wd&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过class name定位:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过tag name定位:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_tag_name(<span class="string">&quot;input&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>1、 通过xpath定位，xpath定位有多种写法，这里列几个常用写法: **<br>    Xpath支持ID、Class、Name定位功能，以以下三者为例：<br>　1）、通过ID定位<br>　　　　//<em>[@id=’kw’]<br>　2）、通过Class定位<br>　　　　//</em>[@class=’class_name’]<br>　3）、 通过Name定位<br>　　　　//<em>[@name=’name’]<br><strong>2、如果标签没有ID、Class、Name三总属性，Xpath还支持属性定位功能</strong><br>　　　　@ 代表以属性定位，后面可以接标签中任意属性<br>　　　　//</em>[@other=’attribute’]<br>**3、当标签的属性重复时，Xpath提供了通过标签来进行过滤</strong><br>　　　　将 * 换位任意标签名，则可根据标签进行筛选<br>　　　　//input[@placeholder=’用户名’]<br><strong>4、当标签页重复时，Xpath提供了层级过滤</strong><br>    例如：找不到儿子，那么就先找他的爸爸，实在不行可以再找他的爷爷<br>    1）、支持通过 / 进行层级递进，找到符合层级关系的标签<br>　　　    //form/div/input[@placeholder=”用户名”]<br>    2）、当层级都重复时，可以通过单个层级的属性进行定位<br> 　      　//form/div[@class=’login-user’]/input<br><strong>5、一个元素它的兄弟元素跟它的标签一样，这时候无法通过层级定位到。因为都是一个父亲生的，多胞胎兄弟。Xpath提供了索引过滤</strong><br>　　　　通过索引，在List中定位属性，与python的索引有些差别，Xpath从1开始<br>　　　　//select[@name=’city’][1]/option[1]<br><strong>6、上面几种如果都用上了之后还重复的话，我们就可以使用Xpath提供的终极神器，逻辑运算定位。and 或 or</strong>　　　<br>　1）、通过and来缩小过滤的范围，只有条件都符合时才能定位到<br> 　　　　　//select[@name=’city’ and @size=’4’ and @multiple=”multiple”]<br>　2）、or就相反了，只要这些筛选中，其中一个出现那么久匹配到了<br>　　　　　　//select[@name=’city’ or @size=’4’]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//*[@name=&#x27;wd&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//input[@class=&#x27;s_ipt&#x27;]&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;/html/body/form/span/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//span[@class=&#x27;soutu-btn&#x27;]/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//form[@id=&#x27;form&#x27;]/span/input&quot;</span>)</span><br><span class="line">dr.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27; and @name=&#x27;wd&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过css定位，css定位有多种写法，这里列几个常用写法:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;[name=wd]&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;.s_ipt&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;html &gt; body &gt; form &gt; span &gt; input&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;span.soutu-btn&gt; input#kw&quot;</span>)</span><br><span class="line">dr.find_element_by_css_selector(<span class="string">&quot;form#form &gt; span &gt; input&quot;</span>)</span><br></pre></td></tr></table></figure><p>接下来，我们的页面上有一组文本链接。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://news.baidu.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_trnews&quot;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mnav&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.hao123.com&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tj_trhao123&quot;</span>&gt;</span>hao123<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过link text定位:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_link_text(<span class="string">&quot;新闻&quot;</span>)</span><br><span class="line">dr.find_element_by_link_text(<span class="string">&quot;hao123&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>通过link text定位:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;新&quot;</span>)</span><br><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;hao&quot;</span>)</span><br><span class="line">dr.find_element_by_partial_link_text(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-浏览器控制"><a href="#2-2-浏览器控制" class="headerlink" title="2.2 浏览器控制"></a>2.2 浏览器控制</h3><ol><li>控制浏览器大小</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.set_window_size(<span class="number">480</span>, <span class="number">800</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>前进，后退</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.forward()</span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure><ol start="3"><li>刷新页面</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.refresh()</span><br></pre></td></tr></table></figure><h3 id="2-3-模拟点击和输入"><a href="#2-3-模拟点击和输入" class="headerlink" title="2.3 模拟点击和输入"></a>2.3 模拟点击和输入</h3><p>点击和输入<br>前面我们已经学习了定位元素， 定位只是第一步， 定位之后需要对这个元素进行操作， 或单击（按钮） 或输入（输入框） ， 下面就来认识 WebDriver 中最常用的几个方法：</p><p>clear()： 清除文本。</p><p>send_keys (value)： 模拟按键输入。</p><p>click()：    单击元素。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>提交<br>submit()，<br>submit()方法用于提交表单。 例如， 在搜索框输入关键字之后的“回车” 操作， 就可以通过该方法模拟。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">search_text = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>)</span><br><span class="line">search_text.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">search_text.submit()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>有时候 submit()可以与 click()方法互换来使用， submit()同样可以提交一个按钮， 但 submit()的应用范围远不及 click()广泛。</p><p>其他常用方法<br>size： 返回元素的尺寸。</p><p>text： 获取元素的文本。</p><p>get_attribute(name)： 获得属性值。</p><p>is_displayed()： 设置该元素是否用户可见。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得输入框的尺寸</span></span><br><span class="line">size = driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).size</span><br><span class="line">print(size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回百度页面底部备案信息</span></span><br><span class="line">text = driver.find_element_by_id(<span class="string">&quot;cp&quot;</span>).text</span><br><span class="line">print(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回元素的属性值， 可以是 id、 name、 type 或其他任意属性</span></span><br><span class="line">attribute = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).get_attribute(<span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">print(attribute)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回元素的结果是否可见， 返回结果为 True 或 False</span></span><br><span class="line">result = driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).is_displayed()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>{‘width’: 500, ‘height’: 22}<br>©2015 Baidu 使用百度前必读 意见反馈 京 ICP 证 030173 号<br>text<br>True<br>执行上面的程序并查看结果： size 方法用于获取百度输入框的宽、 高， text 方法用于获得百度底部的备案信息， get_attribute()用于获得百度输入的 type 属性的值， is_displayed()用于返回一个元素是否可见， 如果可见则返回 True， 否则返回 False。</p><h3 id="2-4-鼠标操作"><a href="#2-4-鼠标操作" class="headerlink" title="2.4 鼠标操作"></a>2.4 鼠标操作</h3><p>在 WebDriver 中， 将这些关于鼠标操作的方法封装在 ActionChains 类提供。</p><p>ActionChains 类提供了鼠标操作的常用方法：</p><p>perform()： 执行所有 ActionChains 中存储的行为；</p><p>context_click()： 右击；</p><p>double_click()： 双击；</p><p>drag_and_drop()： 拖动；</p><p>move_to_element()： 鼠标悬停。</p><p>鼠标悬停操作</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 引入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.cn&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line">above = driver.find_element_by_link_text(<span class="string">&quot;设置&quot;</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(above).perform()</span><br></pre></td></tr></table></figure><p>……</p><p>from selenium.webdriver import ActionChains<br>导入提供鼠标操作的 ActionChains 类。</p><p>ActionChains(driver)<br>调用 ActionChains()类， 将浏览器驱动 driver 作为参数传入。</p><p>move_to_element(above)<br>context_click()方法用于模拟鼠标右键操作， 在调用时需要指定元素定位。</p><p>perform()<br>执行所有 ActionChains 中存储的行为， 可以理解成是对整个操作的提交动作。</p><h3 id="2-5-键盘操作"><a href="#2-5-键盘操作" class="headerlink" title="2.5 键盘操作"></a>2.5 键盘操作</h3><p>Keys()类提供了键盘上几乎所有按键的方法。 前面了解到， send_keys()方法可以用来模拟键盘输入， 除此 之外， 我们还可以用它来输入键盘上的按键， 甚至是组合键， 如 Ctrl+A、 Ctrl+C 等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 引入 Keys 模块</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入框输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;seleniumm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除多输入的一个 m</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.BACK_SPACE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入空格键+“教程”</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.SPACE)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;教程&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+a 全选输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+x 剪切输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+v 粘贴内容到输入框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL, <span class="string">&#x27;v&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过回车键来代替单击操作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).send_keys(Keys.ENTER)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>需要说明的是， 上面的脚本没有什么实际意义， 仅向我们展示模拟键盘各种按键与组合键的用法。</p><p>from selenium.webdriver.common.keys import Keys<br>在使用键盘按键方法前需要先导入 keys 类。</p><p>以下为常用的键盘操作：</p><table><thead><tr><th>send_keys(Keys.BACK_SPACE)</th><th>删除键（BackSpace）</th></tr></thead><tbody><tr><td>send_keys(Keys.SPACE)</td><td>空格键(Space)</td></tr><tr><td>send_keys(Keys.TAB)</td><td>制表键(Tab)</td></tr><tr><td>send_keys(Keys.ESCAPE)</td><td>回退键（Esc）</td></tr><tr><td>send_keys(Keys.ENTER)</td><td>回车键（Enter）</td></tr><tr><td>send_keys(Keys.CONTROL,’a’)</td><td>全选（Ctrl+A）</td></tr><tr><td>send_keys(Keys.CONTROL,’c’)</td><td>复制（Ctrl+C）</td></tr><tr><td>send_keys(Keys.CONTROL,’x’)</td><td>剪切（Ctrl+X）</td></tr><tr><td>send_keys(Keys.CONTROL,’v’)</td><td>粘贴（Ctrl+V）</td></tr><tr><td>send_keys(Keys.F1)</td><td>键盘 F1</td></tr><tr><td>send_keys(Keys.F12)</td><td>键盘 F12</td></tr></tbody></table><h2 id="3-事件处理"><a href="#3-事件处理" class="headerlink" title="3. 事件处理"></a>3. 事件处理</h2><h3 id="3-1-断言判断"><a href="#3-1-断言判断" class="headerlink" title="3.1 断言判断"></a>3.1 断言判断</h3><p>不管是在做功能测试还是自动化测试，最后一步需要拿实际结果与预期进行比较。这个比较的称之为断言。</p><p>我们通常可以通过获取title 、URL和text等信息进行断言。text方法在前面已经讲过，它用于获取标签对之间的文本信息。 下面同样以百度为例，介绍如何获取这些信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;Before search================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前页面title</span></span><br><span class="line">title = driver.title</span><br><span class="line">print(title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前页面URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line">print(now_url)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;After search================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次打印当前页面title</span></span><br><span class="line">title = driver.title</span><br><span class="line">print(title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前页面URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line">print(now_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取结果数目</span></span><br><span class="line">user = driver.find_element_by_class_name(<span class="string">&#x27;nums&#x27;</span>).text</span><br><span class="line">print(user)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>脚本运行结果如下：</p><p>Before search================<br>百度一下，你就知道<br><a href="https://www.baidu.com/">https://www.baidu.com/</a><br>After search================<br>selenium_百度搜索<br><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx</a>…<br>搜索工具<br>百度为您找到相关结果约61,100,000个<br>title：用于获得当前页面的标题。</p><p>current_url：用户获得当前页面的URL。</p><p>text：获取搜索条目的文本信息。</p><h3 id="3-2-元素等待"><a href="#3-2-元素等待" class="headerlink" title="3.2 元素等待"></a>3.2 元素等待</h3><p>WebDriver提供了两种类型的等待：显式等待和隐式等待。</p><p>显式等待<br>显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常（TimeoutException）。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">                      EC.presence_of_element_located((By.ID, <span class="string">&quot;kw&quot;</span>))</span><br><span class="line">                      )</span><br><span class="line">element.send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>WebDriverWait类是由WebDirver 提供的等待方法。在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常。具体格式如下：</p><p>WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)<br>driver ：浏览器驱动。</p><p>timeout ：最长超时时间，默认以秒为单位。</p><p>poll_frequency ：检测的间隔（步长）时间，默认为0.5S。</p><p>ignored_exceptions ：超时后的异常信息，默认情况下抛NoSuchElementException异常。</p><p>WebDriverWait()一般由until()或until_not()方法配合使用，下面是until()和until_not()方法的说明。</p><p>until(method, message=‘’)<br>调用该方法提供的驱动程序作为一个参数，直到返回值为True。</p><p>until_not(method, message=‘’)<br>调用该方法提供的驱动程序作为一个参数，直到返回值为False。</p><p>在本例中，通过as关键字将expected_conditions 重命名为EC，并调用presence_of_element_located()方法判断元素是否存在。</p><p>隐式等待<br>WebDriver提供了implicitly_wait()方法来实现隐式等待，默认设置为0。它的用法相对来说要简单得多。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置隐式等待为10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(ctime())</span><br><span class="line">    driver.find_element_by_id(<span class="string">&quot;kw22&quot;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(ctime())</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p>implicitly_wait() 默认参数的单位为秒，本例中设置等待时长为10秒。首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行；如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第6秒定位到了元素则继续执行，若直到超出设置时长（10秒）还没有定位到元素，则抛出异常。</p><h3 id="3-3-元素定位"><a href="#3-3-元素定位" class="headerlink" title="3.3 元素定位"></a>3.3 元素定位</h3><p>WebDriver还提供了8种用于定位一组元素的方法。</p><p>find_elements_by_id()<br>find_elements_by_name()<br>find_elements_by_class_name()<br>find_elements_by_tag_name()<br>find_elements_by_link_text()<br>find_elements_by_partial_link_text()<br>find_elements_by_xpath()<br>find_elements_by_css_selector()<br>定位一组元素的方法与定位单个元素的方法类似，唯一的区别是在单词element后面多了一个s表示复数。</p><p>接下来通过例子演示定位一组元素的使用：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位一组元素</span></span><br><span class="line">texts = driver.find_elements_by_xpath(<span class="string">&#x27;//div/h3/a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环遍历出每一条搜索结果的标题</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> texts:</span><br><span class="line">    print(t.text)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>程序运行结果：</p><p>Selenium - Web Browser Automation<br>官网<br>功能自动化测试工具——Selenium篇<br>selenium + python自动化测试环境搭建 - 虫师 - 博客园<br>selenium是什么?_百度知道<br>怎样开始用selenium进行自动化测试(个人总结)_百度经验<br>Selenium_百度百科<br>selenium_百度翻译<br>Selenium官网教程_selenium自动化测试实践_Selenium_领测软件测试网<br>Selenium(浏览器自动化测试框架)_百度百科<br>自动化基础普及之selenium是啥? - 虫师 - 博客园<br>python十大主流开源框架 「菜鸟必看」</p><h3 id="3-4-多表单切换"><a href="#3-4-多表单切换" class="headerlink" title="3.4 多表单切换"></a>3.4 多表单切换</h3><p>在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位。这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;x-URS-iframe&quot;</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>126邮箱登录框的结构大概是这样子的，想要操作登录框必须要先切换到iframe表单。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.126.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;x-URS-iframe&#x27;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;email&quot;</span>).send_keys(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).clear()</span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;password&quot;</span>).send_keys(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;dologin&quot;</span>).click()</span><br><span class="line">driver.switch_to.default_content()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line">switch_to.frame() 默认可以直接取表单的<span class="built_in">id</span> 或name属性。如果iframe没有可用的<span class="built_in">id</span>和name属性，则可以通过下面的方式进行定位。</span><br></pre></td></tr></table></figure><p>……<br>#先通过xpth定位到iframe</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xf = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;x-URS-iframe&quot;]&#x27;</span>)</span><br></pre></td></tr></table></figure><p>#再将定位对象传给switch_to.frame()方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.switch_to.frame(xf)</span><br></pre></td></tr></table></figure><p>……</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">driver.switch_to.parent_frame()</span><br></pre></td></tr></table></figure><p>除此之外，在进入多级表单的情况下，还可以通过switch_to.default_content()跳回最外层的页面。</p><h3 id="3-5-多窗口切换"><a href="#3-5-多窗口切换" class="headerlink" title="3.5 多窗口切换"></a>3.5 多窗口切换</h3><p>在页面操作过程中有时候点击某个链接会弹出新的窗口，这时就需要主机切换到新打开的窗口上进行操作。WebDriver提供了switch_to.window()方法，可以实现在不同的窗口之间切换。 以百度首页和百度注册页为例，在两个窗口之间的切换如下图。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得百度搜索窗口句柄</span></span><br><span class="line">sreach_windows = driver.current_window_handle</span><br><span class="line"></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&#x27;登录&#x27;</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;立即注册&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前所有打开的窗口的句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入注册窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</span><br><span class="line">    <span class="keyword">if</span> handle != sreach_windows:</span><br><span class="line">        driver.switch_to.window(handle)</span><br><span class="line">        print(<span class="string">&#x27;now register window!&#x27;</span>)</span><br><span class="line">        driver.find_element_by_name(<span class="string">&quot;account&quot;</span>).send_keys(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        driver.find_element_by_name(<span class="string">&#x27;password&#x27;</span>).send_keys(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># ……</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>在本例中所涉及的新方法如下：</p><ul><li>current_window_handle：获得当前窗口句柄。</li><li>window_handles：返回所有窗口的句柄到当前会话。</li><li>switch_to.window()：用于切换到相应的窗口，与上一节的switch_to.frame()类似，前者用于不同窗口的切换，后者用于不同表单之间的切换。</li></ul><h3 id="3-6-警告框处理"><a href="#3-6-警告框处理" class="headerlink" title="3.6 警告框处理"></a>3.6 警告框处理</h3><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用text/accept/dismiss/ send_keys等方法进行操作。</p><ul><li>text：返回 alert/confirm/prompt 中的文字信息。</li><li>accept()：接受现有警告框。</li><li>dismiss()：解散现有警告框。</li><li>send_keys(keysToSend)：发送文本至警告框。keysToSend：将文本发送至警告框。</li></ul><p>如下图，百度搜索设置弹出的窗口是不能通过前端工具对其进行定位的，这个时候就可以通过switch_to_alert()方法接受这个弹窗。 <img src="http://orru5lls3.bkt.clouddn.com/alert_windows.png" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">link = driver.find_element_by_link_text(<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(link).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告框</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>通过switch_to_alert()方法获取当前页面上的警告框，并使用accept()方法接受警告框。</p><h3 id="3-7-警告框处理"><a href="#3-7-警告框处理" class="headerlink" title="3.7 警告框处理"></a>3.7 警告框处理</h3><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用text/accept/dismiss/ send_keys等方法进行操作。</p><ul><li>text：返回 alert/confirm/prompt 中的文字信息。</li><li>accept()：接受现有警告框。</li><li>dismiss()：解散现有警告框。</li><li>send_keys(keysToSend)：发送文本至警告框。keysToSend：将文本发送至警告框。</li></ul><p>如下图，百度搜索设置弹出的窗口是不能通过前端工具对其进行定位的，这个时候就可以通过switch_to_alert()方法接受这个弹窗。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">link = driver.find_element_by_link_text(<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(link).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">&quot;prefpanelgo&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告框</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>通过switch_to_alert()方法获取当前页面上的警告框，并使用accept()方法接受警告框。</p><h3 id="3-8-下拉框选择"><a href="#3-8-下拉框选择" class="headerlink" title="3.8 下拉框选择"></a>3.8 下拉框选择</h3><p>有时我们会碰到下拉框，WebDriver提供了Select类来处理下拉框。 如百度搜索设置的下拉框。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&#x27;设置&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">&quot;搜索设置&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">&quot;//select[@id=&#x27;nr&#x27;]&quot;</span>)</span><br><span class="line">Select(sel).select_by_value(<span class="string">&#x27;50&#x27;</span>)  <span class="comment"># 显示50条</span></span><br><span class="line"><span class="comment"># ……</span></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>Select类用于定位select标签。</p><p>select_by_value() 方法用于定位下接选项中的value值。</p><h2 id="4-特殊处理"><a href="#4-特殊处理" class="headerlink" title="4. 特殊处理"></a>4. 特殊处理</h2><h3 id="4-1-文件上传"><a href="#4-1-文件上传" class="headerlink" title="4.1 文件上传"></a>4.1 文件上传</h3><p>对于通过input标签实现的上传功能，可以将其看作是一个输入框，即通过send_keys()指定本地文件路径的方式实现文件上传。</p><p>创建upfile.html文件，代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>upload_file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row-fluid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;span6 well&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>upload_file<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.js&quot;</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>通过浏览器打开upfile.html文件.</p><p>接下来通过send_keys()方法来实现文件上传。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">file_path = <span class="string">&#x27;file:///&#x27;</span> + os.path.abspath(<span class="string">&#x27;upfile.html&#x27;</span>)</span><br><span class="line">driver.get(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位上传按钮，添加本地文件</span></span><br><span class="line">driver.find_element_by_name(<span class="string">&quot;file&quot;</span>).send_keys(<span class="string">&#x27;D:\\upload_file.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="4-2-cookies处理"><a href="#4-2-cookies处理" class="headerlink" title="4.2 cookies处理"></a>4.2 cookies处理</h3><p>有时候我们需要验证浏览器中cookie是否正确，因为基于真实cookie的测试是无法通过白盒和集成测试进行的。WebDriver提供了操作Cookie的相关方法，可以读取、添加和删除cookie信息。</p><p>WebDriver操作cookie的方法：</p><ul><li>get_cookies()： 获得所有cookie信息。</li><li>get_cookie(name)： 返回字典的key为“name”的cookie信息。</li><li>add_cookie(cookie_dict) ： 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。</li><li>delete_cookie(name,optionsString)：删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”。</li><li>delete_all_cookies()： 删除所有cookie信息。</li></ul><p>下面通过get_cookies()来获取当前浏览器的cookie信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.youdao.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得cookie信息</span></span><br><span class="line">cookie= driver.get_cookies()</span><br><span class="line"><span class="comment"># 将获得cookie的信息打印</span></span><br><span class="line">print(cookie)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>从执行结果可以看出，cookie数据是以字典的形式进行存放的。知道了cookie的存放形式，接下来我们就可以按照这种形式向浏览器中写入cookie信息。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.youdao.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向cookie的name 和value中添加会话信息</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;key-aaaaaaa&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: <span class="string">&#x27;value-bbbbbb&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历cookies中的name 和value信息并打印，当然还有上面添加的信息</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    print(<span class="string">&quot;%s -&gt; %s&quot;</span> % (cookie[<span class="string">&#x27;name&#x27;</span>], cookie[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>======================== RESTART: =========================</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YOUDAO_MOBILE_ACCESS_TYPE -&gt; 1</span><br><span class="line">_PREF_ANONYUSER__MYTH -&gt; aGFzbG9nZ2VkPXRydWU&#x3D;</span><br><span class="line">OUTFOX_SEARCH_USER_ID -&gt; -1046383847@218.17.158.115</span><br><span class="line">JSESSIONID -&gt; abc7qSE_SBGsVgnVLBvcu</span><br><span class="line">key-aaaaaaa -&gt; value-bbbbbb</span><br></pre></td></tr></table></figure><p>从执行结果可以看到，最后一条cookie信息是在脚本执行过程中通过add_cookie()方法添加的。通过遍历得到所有的cookie信息，从而找到key为“name”和“value”的特定cookie的value。</p><h3 id="4-3-js处理"><a href="#4-3-js处理" class="headerlink" title="4.3 js处理"></a>4.3 js处理</h3><p>虽然WebDriver提供了操作浏览器的前进和后退方法，但对于浏览器滚动条并没有提供相应的操作方法。在这种情况下，就可以借助JavaScript来控制浏览器的滚动条。WebDriver提供了execute_script()方法来执行JavaScript代码。</p><p>用于调整浏览器滚动条位置的JavaScript代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- window.scrollTo(左边距,上边距); --&gt;</span><br><span class="line">window.scrollTo(0,450);</span><br></pre></td></tr></table></figure><p>window.scrollTo()方法用于设置浏览器窗口滚动条的水平和垂直位置。方法的第一个参数表示水平的左间距，第二个参数表示垂直的上边距。其代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问百度</span></span><br><span class="line">driver=webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器窗口大小</span></span><br><span class="line">driver.set_window_size(<span class="number">500</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过javascript设置浏览器窗口的滚动条位置</span></span><br><span class="line">js=<span class="string">&quot;window.scrollTo(100,450);&quot;</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>通过浏览器打开百度进行搜索，并且提前通过set_window_size()方法将浏览器窗口设置为固定宽高显示，目的是让窗口出现水平和垂直滚动条。然后通过execute_script()方法执行JavaScripts代码来移动滚动条的位置。</p><h3 id="4-4-窗口截图"><a href="#4-4-窗口截图" class="headerlink" title="4.4 窗口截图"></a>4.4 窗口截图</h3><p>自动化用例是由程序去执行的，因此有时候打印的错误信息并不十分明确。如果在脚本执行出错的时候能对当前窗口截图保存，那么通过图片就可以非常直观地看出出错的原因。WebDriver提供了截图函数get_screenshot_as_file()来截取当前窗口。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;kw&#x27;</span>).send_keys(<span class="string">&#x27;selenium&#x27;</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">&#x27;su&#x27;</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取当前窗口，并指定截图图片的保存位置</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&quot;E:\\baidu_img.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>脚本运行完成后打开E盘，就可以找到baidu_img.jpg图片文件了。</p><h3 id="4-5-窗口关闭"><a href="#4-5-窗口关闭" class="headerlink" title="4.5 窗口关闭"></a>4.5 窗口关闭</h3><p>在前面的例子中我们一直使用quit()方法，其含义为退出相关的驱动程序和关闭所有窗口。除此之外，WebDriver还提供了close()方法，用来关闭当前窗口。例多窗口的处理，在用例执行的过程中打开了多个窗口，我们想要关闭其中的某个窗口，这时就要用到close()方法进行关闭了。</p><ul><li>close() 关闭单个窗口</li><li>quit() 关闭所有窗口</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> <span class="string">https://s1.ax1x.com/2020/10/28/Bl2uBF.jpg</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">作者:</span> <span class="string">Jerry</span></span><br><span class="line"><span class="string">連結:</span> <span class="string">https://demo.jerryc.me/posts/4aa8abbe/#%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A0%82</span></span><br><span class="line"><span class="string">來源:</span> <span class="string">Butterfly</span></span><br><span class="line"><span class="string">著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="Selenium" scheme="http://example.com/tags/Selenium/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="自动化" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python数据分析笔记</title>
    <link href="http://example.com/2020/10/25/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/25/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-25T11:13:09.000Z</published>
    <updated>2020-11-09T01:24:28.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="创建数组对象"><a href="#创建数组对象" class="headerlink" title="创建数组对象"></a>创建数组对象</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=np.array([<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>])</span><br><span class="line">print(name.ndim)<span class="comment">#维数</span></span><br><span class="line">print(name.size)<span class="comment">#大小</span></span><br></pre></td></tr></table></figure><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li><p>创建</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">name=np.array([[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>],[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>]])</span><br></pre></td></tr></table></figure></li><li><p>查看属性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(name.ndim)<span class="comment">#维数，也可以说是矩阵的秩</span></span><br><span class="line">print(name.size)<span class="comment">#大小</span></span><br><span class="line">print(name.shape)<span class="comment">#行数和列数</span></span><br><span class="line">print(name.dtype)<span class="comment">#查看数据类型</span></span><br></pre></td></tr></table></figure></li><li><p>访问下标</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(name[<span class="number">2</span>])<span class="comment">#索引为[0,n-1]</span></span><br><span class="line">print(name[<span class="number">-3</span>])<span class="comment">#索引为[-n,-1]，表示倒数</span></span><br></pre></td></tr></table></figure><ol start="4"><li>切片(slicing)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>]]:<span class="comment">#表示下标1，2和下标2，4#如果使用:，则表示所有的行和列</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name[<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">4</span>]:<span class="comment">#表示下标1，2和下标2，4#如果使用:，则表示所有的行和列</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li>条件筛选</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(name[(name==<span class="number">1</span>)|(name==<span class="number">2</span>)])</span><br></pre></td></tr></table></figure><ol start="6"><li>创建多维数组<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)<span class="comment">#生成1-9之间的连续的数组</span></span><br><span class="line">a=np.arange(<span class="number">0</span>,<span class="number">15</span>).reshape(<span class="number">3</span>,<span class="number">5</span>)<span class="comment">#将一维数组转为二维数组</span></span><br><span class="line">a=np.zeros((<span class="number">3</span>,<span class="number">4</span>))<span class="comment">#生成3*4的为0的数组</span></span><br><span class="line">a=np.ones((<span class="number">4</span>,<span class="number">3</span>))<span class="comment">#生成4*3的为1的数组</span></span><br></pre></td></tr></table></figure></li><li>多维数组运算<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.ones((<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">a=a*<span class="number">5</span><span class="comment">#生成全部为5的数组</span></span><br><span class="line">a=a+<span class="number">3</span><span class="comment">#生成全部为4的数组</span></span><br></pre></td></tr></table></figure><h2 id="常用函数、属性"><a href="#常用函数、属性" class="headerlink" title="常用函数、属性"></a>常用函数、属性</h2></li><li>函数<table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>np.array(列表)</td><td>通过列表创建一个数组对象</td></tr><tr><td>np.arange(起始, 结束, 步长)</td><td>创建一个等差数组(注意区间是左闭右开的)</td></tr><tr><td>np.zeros( (m, n) )</td><td>创建一个m行n列的全零数组</td></tr><tr><td>np.ones( (m, n) )</td><td>创建一个m行n列的全一数组</td></tr><tr><td>np.eye(m)</td><td>创建一个m阶单位方阵</td></tr></tbody></table></li><li>常用对象属性<table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>my_array.ndim</td><td>维数</td></tr><tr><td>my_array.size</td><td>大小</td></tr><tr><td>my_array.shape</td><td>以元组形式返回my_array的(行, 列)</td></tr><tr><td>my_array.dtype</td><td>返回my_array中元素的数据类型</td></tr></tbody></table></li></ol><p>*注意库函数和对象属性的不同，表一中np.是固定的，指的是numpy库；而表二中my_array.xxx()中的my_array要改成你对应的数组的名字（即实例名）。</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片</p><blockquote><p>我们将选出一个数组的某一行、某一列或者某一个位置上的元素的操作成为“切片”<br>我们先来讨论二维数组的切片:<br>最基本的格式是：my_array[m, n]，其中m和n可以为整数 列表 还可以是冒号:<br>当m和n是整数时，表示选取m行n列的那个数。<br>当m和n其中一个是冒号的时候，表明选中对应的所有行或列。例如my_array[ :, n]表示选择整个第n列</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = np.arange(<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">print(<span class="string">&#x27;切片前：&#x27;</span>)</span><br><span class="line">print(arr)</span><br><span class="line">m = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">n = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;切片后：&#x27;</span>)</span><br><span class="line">print(arr[m, n])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">切片前：</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [4 5 6]</span></span><br><span class="line"><span class="string"> [7 8 9]]</span></span><br><span class="line"><span class="string">切片后：</span></span><br><span class="line"><span class="string">[2 6]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="通用函数func"><a href="#通用函数func" class="headerlink" title="通用函数func"></a>通用函数func</h2><ol><li>常用的一元函数<table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>abs、fabs</td><td>计算整数、浮点数、复数的绝对值</td></tr><tr><td>sqrt</td><td>计算平方根</td></tr><tr><td>square</td><td>计算平方</td></tr><tr><td>exp</td><td>计算指数</td></tr><tr><td>log、log10</td><td>计算自然对数、底数为10的log</td></tr><tr><td>sign</td><td>计算正负号</td></tr><tr><td>ceil、floor</td><td>天花板、地板函数</td></tr><tr><td>sin、cos、cosh…</td><td>三角函数</td></tr></tbody></table></li></ol><hr><ol start="2"><li><p>常用的二元函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>add</td><td>将对应的元素相加</td></tr><tr><td>subtract</td><td>从第一个数组中减去第二个数组的元素</td></tr><tr><td>multiply</td><td>数组元素相乘</td></tr><tr><td>divide</td><td>数组元素相除</td></tr><tr><td>power</td><td>计算幂次</td></tr><tr><td>mod</td><td>计算模</td></tr><tr><td>copysign</td><td>将第二个数组的符号赋值给第一个数组</td></tr><tr><td>equal、not_equal</td><td>执行元素比较，返回布尔类型的数组</td></tr></tbody></table></li><li><p>聚集函数</p></li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>sum</td><td>求和</td></tr><tr><td>mean</td><td>算数平均值</td></tr><tr><td>min、max</td><td>最大值和最小值</td></tr><tr><td>argmin、argmax</td><td>最大值和最小值的索引</td></tr><tr><td>cumsum</td><td>从0开始累加</td></tr><tr><td>cumprod</td><td>从1开始累乘</td></tr></tbody></table><ol start="4"><li>随机数组生成函数</li></ol><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>random</td><td>随机产生[0,1)</td></tr><tr><td>randint</td><td>随机生成给定范围内的一组整数</td></tr><tr><td>uniform</td><td>随机生成给定范围内服从均匀分布的一组浮点数</td></tr><tr><td>choice</td><td>在给定的范围内随机选择元素</td></tr><tr><td>normal</td><td>随机生成一组服从给定均值和方差正态分布的随机数</td></tr></tbody></table><h2 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#P21</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">names = np.array([<span class="string">&#x27;王微&#x27;</span>,<span class="string">&#x27;肖良英&#x27;</span>,<span class="string">&quot;方绮雯&quot;</span>,<span class="string">&#x27;刘旭阳&#x27;</span>,<span class="string">&#x27;钱易铭&#x27;</span>])</span><br><span class="line">subjects = np.array([<span class="string">&#x27;Math&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Art&#x27;</span>, <span class="string">&#x27;Database&#x27;</span>, <span class="string">&#x27;Physics&#x27;</span>])</span><br><span class="line">scores = np.array([[<span class="number">70</span>,<span class="number">85</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">89</span>],[<span class="number">60</span>,<span class="number">64</span>,<span class="number">80</span>,<span class="number">75</span>,<span class="number">80</span>,<span class="number">92</span>,<span class="number">90</span>],[<span class="number">90</span>,<span class="number">93</span>,<span class="number">88</span>,<span class="number">87</span>,<span class="number">86</span>,<span class="number">90</span>,<span class="number">91</span>],[<span class="number">80</span>,<span class="number">82</span>,<span class="number">91</span>,<span class="number">88</span>,<span class="number">83</span>,<span class="number">86</span>,<span class="number">80</span>],[<span class="number">88</span>,<span class="number">72</span>,<span class="number">78</span>,<span class="number">90</span>,<span class="number">91</span>,<span class="number">73</span>,<span class="number">80</span>]])</span><br><span class="line"><span class="comment">#1.</span></span><br><span class="line"><span class="comment">#(1)</span></span><br><span class="line">print(subjects[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]])</span><br><span class="line">print(names[<span class="number">-3</span>])</span><br><span class="line"><span class="comment">#(2)</span></span><br><span class="line">print(names[<span class="number">2</span>:])</span><br><span class="line">print(subjects[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment">#(3)</span></span><br><span class="line">print(subjects[(subjects == <span class="string">&#x27;English&#x27;</span>) | (subjects == <span class="string">&#x27;Physics&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.</span></span><br><span class="line"><span class="comment">#(1)</span></span><br><span class="line">print(scores[[<span class="number">1</span>,<span class="number">4</span>],:])</span><br><span class="line"><span class="comment">#(2)</span></span><br><span class="line">print(scores[[<span class="number">2</span>,<span class="number">4</span>]][:,(subjects == <span class="string">&#x27;Python&#x27;</span>)|(subjects == <span class="string">&#x27;Math&#x27;</span>)])</span><br><span class="line"><span class="comment">#(3)</span></span><br><span class="line">print(scores[:,(subjects == <span class="string">&#x27;English&#x27;</span>) | (subjects == <span class="string">&#x27;Art&#x27;</span>)])</span><br><span class="line"><span class="comment">#(4)</span></span><br><span class="line">print(scores[(names==<span class="string">&#x27;王微&#x27;</span>)|(names==<span class="string">&#x27;刘旭阳&#x27;</span>),(subjects==<span class="string">&#x27;English&#x27;</span>)|(subjects==<span class="string">&#x27;Math&#x27;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.</span></span><br><span class="line">a=np.arange(<span class="number">10</span>,<span class="number">20</span>).reshape(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 一维数组访问。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1) 在 subjects 数组中选择并显示序号 1、 2、 4 门课的名称，使用倒序索引选择并显示 names 数组中“方绮雯“。</span></span><br><span class="line"><span class="string">[&#x27;English&#x27; &#x27;Python&#x27; &#x27;Art&#x27;]</span></span><br><span class="line"><span class="string">方绮雯</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2) 选择并显示 names 数组从 2 到最后的数组元素；选择并显示 subjects 数组正序 2~4 的数组元素。</span></span><br><span class="line"><span class="string">[&#x27;方绮雯&#x27; &#x27;刘旭阳&#x27; &#x27;钱易铭&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;Python&#x27; &#x27;Chinese&#x27; &#x27;Art&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3) 使用布尔条件选择并显示 subjects 数组中的英语和物理科目名称。</span></span><br><span class="line"><span class="string">[&#x27;English&#x27; &#x27;Physics&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 二维数组访问。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">l) 选择并显示 scores 数组的 1、 4 行。 </span></span><br><span class="line"><span class="string">[[60 64 80 75 80 92 90]</span></span><br><span class="line"><span class="string"> [88 72 78 90 91 73 80]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2) 选择并显示 scores 数组中行序 2、 4 学生的数学和 Python 成绩</span></span><br><span class="line"><span class="string">[[90 88]</span></span><br><span class="line"><span class="string"> [88 78]]</span></span><br><span class="line"><span class="string">3) 选择并显示 scores 数组中所有学生的数学和艺术课程成绩。</span></span><br><span class="line"><span class="string">[[85 82]</span></span><br><span class="line"><span class="string"> [64 80]</span></span><br><span class="line"><span class="string"> [93 86]</span></span><br><span class="line"><span class="string"> [82 83]</span></span><br><span class="line"><span class="string"> [72 91]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4) 选择并显示 scores 数组中“王微”和“刘旭阳”的英语和艺术课程成绩。 </span></span><br><span class="line"><span class="string">[[85 82]</span></span><br><span class="line"><span class="string"> [82 83]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 生成由整数 10~19 组成的 2x5 的二维数组。</span></span><br><span class="line"><span class="string">[[10 11 12 13 14]</span></span><br><span class="line"><span class="string"> [15 16 17 18 19]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据准备</span></span><br><span class="line"><span class="comment">#P26</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">names = np.array([<span class="string">&#x27;王微&#x27;</span>,<span class="string">&#x27;肖良英&#x27;</span>,<span class="string">&quot;方绮雯&quot;</span>,<span class="string">&#x27;刘旭阳&#x27;</span>,<span class="string">&#x27;钱易铭&#x27;</span>])</span><br><span class="line">subjects = np.array([<span class="string">&#x27;Math&#x27;</span>, <span class="string">&#x27;English&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Chinese&#x27;</span>, <span class="string">&#x27;Art&#x27;</span>, <span class="string">&#x27;Database&#x27;</span>, <span class="string">&#x27;Physics&#x27;</span>])</span><br><span class="line">scores = np.array([[<span class="number">70</span>,<span class="number">85</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">89</span>],[<span class="number">60</span>,<span class="number">64</span>,<span class="number">80</span>,<span class="number">75</span>,<span class="number">80</span>,<span class="number">92</span>,<span class="number">90</span>],[<span class="number">90</span>,<span class="number">93</span>,<span class="number">88</span>,<span class="number">87</span>,<span class="number">86</span>,<span class="number">90</span>,<span class="number">91</span>],[<span class="number">80</span>,<span class="number">82</span>,<span class="number">91</span>,<span class="number">88</span>,<span class="number">83</span>,<span class="number">86</span>,<span class="number">80</span>],[<span class="number">88</span>,<span class="number">72</span>,<span class="number">78</span>,<span class="number">90</span>,<span class="number">91</span>,<span class="number">73</span>,<span class="number">80</span>]])</span><br><span class="line"><span class="comment"># 第一题</span></span><br><span class="line">print(<span class="string">&#x27;1. 将 scores 数组中所有学生的英语成绩减去 3 分并显示。 &#x27;</span>)</span><br><span class="line">print(scores[:, subjects == <span class="string">&#x27;Art&#x27;</span>] <span class="number">-3</span>)</span><br><span class="line"><span class="comment"># 第二题</span></span><br><span class="line">print(<span class="string">&#x27;\n2. 统计 scores 数组中每名学生所有科目的平均分并显示。 &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>) :</span><br><span class="line">    print(scores[i].mean())</span><br><span class="line"><span class="comment"># 第三题  </span></span><br><span class="line">print(<span class="string">&#x27;\n3. 使用随机函数生成[-1,1]之间服从均匀分布的 3x4 二维数组，并计算所有元素的和。&#x27;</span>)</span><br><span class="line">uni = np.random.uniform(<span class="number">-1</span>,<span class="number">1</span>,(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(uni)</span><br><span class="line">print(uni.<span class="built_in">sum</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1. 将 scores 数组中所有学生的英语成绩减去 3 分并显示。 </span></span><br><span class="line"><span class="string">[[79]</span></span><br><span class="line"><span class="string"> [77]</span></span><br><span class="line"><span class="string"> [83]</span></span><br><span class="line"><span class="string"> [80]</span></span><br><span class="line"><span class="string"> [88]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 统计 scores 数组中每名学生所有科目的平均分并显示。 </span></span><br><span class="line"><span class="string">82.42857142857143</span></span><br><span class="line"><span class="string">77.28571428571429</span></span><br><span class="line"><span class="string">89.28571428571429</span></span><br><span class="line"><span class="string">84.28571428571429</span></span><br><span class="line"><span class="string">81.71428571428571</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3. 使用随机函数生成[-1,1]之间服从均匀分布的 3x4 二维数组，并计算所有元素的和。</span></span><br><span class="line"><span class="string">[[-0.5434021  -0.0569449  -0.10984966 -0.90260813]</span></span><br><span class="line"><span class="string"> [-0.01882247 -0.46660599  0.52140256  0.42474122]</span></span><br><span class="line"><span class="string"> [ 0.3122958  -0.06197657 -0.26717631 -0.08292239]]</span></span><br><span class="line"><span class="string">-1.2518689400759253</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#P29</span></span><br><span class="line"><span class="comment">#一、</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 1.创建两个一维数组分别存储超市名称和水果名称。</span></span><br><span class="line">shops = np.array([<span class="string">&#x27;DaRunFa&#x27;</span>,<span class="string">&#x27;Walmart&#x27;</span>,<span class="string">&#x27;HaoDe&#x27;</span>,<span class="string">&#x27;NongGongShang&#x27;</span>])</span><br><span class="line">fruits = np.array([<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;mango&#x27;</span>])</span><br><span class="line"><span class="comment"># 2.创建一个 4x4 的二维数组存储不同超市的水果价格，其中价格由 4~10 范围内的随机数生成。 </span></span><br><span class="line">prices = np.random.randint(<span class="number">4</span>,<span class="number">10</span>,<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 3.选择“大润发”的苹果和“好德”的香蕉，并将价格增加 1 元。 </span></span><br><span class="line">prices[shops == <span class="string">&#x27;DaRunFa&#x27;</span>,fruits == <span class="string">&#x27;apple&#x27;</span>] += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;the price of apple in DaRunFa now: %d&#x27;</span> %prices[shops == <span class="string">&#x27;DaRunFa&#x27;</span>,fruits == <span class="string">&#x27;apple&#x27;</span>])</span><br><span class="line">prices[shops == <span class="string">&#x27;HaoDe&#x27;</span>,fruits == <span class="string">&#x27;banana&#x27;</span>] += <span class="number">1</span></span><br><span class="line">print(<span class="string">&#x27;the price of banana in HaoDe now: %d&#x27;</span> %prices[shops == <span class="string">&#x27;HaoDe&#x27;</span>,fruits == <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="comment"># 4.“农工商”水果大减价，所有水果价格减 2 元。 </span></span><br><span class="line">prices[shops == <span class="string">&#x27;NongGongShang&#x27;</span>] -= <span class="number">2</span> </span><br><span class="line">print(<span class="string">&#x27;the price in NongGongShang now: &#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">print(prices[shops == <span class="string">&#x27;NongGongShang&#x27;</span>])</span><br><span class="line"><span class="comment"># 5.统计四个超市苹果和芒果的销售均价。 </span></span><br><span class="line">print(<span class="string">&#x27;ave of apple is: %f&#x27;</span>%prices[: , fruits == <span class="string">&#x27;apple&#x27;</span>].mean())</span><br><span class="line">print(<span class="string">&#x27;ave of mango is: %f&#x27;</span>%prices[: , fruits == <span class="string">&#x27;mango&#x27;</span>].mean())</span><br><span class="line"><span class="comment"># 6.找出橘子价格最贵的超市名称（不是编号）。</span></span><br><span class="line">t = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>) :</span><br><span class="line">    <span class="keyword">if</span> prices[i, <span class="number">2</span>] &gt; prices[t, <span class="number">2</span>] :</span><br><span class="line">        t = i</span><br><span class="line">print(<span class="string">&#x27;the most expensive orange is in %s&#x27;</span>%shops[t])</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">the price of apple in DaRunFa now: 7</span></span><br><span class="line"><span class="string">the price of banana in HaoDe now: 5</span></span><br><span class="line"><span class="string">the price in NongGongShang now: [[6 7 4 6]]</span></span><br><span class="line"><span class="string">ave of apple is: 6.750000</span></span><br><span class="line"><span class="string">ave of mango is: 6.750000</span></span><br><span class="line"><span class="string">the most expensive orange is in Walmart</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#二、</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">steps = <span class="number">10</span></span><br><span class="line">rndwlk = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, size = (<span class="number">3</span>, steps))</span><br><span class="line">print(<span class="string">&#x27;1）移动距离数组：&#x27;</span>)</span><br><span class="line">print(rndwlk)</span><br><span class="line">position = rndwlk.cumsum(axis = <span class="number">1</span>)</span><br><span class="line">x = position[<span class="number">0</span>]</span><br><span class="line">y = position[<span class="number">1</span>]</span><br><span class="line">z = position[<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;\n2）每步走完后在三维的空间位置：&#x27;</span>)</span><br><span class="line">print(position)</span><br><span class="line">dists = np.sqrt(position[<span class="number">0</span>]**<span class="number">2</span> + position[<span class="number">1</span>]**<span class="number">2</span> + position[<span class="number">2</span>]**<span class="number">2</span>) <span class="comment">#三维直角坐标系的距离公式</span></span><br><span class="line">np.set_printoptions(precision=<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&#x27;\n3）每步走完后到原点的距离：&#x27;</span>)</span><br><span class="line">print(dists)</span><br><span class="line">print(<span class="string">&#x27;\n4）Z轴到达的最远距离：%f&#x27;</span>%<span class="built_in">abs</span>(position[<span class="number">2</span>]).<span class="built_in">max</span>())</span><br><span class="line">print(<span class="string">&#x27;\n5）物体在三维空间距离原点的最近值：%f&#x27;</span>%dists.<span class="built_in">min</span>())</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1）移动距离数组：</span></span><br><span class="line"><span class="string">[[ 0.09  0.52 -0.96 -0.96 -1.44  1.27 -0.61 -1.18  2.23  0.45]</span></span><br><span class="line"><span class="string"> [-0.66 -2.22 -0.39 -0.25  0.36 -0.29  0.04  0.12  1.43  0.34]</span></span><br><span class="line"><span class="string"> [ 0.56  0.56  0.96  0.33  2.15  1.56 -1.09 -2.05 -0.1  -0.48]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2）每步走完后在三维的空间位置：</span></span><br><span class="line"><span class="string">[[ 0.09  0.62 -0.34 -1.3  -2.74 -1.47 -2.08 -3.26 -1.03 -0.57]</span></span><br><span class="line"><span class="string"> [-0.66 -2.87 -3.26 -3.51 -3.16 -3.44 -3.4  -3.29 -1.86 -1.51]</span></span><br><span class="line"><span class="string"> [ 0.56  1.11  2.07  2.4   4.55  6.12  5.02  2.97  2.87  2.39]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3）每步走完后到原点的距离：</span></span><br><span class="line"><span class="string">[0.87 3.14 3.88 4.45 6.18 7.17 6.42 5.5  3.57 2.89]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4）Z轴到达的最远距离：6.116005</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5）物体在三维空间距离原点的最近值：0.867622</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="数据汇总与统计"><a href="#数据汇总与统计" class="headerlink" title="数据汇总与统计"></a>数据汇总与统计</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame<span class="comment">#使用pd.</span></span><br></pre></td></tr></table></figure><h2 id="series对象"><a href="#series对象" class="headerlink" title="series对象"></a>series对象</h2><ol><li><p>通过下标访问</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#series([data,index,index,...])</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">height1=Series(&#123;<span class="string">&#x27;13&#x27;</span> :<span class="number">187</span>, <span class="string">&#x27;14&#x27;</span> :<span class="number">190</span>, <span class="string">&#x27;17&#x27;</span>:<span class="number">185</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">178</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">185</span>&#125;)</span><br><span class="line">print(height1[<span class="string">&#x27;13&#x27;</span>])<span class="comment">#检索13号的身高</span></span><br><span class="line">print(height1[<span class="number">1</span>:<span class="number">3</span>])<span class="comment">#检索1、2号的身高</span></span><br><span class="line">print(height1.values&gt;=<span class="number">186</span>)<span class="comment">#检索大于186的球员</span></span><br><span class="line">print(height1)<span class="comment">#打印所有身高</span></span><br></pre></td></tr></table></figure></li><li><p>通过append添加成员</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">a=Series([<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;10&#x27;</span>],index=[<span class="number">180</span>,<span class="number">185</span>])</span><br><span class="line">height1=Series(&#123;<span class="string">&#x27;13&#x27;</span> :<span class="number">187</span>, <span class="string">&#x27;14&#x27;</span> :<span class="number">190</span>, <span class="string">&#x27;17&#x27;</span>:<span class="number">185</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">178</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">185</span>&#125;)</span><br><span class="line">height2=height1.append(a)</span><br><span class="line">print(height2)</span><br></pre></td></tr></table></figure></li><li><p>删除成员</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series,DataFrame</span><br><span class="line">height1=Series(&#123;<span class="string">&#x27;13&#x27;</span> :<span class="number">187</span>, <span class="string">&#x27;14&#x27;</span> :<span class="number">190</span>, <span class="string">&#x27;17&#x27;</span>:<span class="number">185</span>, <span class="string">&#x27;2&#x27;</span>:<span class="number">178</span>, <span class="string">&#x27;9&#x27;</span>:<span class="number">185</span>&#125;)</span><br><span class="line">height1.dorp(<span class="string">&#x27;13&#x27;</span>,<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">print(height1)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Data-Frame对象"><a href="#Data-Frame对象" class="headerlink" title="Data_Frame对象"></a>Data_Frame对象</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [[<span class="number">19</span>,<span class="number">170</span>, <span class="number">68</span>], [<span class="number">20</span>, <span class="number">165</span>,<span class="number">65</span>], [<span class="number">18</span>,<span class="number">175</span>, <span class="number">65</span>]]</span><br><span class="line">students=DataFrame (data, index= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], columns=[<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;height&#x27;</span>,<span class="string">&#x27;weight&#x27;</span>])</span><br><span class="line">print(students)</span><br><span class="line"><span class="comment">#   age  height  weight</span></span><br><span class="line"><span class="comment">#1   19     170      68</span></span><br><span class="line"><span class="comment">#2   20     165      65</span></span><br><span class="line"><span class="comment">#3   18     175      65</span></span><br></pre></td></tr></table></figure><ol><li>添加数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students[<span class="string">&#x27;expense&#x27;</span>]=[<span class="number">1500</span>,<span class="number">1600</span>,<span class="number">1200</span>]</span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   19     170      68     1500</span></span><br><span class="line"><span class="comment">#2   20     165      65     1600</span></span><br><span class="line"><span class="comment">#3   18     175      65     1200</span></span><br></pre></td></tr></table></figure></li><li>修改数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students[<span class="string">&#x27;expense&#x27;</span>]=<span class="number">1000</span></span><br><span class="line">print(stdents)</span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   19     170      68     1000</span></span><br><span class="line"><span class="comment">#2   20     165      65     1000</span></span><br><span class="line"><span class="comment">#3   18     175      65     1000</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students.loc[<span class="number">1</span>, :] = [<span class="number">21</span>,<span class="number">188</span>, <span class="number">70</span>,<span class="number">20</span>] </span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   21      78      70       20</span></span><br><span class="line"><span class="comment">#2   20     165      65     1000</span></span><br><span class="line"><span class="comment">#3   18     175      65     1000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students.drop(<span class="number">1</span>,axis=<span class="number">0</span>)<span class="comment">#axis=0表示行</span></span><br><span class="line"><span class="comment">#   age  height  weight  expense</span></span><br><span class="line"><span class="comment">#1   21      78      70       20</span></span><br><span class="line"><span class="comment">#2   20     165      65     1000</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students.drop(<span class="string">&#x27;expense&#x27;</span>, axis=<span class="number">1</span>) <span class="comment"># 删除expense列，axis=1表示列</span></span><br><span class="line"><span class="comment">#   age  height  weight  </span></span><br><span class="line"><span class="comment">#1   21      78      70 </span></span><br><span class="line"><span class="comment">#2   20     165      65 </span></span><br><span class="line"><span class="comment">#3   18     175      65</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students.drop([<span class="number">1</span>,<span class="number">2</span>],axis=<span class="number">0</span>) <span class="comment"># 删除多行</span></span><br></pre></td></tr></table></figure><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">csv=pd.read_csv(file,sep=<span class="string">&#x27;, &#x27;</span>,header= <span class="string">&#x27;infer&#x27;</span> , index_col=<span class="literal">None</span> , names, skiprows, ...)</span><br><span class="line"><span class="comment">#读取csv文件</span></span><br><span class="line"></span><br><span class="line">exc=pd.read_excel(file，sheetname,... )</span><br><span class="line"><span class="comment">#读取excel文件</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>file</th><th>字符串，文件路径和文件名</th></tr></thead><tbody><tr><td>sep</td><td>字符串，每行各数据之间的分隔符，默认为“,”</td></tr><tr><td>header</td><td>header =None,文件中第一行不是列索引</td></tr><tr><td>index_col</td><td>数字，用作行索引的列序号</td></tr><tr><td>names</td><td>列表，定义列索引，默认文件中第- - 行为列索引</td></tr><tr><td>skiprows</td><td>整数或列表，需要忽略的行数或需要跳过的行号列表，skiprows=[2,3,5]，跳过2，3，5行</td></tr></tbody></table><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><p>……</p>]]></content>
    
    
    <summary type="html">数据分析的笔记（未完）</summary>
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>基于opencv的人脸检测与识别</title>
    <link href="http://example.com/2020/10/18/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2020/10/18/%E5%9F%BA%E4%BA%8Eopencv%E7%9A%84%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B8%8E%E8%AF%86%E5%88%AB/</id>
    <published>2020-10-18T02:30:09.000Z</published>
    <updated>2020-12-14T09:14:22.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="91a079b5caf6728d0bcf71ecadc1eb41b365e2de6bfc9c17c7aa838d60414b06"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="opencv" scheme="http://example.com/categories/opencv/"/>
    
    <category term="python" scheme="http://example.com/categories/opencv/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="人脸识别" scheme="http://example.com/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
    <category term="opencv" scheme="http://example.com/tags/opencv/"/>
    
  </entry>
  
  <entry>
    <title>网页爬虫项目实战经验</title>
    <link href="http://example.com/2020/10/12/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    <id>http://example.com/2020/10/12/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/</id>
    <published>2020-10-12T12:12:03.000Z</published>
    <updated>2020-12-22T06:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="网页爬虫项目实战经验"><a href="#网页爬虫项目实战经验" class="headerlink" title="网页爬虫项目实战经验"></a>网页爬虫项目实战经验</h1><p>此篇记录了网页爬虫的基本使用库，以及常用的正则表达式操作等。<br>同时给出了豆瓣电影top250的爬取方式（经典爬虫入门项目）。<br>以及对于CSDN的博主主页单个以及多个文章的爬取，并利用工具将其转换为pdf格式</p><h1 id="1-Bs4"><a href="#1-Bs4" class="headerlink" title="1.Bs4"></a>1.Bs4</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bs4将复杂html文档转换成一个复杂的树形结构，每个节点都是python对象，所有对象可以分为<span class="number">4</span>种</span><br><span class="line"></span><br><span class="line">-Tag</span><br><span class="line">-NavigableString</span><br><span class="line">-BeautifulSoup</span><br><span class="line">-Comment</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-1-analyze"><a href="#1-1-analyze" class="headerlink" title="1.1 analyze"></a>1.1 analyze</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bs4分析文档</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./baidu.html&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">html = file.read()</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.head))<span class="comment">#&lt;class &#x27;bs4.element.Tag&#x27;&gt;标签及其内容</span></span><br><span class="line"><span class="comment">#1.tag  标签及内容：拿到它所找到的第一个内容</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.title.string))<span class="comment">#&lt;class &#x27;bs4.element.NavigableString&#x27;&gt;标签里的内容</span></span><br><span class="line"><span class="comment">#2.NavigableString标签里的内容</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.a.attrs))<span class="comment">#&lt;class &#x27;dict&#x27;&gt;#&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="comment">#3.标签内部的字典信息</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs))<span class="comment">#&lt;class &#x27;bs4.BeautifulSoup&#x27;&gt;</span></span><br><span class="line"><span class="comment">#4.表示整个文档</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">type</span>(bs.a.string))<span class="comment">#&lt;class &#x27;bs4.element.Comment&#x27;&gt;</span></span><br><span class="line"><span class="comment">#5.第一个a中的注释里的内容,不包含注释符号</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-2-Traversal"><a href="#1-2-Traversal" class="headerlink" title="1.2 Traversal"></a>1.2 Traversal</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文档的遍历</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./baidu.html&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">html = file.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">print(bs.head.contents)<span class="comment">#列表类型，可以用下标访问</span></span><br><span class="line">print(bs.head.contents[<span class="number">1</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="1-3-find"><a href="#1-3-find" class="headerlink" title="1.3 find"></a>1.3 find</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文档搜索</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./baidu.html&quot;</span>, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">html = file.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">bs = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.find_all()</span></span><br><span class="line"><span class="comment">#查找与字符串完全匹配的内容</span></span><br><span class="line">t_list=bs.find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#所有&lt;a&gt;标签下面的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.search()</span></span><br><span class="line"><span class="comment">#正则表达式来搜索</span></span><br><span class="line">t_list=bs.find_all(re.<span class="built_in">compile</span>(<span class="string">&quot;a&quot;</span>))<span class="comment">#匹配与正则表达式a有关的全部内容</span></span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.根据函数的要求来搜索</span></span><br><span class="line"><span class="comment">#自定义函数查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name_is_exists</span>(<span class="params">tag</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tag.has_attr(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line">t_list=bs.find_all(name_is_exists)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.kwargs</span></span><br><span class="line">寻找<span class="built_in">id</span>=<span class="string">&quot;head&quot;</span>内的全部内容</span><br><span class="line">t_list=bs.find_all(<span class="built_in">id</span>=<span class="string">&quot;head&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>  i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.文本参数</span></span><br><span class="line">寻找文本的内容</span><br><span class="line">t_list=bs.find_all(text=[<span class="string">&quot;hao123&quot;</span>,<span class="string">&quot;贴吧&quot;</span>,<span class="string">&quot;地图&quot;</span>])</span><br><span class="line">t_list=bs.find_all(text=re.<span class="built_in">compile</span>(<span class="string">&quot;\d&quot;</span>))  <span class="comment">#寻找符合正则表达式的项目，这里是寻找所有整数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.limit参数</span></span><br><span class="line">t_list=bs.find_all(<span class="string">&quot;a&quot;</span>,limit=<span class="number">3</span>)   <span class="comment">#只搜索三个</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.css选择器</span></span><br><span class="line">t_list=bs.select(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">t_list=bs.select(<span class="string">&quot;.mnav&quot;</span>)<span class="comment">#寻找类名</span></span><br><span class="line">t_list=bs.select(<span class="string">&#x27;#u1&#x27;</span>)<span class="comment">#通过id来查找</span></span><br><span class="line">t_list=bs.select(<span class="string">&quot;a[class=&#x27;bri&#x27;]&quot;</span>)<span class="comment">#通过属性来查找</span></span><br><span class="line">t_list=bs.select(<span class="string">&quot;head&gt;title&quot;</span>)<span class="comment">#通过子标签来查找</span></span><br><span class="line">t_list=bs.select(<span class="string">&quot;.mnav ~ .bri&quot;</span>)<span class="comment">#通过子标签来查找</span></span><br><span class="line">print(t_list[<span class="number">0</span>].get_text())<span class="comment">#获取文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t_list:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><h1 id="2-Re"><a href="#2-Re" class="headerlink" title="2. Re"></a>2. Re</h1><hr><p>#正则表达式：字符串模式（判断字符串是否符合一定标准）<br>import re<br>#创建模式对象</p><h2 id="2-1-new-object"><a href="#2-1-new-object" class="headerlink" title="2.1 new object"></a>2.1 new object</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#search</span></span><br><span class="line">pat=re.<span class="built_in">compile</span>(<span class="string">&quot;AA&quot;</span>)<span class="comment">#此处的AA属于正则表达式</span></span><br><span class="line">ans=pat.search(<span class="string">&quot;ABC&quot;</span>)<span class="comment">#这里的search内部属于被搜索的内容</span></span><br><span class="line">print(ans)<span class="comment">#输出None</span></span><br><span class="line">ans2=pat.search(<span class="string">&quot;AABCAA&quot;</span>)<span class="comment">#优先找到第一个结果</span></span><br><span class="line">print(ans2)<span class="comment">#输出&lt;re.Match object; span=(3, 5), match=&#x27;AA&#x27;&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-findall"><a href="#2-2-findall" class="headerlink" title="2.2 findall"></a>2.2 findall</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#findall</span></span><br><span class="line">ans=re.findall(<span class="string">&quot;a+&quot;</span>,<span class="string">&quot;aaabc&quot;</span>)<span class="comment">#前面是正则表达式，后面是待求的结果</span></span><br><span class="line">print(ans)<span class="comment">#输出[&#x27;aaa&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-3-sub"><a href="#2-3-sub" class="headerlink" title="2.3 sub"></a>2.3 sub</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sub(1,2,3)</span></span><br><span class="line">ans=re.sub(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;A&quot;</span>,<span class="string">&quot;abcdcasd&quot;</span>)<span class="comment">#对于最后一个表达式，用a换成A</span></span><br><span class="line">print(ans)</span><br><span class="line"><span class="comment">#建议在正则表达式种，被比较的字符前面加上r，不用担心转义字符的问题</span></span><br></pre></td></tr></table></figure><h2 id="2-4-demo"><a href="#2-4-demo" class="headerlink" title="2.4 demo"></a>2.4 demo</h2><p>1、匹配中文:[\u4e00-\u9fa5]</p><p>2、英文字母:[a-zA-Z]</p><p>3、数字:[0-9]</p><p>4、匹配中文，英文字母和数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$<br>同时判断输入长度：<br>[\u4e00-\u9fa5_a-zA-Z0-9_]{4,10}</p><p>5、<br>(?!_)　　不能以<em>开头<br>(?!.*?</em>$)　　不能以_结尾<br>[a-zA-Z0-9_\u4e00-\u9fa5]+　　至少一个汉字、数字、字母、下划线<br>$　　与字符串结束的地方匹配</p><p>6、只含有汉字、数字、字母、下划线，下划线位置不限：<br>^[a-zA-Z0-9_\u4e00-\u9fa5]+$</p><p>7、由数字、26个英文字母或者下划线组成的字符串<br>^\w+$</p><p>8、2~4个汉字<br>“^[\u4E00-\u9FA5]{2,4}$”;</p><p>9、最长不得超过7个汉字，或14个字节(数字，字母和下划线)正则表达式<br>^[\u4e00-\u9fa5]{1,7}$|^[\dA-Za-z_]{1,14}$</p><p>10、匹配双字节字符(包括汉字在内)：[^x00-xff]<br>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p><p>11、匹配空白行的正则表达式：ns*r<br>评注：可以用来删除空白行</p><p>12、匹配HTML标记的正则表达式：&lt;(S*?)[^&gt;]<em>&gt;.</em>?|&lt;.*? /&gt;<br>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p><p>13、匹配首尾空白字符的正则表达式：^s*|s*$<br>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p><p>14、匹配Email地址的正则表达式：^[a-zA-Z0-9][\w.-]<em>[a-zA-Z0-9]@[a-zA-Z0-9][\w.-]</em>[a-zA-Z0-9].[a-zA-Z][a-zA-Z.]*[a-zA-Z]$</p><p>评注：表单验证时很实用</p><p>15、手机号：^((13[0-9])|(14[0-9])|(15[0-9])|(17[0-9])|(18[0-9]))\d{8}$</p><p>16、身份证：(^\d{15}$)|(^\d{17}([0-9]|X|x)$)</p><p>17、匹配网址URL的正则表达式：[a-zA-z]+://[^s]*<br>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p><p>18、匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>评注：表单验证时很实用</p><p>19、匹配国内电话号码：d{3}-d{8}|d{4}-d{7}<br>评注：匹配形式如 0511-4405222 或 021-87888822</p><p>20、匹配腾讯QQ号：[1-9][0-9]{4,}<br>评注：腾讯QQ号从10000开始</p><p>21、匹配中国邮政编码：[1-9]d{5}(?!d)<br>评注：中国邮政编码为6位数字</p><p>22、匹配身份证：d{15}|d{18}<br>评注：中国的身份证为15位或18位</p><p>23、匹配ip地址：d+.d+.d+.d+<br>评注：提取ip地址时有用</p><p>24、匹配特定数字：<br>^[1-9]d*$　 　 //匹配正整数<br>^-[1-9]d*$ 　 //匹配负整数<br>^-?[1-9]d*$　　 //匹配整数<br>^[1-9]d*|0$　 //匹配非负整数（正整数 + 0）<br>^-[1-9]d*|0$　　 //匹配非正整数（负整数 + 0）<br>^[1-9]d*.d*|0.d*[1-9]d*$　　 //匹配正浮点数<br>^-([1-9]d*.d*|0.d*[1-9]d*)$　 //匹配负浮点数<br>^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$　 //匹配浮点数<br>^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$　　 //匹配非负浮点数（正浮点数 + 0）<br>^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$　　//匹配非正浮点数（负浮点数 + 0）<br>评注：处理大量数据时有用，具体应用时注意修正</p><p>25、匹配特定字符串：<br>^[A-Za-z]+$　　//匹配由26个英文字母组成的字符串<br>^[A-Z]+$　　//匹配由26个英文字母的大写组成的字符串<br>^[a-z]+$　　//匹配由26个英文字母的小写组成的字符串<br>^[A-Za-z0-9]+$　　//匹配由数字和26个英文字母组成的字符串<br>^w+$　　//匹配由数字、26个英文字母或者下划线组成的字符串</p><p>26、<br>在使用RegularExpressionValidator验证控件时的验证功能及其验证表达式介绍如下:<br>只能输入数字：“^[0-9]<em>$”<br>只能输入n位的数字：“^d{n}$”<br>只能输入至少n位数字：“^d{n,}$”<br>只能输入m-n位的数字：“^d{m,n}$”<br>只能输入零和非零开头的数字：“^(0|[1-9][0-9]</em>)$”<br>只能输入有两位小数的正实数：“^[0-9]+(.[0-9]{2})?$”<br>只能输入有1-3位小数的正实数：“^[0-9]+(.[0-9]{1,3})?$”<br>只能输入非零的正整数：“^+?[1-9][0-9]<em>$”<br>只能输入非零的负整数：“^-[1-9][0-9]</em>$”<br>只能输入长度为3的字符：“^.{3}$”<br>只能输入由26个英文字母组成的字符串：“^[A-Za-z]+$”<br>只能输入由26个大写英文字母组成的字符串：“^[A-Z]+$”<br>只能输入由26个小写英文字母组成的字符串：“^[a-z]+$”<br>只能输入由数字和26个英文字母组成的字符串：“^[A-Za-z0-9]+$”<br>只能输入由数字、26个英文字母或者下划线组成的字符串：“^w+$”<br>验证用户密码:“^[a-zA-Z]w{5,17}$”正确格式为：以字母开头，长度在6-18之间，<br>只能包含字符、数字和下划线。<br>验证是否含有^%&amp;’,;=?$”等字符：“[^%&amp;’,;=?$x22]+”<br>只能输入汉字：“^[u4e00-u9fa5],{0,}$”<br>验证Email地址：“^w+[-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)<em>$”<br>验证InternetURL：“^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]</em>)?$”<br>验证身份证号（15位或18位数字）：“^d{15}|d{}18$”<br>验证一年的12个月：“^(0?[1-9]|1[0-2])$”正确格式为：“01”-“09”和“1”“12”<br>验证一个月的31天：“^((0?[1-9])|((1|2)[0-9])|30|31)$”<br>正确格式为：“01”“09”和“1”“31”。<br>匹配中文字符的正则表达式： [u4e00-u9fa5]<br>匹配双字节字符(包括汉字在内)：[^x00-xff]<br>匹配空行的正则表达式：n[s| ]<em>r<br>匹配HTML标记的正则表达式：/&lt;(.*)&gt;.</em>|&lt;(.*) /&gt;/<br>匹配首尾空格的正则表达式：(^s*)|(s*$)<br>匹配Email地址的正则表达式：w+([-+.]w+)<em>@w+([-.]w+)</em>.w+([-.]w+)*<br>匹配网址URL的正则表达式：http://([w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?</p><h1 id="3-Urllib"><a href="#3-Urllib" class="headerlink" title="3. Urllib"></a>3. Urllib</h1><hr><h2 id="3-1-get"><a href="#3-1-get" class="headerlink" title="3.1 get"></a>3.1 get</h2><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#1、获取一个get请求</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    responce = urllib.request.urlopen(<span class="string">&quot;http://httpbin.org/get&quot;</span>,timeout=<span class="number">0.01</span>)</span><br><span class="line">    print(responce.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment">#对获取到的网页源码进行utf-8解码</span></span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">&quot;time out&quot;</span>)   <span class="comment">#超时处理</span></span><br></pre></td></tr></table></figure><h2 id="3-2-post"><a href="#3-2-post" class="headerlink" title="3.2 post"></a>3.2 post</h2><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#2、获取一个post请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span>&#125;), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">&quot;http://httpbin.org/post&quot;</span>,data = data)</span><br><span class="line">print(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">responce = urllib.request.urlopen(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">print(responce.status)  <span class="comment">#获取状态码</span></span><br><span class="line">print(responce.getheaders())   <span class="comment">#获取全部信息</span></span><br><span class="line">print(responce.getheader(<span class="string">&quot;Server&quot;</span>))    <span class="comment">#获取全部信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-418-error"><a href="#3-3-418-error" class="headerlink" title="3.3 418 error"></a>3.3 418 error</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3、post请求，反418</span></span><br><span class="line">url=<span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span> : <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">req=urllib.request.Request(url=url, data=data, headers=headers, method=<span class="string">&quot;POST&quot;</span>)</span><br><span class="line">response=urllib.request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="3-4-test"><a href="#3-4-test" class="headerlink" title="3.4 test"></a>3.4 test</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4、爬取豆瓣</span></span><br><span class="line">url=<span class="string">&quot;https://www.douban.com&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36 Edg/84.0.522.44&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;world&quot;</span>&#125;), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">req=urllib.request.Request(url=url, headers=headers)</span><br><span class="line">response=urllib.request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h1 id="4-Xwlt"><a href="#4-Xwlt" class="headerlink" title="4. Xwlt"></a>4. Xwlt</h1><h2 id="4-1-new"><a href="#4-1-new" class="headerlink" title="4.1 new"></a>4.1 new</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>)<span class="comment">#创建对象</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)<span class="comment">#创建工作表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        worksheet.write(i<span class="number">-1</span>, j<span class="number">-1</span>, <span class="string">&#x27;%d*%d=%d&#x27;</span>%(i,j,i*j))  <span class="comment"># 行,列，内容</span></span><br><span class="line"></span><br><span class="line">workbook.save(<span class="string">&quot;student.xls&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="5-Release"><a href="#5-Release" class="headerlink" title="5. Release"></a>5. Release</h1><h2 id="5-1-Top250"><a href="#5-1-Top250" class="headerlink" title="5.1 Top250"></a>5.1 Top250</h2><p>爬取豆瓣电影Top250，并将其保存在sql数据库中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020/10/6 21:00</span></span><br><span class="line"><span class="comment">#@Author : chasing</span></span><br><span class="line"><span class="comment">#@File : spyder.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># 网页解析，获取数据</span></span><br><span class="line"><span class="keyword">import</span> re  <span class="comment"># 正则表达式，进行文字匹配</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error  <span class="comment"># 制定URL，获取网页数据</span></span><br><span class="line"><span class="keyword">import</span> xlwt  <span class="comment"># 进行excel操作</span></span><br><span class="line"><span class="keyword">import</span> sqlite3  <span class="comment"># 进行SQLite数据库操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    baseurl = <span class="string">&quot;https://movie.douban.com/top250?start=&quot;</span></span><br><span class="line">    <span class="comment"># 1.爬取网页</span></span><br><span class="line">    datalist = getData(baseurl)</span><br><span class="line">    <span class="comment">#savepath = &quot;豆瓣电影Top250.xls&quot;</span></span><br><span class="line">    dbpath = <span class="string">&quot;movie.db&quot;</span></span><br><span class="line">    <span class="comment"># 3.保存数据</span></span><br><span class="line">    <span class="comment"># saveData(datalist,savepath)</span></span><br><span class="line">    saveData2DB(datalist, dbpath)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># askURL(&quot;https://movie.douban.com/top250?start=&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 影片详情链接的规则</span></span><br><span class="line">findLink = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot;&gt;&#x27;</span>)  <span class="comment"># 创建正则表达式对象，表示规则（字符串的模式）</span></span><br><span class="line"><span class="comment"># 影片图片</span></span><br><span class="line">findImgSrc = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;img.*src=&quot;(.*?)&quot;&#x27;</span>, re.S)  <span class="comment"># re.S 让换行符包含在字符中</span></span><br><span class="line"><span class="comment"># 影片片名</span></span><br><span class="line">findTitle = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;title&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 影片评分</span></span><br><span class="line">findRating = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到评价人数</span></span><br><span class="line">findJudge = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span&gt;(\d*)人评价&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到概况</span></span><br><span class="line">findInq = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span class=&quot;inq&quot;&gt;(.*)&lt;/span&gt;&#x27;</span>)</span><br><span class="line"><span class="comment"># 找到影片的相关内容</span></span><br><span class="line">findBd = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;(.*?)&lt;/p&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span>(<span class="params">baseurl</span>):</span></span><br><span class="line">    datalist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):  <span class="comment"># 调用获取页面信息的函数，10次</span></span><br><span class="line">        url = baseurl + <span class="built_in">str</span>(i*<span class="number">25</span>)</span><br><span class="line">        html = askURL(url)  <span class="comment"># 保存获取到的网页源码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.逐一解析数据</span></span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;item&quot;</span>): <span class="comment">#查找符合要求的字符串，形成列表</span></span><br><span class="line">            <span class="comment"># print(item)   #测试：查看电影item全部信息</span></span><br><span class="line">            data = []  <span class="comment"># 保存一部电影的所有信息</span></span><br><span class="line">            item = <span class="built_in">str</span>(item)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 影片详情的链接</span></span><br><span class="line">            link = re.findall(findLink, item)[<span class="number">0</span>]  <span class="comment"># re库用来通过正则表达式查找指定的字符串</span></span><br><span class="line">            data.append(link)  <span class="comment"># 添加链接</span></span><br><span class="line"></span><br><span class="line">            imgSrc = re.findall(findImgSrc, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(imgSrc)  <span class="comment"># 添加图片</span></span><br><span class="line"></span><br><span class="line">            titles = re.findall(findTitle, item)  <span class="comment"># 片名可能只有一个中文名，没有外国名</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">len</span>(titles) == <span class="number">2</span>):</span><br><span class="line">                ctitle = titles[<span class="number">0</span>]  <span class="comment"># 添加中文名</span></span><br><span class="line">                data.append(ctitle)</span><br><span class="line">                otitle = titles[<span class="number">1</span>].replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 去掉无关的符号</span></span><br><span class="line">                data.append(otitle)  <span class="comment"># 添加外国名</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(titles[<span class="number">0</span>])</span><br><span class="line">                data.append(<span class="string">&#x27; &#x27;</span>)  <span class="comment"># 外国名字留空</span></span><br><span class="line"></span><br><span class="line">            rating = re.findall(findRating, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(rating)  <span class="comment"># 添加评分</span></span><br><span class="line"></span><br><span class="line">            judgeNum = re.findall(findJudge, item)[<span class="number">0</span>]</span><br><span class="line">            data.append(judgeNum)  <span class="comment"># 提加评价人数</span></span><br><span class="line"></span><br><span class="line">            inq = re.findall(findInq, item)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(inq) != <span class="number">0</span>:</span><br><span class="line">                inq = inq[<span class="number">0</span>].replace(<span class="string">&quot;。&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 去掉句号</span></span><br><span class="line">                data.append(inq)                <span class="comment"># 添加概述</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data.append(<span class="string">&quot; &quot;</span>)  <span class="comment"># 留空</span></span><br><span class="line"></span><br><span class="line">            bd = re.findall(findBd, item)[<span class="number">0</span>]</span><br><span class="line">            bd = re.sub(<span class="string">&#x27;&lt;br(\s+)?/&gt;(\s+)?&#x27;</span>, <span class="string">&quot; &quot;</span>, bd)  <span class="comment"># 去掉&lt;br/&gt;</span></span><br><span class="line">            bd = re.sub(<span class="string">&#x27;/&#x27;</span>, <span class="string">&quot; &quot;</span>, bd)  <span class="comment"># 替换/</span></span><br><span class="line">            data.append(bd.strip())  <span class="comment"># 去掉前后的空格</span></span><br><span class="line"></span><br><span class="line">            datalist.append(data)  <span class="comment"># 把处理好的一部电影信息放入datalist</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> datalist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到指定一个URL的网页内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askURL</span>(<span class="params">url</span>):</span></span><br><span class="line">    head = &#123;  <span class="comment"># 模拟浏览器头部信息，向豆瓣服务器发送消息</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla / 5.0(Windows NT 10.0; Win64; x64) AppleWebKit / 537.36(KHTML, like Gecko) Chrome / 80.0.3987.122  Safari / 537.36&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 用户代理，表示告诉豆瓣服务器，我们是什么类型的机器、浏览器（本质上是告诉浏览器，我们可以接收什么水平的文件内容）</span></span><br><span class="line"></span><br><span class="line">    request = urllib.request.Request(url, headers=head)</span><br><span class="line">    html = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib.request.urlopen(request)</span><br><span class="line">        html = response.read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="comment"># print(html)</span></span><br><span class="line">    <span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;code&quot;</span>):</span><br><span class="line">            print(e.code)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(e, <span class="string">&quot;reason&quot;</span>):</span><br><span class="line">            print(e.reason)</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData</span>(<span class="params">datalist, savepath</span>):</span></span><br><span class="line">    print(<span class="string">&quot;save....&quot;</span>)</span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">&quot;utf-8&quot;</span>, style_compression=<span class="number">0</span>)  <span class="comment"># 创建workbook对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">&#x27;豆瓣电影Top250&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)  <span class="comment"># 创建工作表</span></span><br><span class="line">    col = (<span class="string">&quot;电影详情链接&quot;</span>, <span class="string">&quot;图片链接&quot;</span>, <span class="string">&quot;影片中文名&quot;</span>, <span class="string">&quot;影片外国名&quot;</span>, <span class="string">&quot;评分&quot;</span>, <span class="string">&quot;评价数&quot;</span>, <span class="string">&quot;概况&quot;</span>, <span class="string">&quot;相关信息&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">        sheet.write(<span class="number">0</span>, i, col[i])  <span class="comment"># 列名</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">250</span>):</span><br><span class="line">        print(<span class="string">&quot;第%d条&quot;</span> % (i+<span class="number">1</span>))</span><br><span class="line">        data = datalist[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">            sheet.write(i+<span class="number">1</span>, j, data[j])  <span class="comment"># 数据</span></span><br><span class="line"></span><br><span class="line">    book.save(savepath)  <span class="comment"># 保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveData2DB</span>(<span class="params">datalist, dbpath</span>):</span></span><br><span class="line">    init_db(dbpath)</span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cur = conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datalist:</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">4</span> <span class="keyword">or</span> index == <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            data[index] = <span class="string">&#x27;&quot;&#x27;</span>+data[index]+<span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">        sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                insert into movie250 (</span></span><br><span class="line"><span class="string">                info_link,pic_link,cname,ename,score,rated,instroduction,info) </span></span><br><span class="line"><span class="string">                values(%s)&#x27;&#x27;&#x27;</span> % <span class="string">&quot;,&quot;</span>.join(data)</span><br><span class="line">        print(sql)</span><br><span class="line">        cur.execute(sql)</span><br><span class="line">        conn.commit()</span><br><span class="line">    cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span>(<span class="params">dbpath</span>):</span></span><br><span class="line">    sql = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        create table movie250 </span></span><br><span class="line"><span class="string">        (</span></span><br><span class="line"><span class="string">        id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">        info_link text,</span></span><br><span class="line"><span class="string">        pic_link text,</span></span><br><span class="line"><span class="string">        cname varchar,</span></span><br><span class="line"><span class="string">        ename varchar,</span></span><br><span class="line"><span class="string">        score numeric ,</span></span><br><span class="line"><span class="string">        rated numeric ,</span></span><br><span class="line"><span class="string">        instroduction text,</span></span><br><span class="line"><span class="string">        info text</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>  <span class="comment"># 创建数据表</span></span><br><span class="line">    conn = sqlite3.connect(dbpath)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    conn.commit()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 当程序执行时</span></span><br><span class="line">    <span class="comment"># 调用函数</span></span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># init_db(&quot;movietest.db&quot;)</span></span><br><span class="line">    print(<span class="string">&quot;爬取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="6-CSDN"><a href="#6-CSDN" class="headerlink" title="6. CSDN"></a>6. CSDN</h1><h2 id="6-1-for-a-certain-passage"><a href="#6-1-for-a-certain-passage" class="headerlink" title="6.1 for a certain passage"></a>6.1 for a certain passage</h2><p>对于一个博主的确切的文章链接，可以使用以下代码爬取其中的文章内容，并保存为pdf格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-12 18:08</span></span><br><span class="line"><span class="comment">#@Author : chasing</span></span><br><span class="line"><span class="comment">#@File : csdn.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line">BaseUrl=<span class="string">&#x27;https://blog.csdn.net/justidle/article/details/106850487&#x27;</span></span><br><span class="line">cmp=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;meta name=&quot;keywords&quot; content=&quot;(.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36 Edg/86.0.622.38&#x27;</span>&#125;</span><br><span class="line">response = requests.get(BaseUrl, headers=headers)</span><br><span class="line">print(<span class="string">&quot;响应体：&quot;</span>+response.text)</span><br><span class="line">Title=re.findall(cmp,response.text)</span><br><span class="line">FileUrl=<span class="string">&#x27;D:\\desktop\\&#x27;</span>+<span class="string">&#x27; &#x27;</span>.join(Title)+<span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">print(<span class="string">&quot;期望保存位置：&quot;</span>+FileUrl)</span><br><span class="line">Html1=<span class="string">r&#x27;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&#x27;</span></span><br><span class="line">Html2=<span class="string">r&#x27;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#123;content&#125;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">html=Html1+<span class="string">&#x27; &#x27;</span>.join(Title)+Html2</span><br><span class="line">selector = parsel.Selector(response.text)</span><br><span class="line">article = selector.css(<span class="string">&#x27;article&#x27;</span>).get()</span><br><span class="line">print(<span class="string">&quot;文章本体：&quot;</span>+article)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.html&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html.<span class="built_in">format</span>(content=article))</span><br><span class="line">config = pdfkit.configuration(wkhtmltopdf=<span class="string">&#x27;E:\\wkhtmltopdf\\bin\\wkhtmltopdf.exe&#x27;</span>)</span><br><span class="line">pdfkit.from_file(<span class="string">&quot;1.html&quot;</span>,FileUrl,configuration=config)</span><br><span class="line">print(<span class="string">&quot;文件保存成功，保存文件的路径为：&quot;</span>+FileUrl)</span><br><span class="line">print(<span class="string">&quot;Hello World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-2-All-passages"><a href="#6-2-All-passages" class="headerlink" title="6.2 All passages"></a>6.2 All passages</h2><p>对于博主的全部文章，可以使用以下方法，获取其所有文章的链接</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment">#@Time : 2020-10-12 20:09</span></span><br><span class="line"><span class="comment">#@Author : chasing</span></span><br><span class="line"><span class="comment">#@File : Release.py</span></span><br><span class="line"><span class="comment">#@Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入相应的模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> parsel</span><br><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># Pages=askPages(BaseUrl)</span></span><br><span class="line">    <span class="comment"># print(Pages)</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    askUrl(baseUrl, i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">100</span>,<span class="number">1</span>):</span><br><span class="line">        tempUrl = baseUrl+<span class="built_in">str</span>(i)</span><br><span class="line">        askUrl(tempUrl, i)</span><br><span class="line">    Response()</span><br><span class="line"></span><br><span class="line">findChinese=re.<span class="built_in">compile</span>(<span class="string">r&#x27;[\u4e00-\u9fa5]+&#x27;</span>,re.S)<span class="comment">#pdfkit不能能保存含有特殊符号名称的文件</span></span><br><span class="line">findBranch=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;a href=&quot;(.*?)&quot; target=&quot;_blank&quot;&gt;&#x27;</span>)</span><br><span class="line">findFile=re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;meta name=&quot;keywords&quot; content=&quot;(.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line"><span class="comment"># findPages=re.compile(r&#x27;&lt;li data-page=&quot;(\d+)&quot; class=&quot;ui-pager&quot;&gt;.*?&lt;/li&gt;&#x27;,re.S)</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36 Edg/86.0.622.38&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">baseUrl=<span class="string">&#x27;https://blog.csdn.net/qq_27133869&#x27;</span></span><br><span class="line"><span class="comment"># 页面数量为动态</span></span><br><span class="line"><span class="comment"># def askPages(BaseUrl):#js</span></span><br><span class="line"><span class="comment">#     response = requests.get(BaseUrl, headers=headers)</span></span><br><span class="line"><span class="comment">#     print(response.text)</span></span><br><span class="line"><span class="comment">#     Pages = re.findall(FindPages, response.text)</span></span><br><span class="line"><span class="comment">#     return Pages</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">askUrl</span>(<span class="params">baseUrl,i</span>):</span></span><br><span class="line">    baseResponse = requests.get(baseUrl, headers=headers)</span><br><span class="line">    <span class="comment"># print(baseResponse.text)</span></span><br><span class="line">    branchUrls=re.findall(findBranch,baseResponse.text)</span><br><span class="line">    <span class="keyword">assert</span> branchUrls</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        branchUrls.pop()<span class="comment">#删除帮助文档</span></span><br><span class="line">    <span class="keyword">assert</span> branchUrls<span class="comment">#为空直接跳出，节省资源</span></span><br><span class="line">    <span class="comment"># print(branchUrls)</span></span><br><span class="line">    times=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> BranchUrl <span class="keyword">in</span> branchUrls:</span><br><span class="line">        branchResponse = requests.get(BranchUrl, headers=headers)</span><br><span class="line">        <span class="comment">#保存的文件名</span></span><br><span class="line">        tempTitle = <span class="string">&#x27;&#x27;</span>.join(re.findall(findFile, branchResponse.text))</span><br><span class="line">        print(tempTitle)</span><br><span class="line">        print(re.findall(findChinese, tempTitle))</span><br><span class="line">        finalTitle = <span class="string">&quot; &quot;</span>.join(re.findall(findChinese, tempTitle))</span><br><span class="line">        print(<span class="string">&quot;第 %d 面的 %d 篇文章名为:&quot;</span> %(i, times)+<span class="built_in">str</span>(finalTitle)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="comment">#最终网页源代码</span></span><br><span class="line">        finalHtml =<span class="string">r&#x27;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;&#x27;</span> + <span class="string">&#x27; &#x27;</span>.join(finalTitle) + <span class="string">r&#x27;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&#123;content&#125;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">        <span class="comment">#pdf文件的保存位置</span></span><br><span class="line">        fileUrl = <span class="string">&#x27;D:\\desktop\\CSDN\\littlePING\\&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(finalTitle) + <span class="string">&#x27;.pdf&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;第 %d 面的 %d 篇文章保存路径为:&quot;</span> %(i, times) + <span class="built_in">str</span>(fileUrl) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        selector = parsel.Selector(branchResponse.text)</span><br><span class="line">        article = selector.css(<span class="string">&#x27;article&#x27;</span>).get()</span><br><span class="line">        <span class="comment">#文件保存的位置</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;temp.html&#x27;</span>, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(finalHtml.<span class="built_in">format</span>(content=article))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            config = pdfkit.configuration(wkhtmltopdf=<span class="string">&#x27;E:\\wkhtmltopdf\\bin\\wkhtmltopdf.exe&#x27;</span>)</span><br><span class="line">            <span class="comment"># config = pdfkit.configuration(wkhtmltopdf=path_wk)</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;temp.html&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                pdfkit.from_file(f, fileUrl, configuration=config)</span><br><span class="line">            print(<span class="string">&quot;第 %d 面的 %d 篇文章pdf文件保存成功！&quot;</span> % (i, times)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">&quot;第 %d 面的 %d 篇文章pdf文件保存失败！&quot;</span> % (i, times)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># continue</span></span><br><span class="line">        times+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;页面 %d 中的所有文件保存成功&quot;</span>%i+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Response</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  <span class="comment"># 当程序执行时</span></span><br><span class="line">    <span class="comment"># 调用函数</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    <category term="爬虫" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="网页爬虫" scheme="http://example.com/tags/%E7%BD%91%E9%A1%B5%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python基础笔记</title>
    <link href="http://example.com/2020/10/06/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/10/06/python%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-06T07:53:09.000Z</published>
    <updated>2021-03-31T04:11:30.438Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章——基础知识"><a href="#第一章——基础知识" class="headerlink" title="第一章——基础知识"></a>第一章——基础知识</h1><h2 id="1、模块的引入"><a href="#1、模块的引入" class="headerlink" title="1、模块的引入"></a>1、模块的引入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#demo：</span></span><br><span class="line"><span class="comment"># 随机数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#导入import 模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"></span><br><span class="line">a=random.randint(<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#a最终被赋值为1，2，3，4，5之间的随机一个数，左闭右闭</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里包括1和5！</span></span><br></pre></td></tr></table></figure><h2 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#type() 获取信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line">a=<span class="string">&#x27;520.0&#x27;</span></span><br><span class="line">b=<span class="built_in">float</span>(a)</span><br><span class="line"><span class="built_in">type</span>(a)<span class="comment">#输出&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(b)<span class="comment">#输出&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#函数isinstance(var,class)</span></span><br><span class="line"><span class="comment">#对比前后类型</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">10</span>,<span class="built_in">int</span>)<span class="comment">#输出True</span></span><br></pre></td></tr></table></figure><hr><p><em>强制类型转换</em></p><ul><li><p>不同于C/C++的(int)a和(double)b</p></li><li><p>py中的强制类型转换的括号框住表达式</p></li><li><p>改为 int(a)和float(b)</p></li></ul><h2 id="3、符号运算"><a href="#3、符号运算" class="headerlink" title="3、符号运算"></a>3、符号运算</h2><table><thead><tr><th align="center">+</th><th align="left">加</th></tr></thead><tbody><tr><td align="center">-</td><td align="left">减</td></tr><tr><td align="center">*</td><td align="left">乘</td></tr><tr><td align="center">/</td><td align="left">除，会自动转换为浮点类型，与C/C++不同</td></tr><tr><td align="center">%</td><td align="left">取余</td></tr><tr><td align="center">**</td><td align="left">幂运算，等同于计算器中的^，结果为浮点型或整形，根据结果而定</td></tr><tr><td align="center">//</td><td align="left">带余除法，就算是浮点型运算也会保留整数部分，例如3.0//2=1.0</td></tr></tbody></table><h2 id="4、逻辑运算"><a href="#4、逻辑运算" class="headerlink" title="4、逻辑运算"></a>4、逻辑运算</h2><table><thead><tr><th>and</th><th>与</th></tr></thead><tbody><tr><td>or</td><td>或</td></tr><tr><td>not</td><td>非</td></tr></tbody></table><p><em>三目运算符</em></p><ul><li>a= 语句1 if 条件 else 语句2</li></ul><p>例如: </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=x <span class="keyword">if</span> x&lt;y <span class="keyword">else</span> y</span><br><span class="line"><span class="comment">#a赋值为x,y中小的那个</span></span><br></pre></td></tr></table></figure><h2 id="5、其余函数"><a href="#5、其余函数" class="headerlink" title="5、其余函数"></a>5、其余函数</h2><p>assert: 同C/C++的asset(断言)</p><blockquote><ul><li>同C/C++一样</li><li>assert 1&gt;2</li><li>结果为False，程序直接终止</li></ul></blockquote><h1 id="第二章——循环"><a href="#第二章——循环" class="headerlink" title="第二章——循环"></a>第二章——循环</h1><h2 id="1、for循环"><a href="#1、for循环" class="headerlink" title="1、for循环"></a>1、for循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#for循环</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;chasing&quot;</span></span><br><span class="line"></span><br><span class="line">a = [<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#5表示结束，[0,5)，左闭右开</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;&quot;</span>)<span class="comment">#end=&quot;&quot;表示不换行，在循环结束以后不执行任何操作</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出01234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#从1到10，[1,10)，但是不会包括10，左闭右开</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出123456789</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):<span class="comment">#for(int i=0;i&lt;100;i+=10)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#从1到100，每次i增加10，但是不会包括100，直到100跳出循环，左闭右开</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;，&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出0，10，20，30，40，50，60，70，80，90，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> name:</span><br><span class="line"></span><br><span class="line">  <span class="comment">#遍历字符串</span></span><br><span class="line"></span><br><span class="line">  print(i,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出chasing</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line"></span><br><span class="line">  <span class="comment">#遍历每一个列表</span></span><br><span class="line"></span><br><span class="line">  print(a[i], end=<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">#输出aa,bb,cc,dd,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、while循环"><a href="#2、while循环" class="headerlink" title="2、while循环"></a>2、while循环</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#while循环</span></span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count&lt;<span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">  print(count,<span class="string">&quot;小于5&quot;</span>)</span><br><span class="line"></span><br><span class="line">  count+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> count&gt;<span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#只要进入while循环，正常出来，或者没有进入while循环，则else写不写都一样</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#触发else 的唯一情况就是while里面有break且被执行，for同理</span></span><br><span class="line"></span><br><span class="line">  print(count,<span class="string">&quot;大于或等于5&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、break和continue"><a href="#3、break和continue" class="headerlink" title="3、break和continue"></a>3、break和continue</h2><table><thead><tr><th>break</th><th>跳出循环</th></tr></thead><tbody><tr><td>continue</td><td>跳过当前循环</td></tr><tr><td>pass</td><td>占位语句，相当于C/C++的;（空语句）， 不做任何事情</td></tr></tbody></table><blockquote><p>样例1</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输出2019到2100第一个闰年</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2019</span>,<span class="number">2100</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (i%<span class="number">4</span>==<span class="number">0</span>) <span class="keyword">and</span> (i%<span class="number">100</span>!=<span class="number">0</span>) <span class="keyword">or</span> (i%<span class="number">400</span>==<span class="number">0</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;2019-2100第一个闰年是%d&quot;</span>%i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2019-2100第一个闰年是2020</span></span><br></pre></td></tr></table></figure><blockquote><p>样例2</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#打印99乘法表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;%d*%d=%d&quot;</span>%(i,j,i*j),end=<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">  print(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章——字符串"><a href="#第三章——字符串" class="headerlink" title="第三章——字符串"></a>第三章——字符串</h1><p>注意，python3默认是utf-8编码。字符串都是unicode字符串。</p><p>字符串可以使用单引号，双引号，三引号（三个单引号，三个双引号）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">word=<span class="string">&#x27;zifu&#x27;</span></span><br><span class="line">sentence =<span class="string">&quot;juzi&quot;</span></span><br><span class="line">paragraph=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  duan</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  luo</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#&quot;&quot;&quot;  &quot;&quot;&quot;保存原始的所有格式</span></span><br><span class="line"></span><br><span class="line">print(word)</span><br><span class="line"></span><br><span class="line">print(sentence)</span><br><span class="line"></span><br><span class="line">print(paragraph)</span><br></pre></td></tr></table></figure><p>双引号””里面没有转义字符，但是可以使用 ‘，即str=”I’m a boy”，这里的’m不会报错</p><p>而使用单引号，则需要str =’I\‘m a boy’</p><h2 id="1、截取、切片"><a href="#1、截取、切片" class="headerlink" title="1、截取、切片"></a>1、截取、切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str=<span class="string">&quot;shu_chasing&quot;</span></span><br><span class="line"></span><br><span class="line">print(my_str)</span><br><span class="line"></span><br><span class="line">print(my_str[<span class="number">0</span>:<span class="number">3</span>])<span class="comment">#输出shu</span></span><br><span class="line"></span><br><span class="line">print(my_str[<span class="number">1</span>:<span class="number">11</span>:<span class="number">2</span>])<span class="comment">#输出h_hsn</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[起始位置:结束位置:步进值]，这里也是不包括11在内</span></span><br><span class="line"></span><br><span class="line">print(my_str[<span class="number">6</span>:])<span class="comment">#输出从第6个到结尾，即asing，这里不包括第6个</span></span><br><span class="line"></span><br><span class="line">print(my_str[:<span class="number">6</span>])<span class="comment">#输出从第一个到第6个，即shu_ch</span></span><br><span class="line"></span><br><span class="line">print(my_str+<span class="string">&quot;,nihao&quot;</span>)<span class="comment">#输出shu_chasing,nihao</span></span><br><span class="line"></span><br><span class="line">print(my_str*<span class="number">3</span>)<span class="comment">#输出shu_chasingshu_chasingshu_chasing</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、转义字符"><a href="#2、转义字符" class="headerlink" title="2、转义字符"></a>2、转义字符</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用、实现转义字符的功能</span></span><br><span class="line"></span><br><span class="line">mystring=<span class="string">r&#x27;c:\now&#x27;</span></span><br><span class="line"></span><br><span class="line">print(mystring)</span><br><span class="line"><span class="comment">#输出就是c:\now，去掉前面的r则会出现换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在字符串前面加上r表示原始字符串，不会翻译转义字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串不能以\结尾</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、字符串常用函数"><a href="#3、字符串常用函数" class="headerlink" title="3、字符串常用函数"></a>3、字符串常用函数</h2><h3 id="1-大写转小写casefold"><a href="#1-大写转小写casefold" class="headerlink" title="1.大写转小写casefold"></a>1.大写转小写casefold</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;SHU_chasing&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.casefold()</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#shu_chasing</span></span><br></pre></td></tr></table></figure><h3 id="2-第一个转大写capitalize"><a href="#2-第一个转大写capitalize" class="headerlink" title="2.第一个转大写capitalize"></a>2.第一个转大写capitalize</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;shu_chasing&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.casefold()</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#Shu_chasing</span></span><br></pre></td></tr></table></figure><h3 id="3-查找find"><a href="#3-查找find" class="headerlink" title="3.查找find"></a>3.查找find</h3><blockquote><p>函数原型find(sub[,start[,end]])<br>可以选择范围<br>也可以不写范围搜索全部</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;shu_chasing&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.find(<span class="string">&#x27;s&#x27;</span>))   <span class="comment">#输出0</span></span><br><span class="line">print(<span class="built_in">str</span>.find(<span class="string">&#x27;s&#x27;</span>, <span class="number">3</span> ,<span class="number">10</span>))    <span class="comment">#7</span></span><br></pre></td></tr></table></figure><h3 id="4-统计数目count"><a href="#4-统计数目count" class="headerlink" title="4.统计数目count"></a>4.统计数目count</h3><blockquote><p>函数原型count(sub[,start[,end]])<br>可以选择范围<br>也可以不写范围搜索全部</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;shu_chasing&#x27;</span></span><br><span class="line">print(<span class="built_in">str</span>.count(<span class="string">&#x27;s&#x27;</span>))   <span class="comment">#输出2</span></span><br><span class="line">print(<span class="built_in">str</span>.count(<span class="string">&#x27;s&#x27;</span>, <span class="number">3</span> ,<span class="number">10</span>))<span class="comment">#输出1</span></span><br></pre></td></tr></table></figure><h3 id="5-替换replace"><a href="#5-替换replace" class="headerlink" title="5.替换replace"></a>5.替换replace</h3><blockquote><p>函数原型replace(old, new[,count])<br>将old的字符串转换为指定的字符串</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;I love math&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.replace(<span class="string">&#x27;math&#x27;</span>,<span class="string">&#x27;programming&#x27;</span>)</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出I love programming</span></span><br></pre></td></tr></table></figure><h3 id="6-拆分split"><a href="#6-拆分split" class="headerlink" title="6.拆分split"></a>6.拆分split</h3><p>split(sep=None, maxsplit=-1)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;D:\software\python&#x27;</span></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>.split(sep=<span class="string">&#x27;\\&#x27;</span>)<span class="comment">#注意这里是两个\\</span></span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出[&#x27;D:&#x27;, &#x27;software&#x27;, &#x27;python&#x27;]，转为列表类型</span></span><br></pre></td></tr></table></figure><h3 id="7-拼接join"><a href="#7-拼接join" class="headerlink" title="7.拼接join"></a>7.拼接join</h3><blockquote><p>不能写成str.join(‘\‘)<br>join被指定为字符串其中的一个用法<br>join的参数支持一切可以迭代的对象（列表，元组，字典，文件，集合，生成器）<br>推荐使用join替代加号拼接<br>+会频繁进行内存复制和触发垃圾回收机制</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=[<span class="string">&#x27;D:&#x27;</span>, <span class="string">&#x27;software&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;\\&#x27;</span>.join(<span class="built_in">str</span>)<span class="comment">#转义字符</span></span><br><span class="line">print(<span class="built_in">str</span>)              <span class="comment">#D:\software\python</span></span><br><span class="line"><span class="built_in">str</span>=[<span class="string">&#x27;D:&#x27;</span>, <span class="string">&#x27;software&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>)</span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出D:softwarepython</span></span><br></pre></td></tr></table></figure><h1 id="第四章——列表list"><a href="#第四章——列表list" class="headerlink" title="第四章——列表list[ ]"></a>第四章——列表list[ ]</h1><blockquote><ul><li>1.非常类似于数组</li></ul></blockquote><blockquote><ul><li>2.可以同时使用字符串，整形，浮点型等等</li></ul></blockquote><blockquote><ul><li>3.可以为负数下标</li></ul></blockquote><blockquote><ul><li>4.可以嵌套，类似二维数组</li></ul></blockquote><h2 id="1、遍历列表"><a href="#1、遍历列表" class="headerlink" title="1、遍历列表"></a>1、遍历列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#namelist=[] #定义空列表</span></span><br><span class="line"></span><br><span class="line">namelist=[<span class="string">&quot;xiaozhang&quot;</span>,<span class="string">&quot;2.3&quot;</span>,<span class="string">&quot;10&quot;</span>]<span class="comment">#可以为不同类型的变量，储存混合类型</span></span><br><span class="line"></span><br><span class="line">print(namelist[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">print(namelist[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(namelist[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">  print(namelist[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">-2</span>,<span class="number">0</span>):<span class="comment">#输出最后两个元素</span></span><br><span class="line"></span><br><span class="line">  print(namelist[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> namelist:</span><br><span class="line"></span><br><span class="line">  print(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(namelist))<span class="comment">#输出长度</span></span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(namelist):</span><br><span class="line"></span><br><span class="line">  print(namelist[i])</span><br><span class="line"></span><br><span class="line">  i+=<span class="number">1</span><span class="comment">#不能写i++</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、数据操作"><a href="#2、数据操作" class="headerlink" title="2、数据操作"></a>2、数据操作</h2><h3 id="1-append增加"><a href="#1-append增加" class="headerlink" title="1. append增加"></a>1. append增加</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">namelist=[<span class="string">&quot;xiaozhang&quot;</span>,<span class="string">&quot;2.3&quot;</span>,<span class="string">&quot;10&quot;</span>]<span class="comment">#可以为不同类型的变量，储存混合类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> namelist:</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加</span></span><br><span class="line"></span><br><span class="line">nametemp=<span class="built_in">input</span>(<span class="string">&quot;请输入添加的数据&quot;</span>)</span><br><span class="line">namelist.append(nametemp)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> namelist:</span><br><span class="line"></span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出结果多了append的内容[&quot;xiaozhang&quot;,&quot;2.3&quot;,&quot;10&quot;, ____]</span></span><br></pre></td></tr></table></figure><blockquote><p>#特别的，使用乘法<br>a=[1]<br>   a=a*3<br>#最后a就是[1, 1, 1]</p></blockquote><h3 id="2-append和extend区别"><a href="#2-append和extend区别" class="headerlink" title="2. append和extend区别"></a>2. append和extend区别</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#append和extend的区别</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">b=[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">a.append(b)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果为[1,2,[3,4]]，将一个列表作为整个整体，加入列表中</span></span><br><span class="line"></span><br><span class="line">a.extend(b)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果为[1,2,[3,4],3,4]，将b列表中的每一个，逐一加入列表中</span></span><br></pre></td></tr></table></figure><h3 id="3-insert用法"><a href="#3-insert用法" class="headerlink" title="3. insert用法"></a>3. insert用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#insert用法</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">a.insert(<span class="number">1</span>,<span class="number">200</span>)<span class="comment">#第一个表示下标，第二个表示元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为0,200,1,2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-del删除"><a href="#4-del删除" class="headerlink" title="4. del删除"></a>4. del删除</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#del删除</span></span><br><span class="line"></span><br><span class="line">a=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>]<span class="comment">#可以出现重复数据</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]<span class="comment">#删除指定下标的元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为[0, 10, 30, 10, 40, 50]</span></span><br><span class="line"></span><br><span class="line">a.pop()<span class="comment">#弹出末尾最后一个元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为[0, 10, 30, 10, 40]</span></span><br><span class="line"></span><br><span class="line">a.remove(<span class="number">10</span>)<span class="comment">#删除第一个值为10的元素</span></span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#结果为[0, 30, 10, 40]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#[]修改</span></span><br><span class="line"></span><br><span class="line">b=[<span class="string">&quot;chasing&quot;</span>]</span><br><span class="line"></span><br><span class="line">b[<span class="number">0</span>]=<span class="string">&quot;shu_chasing&quot;</span><span class="comment">#直接修改就可以了</span></span><br></pre></td></tr></table></figure><h3 id="5-index查找与count计数"><a href="#5-index查找与count计数" class="headerlink" title="5. index查找与count计数"></a>5. index查找与count计数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">findname=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入想找的元素&quot;</span>))<span class="comment">#记得修改为整数型</span></span><br><span class="line"><span class="keyword">if</span> findname <span class="keyword">in</span> a:</span><br><span class="line">  print(<span class="string">&quot;找到了一样的元素&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">&quot;没有找到相同的元素&quot;</span>)</span><br><span class="line"><span class="comment">#index查找</span></span><br><span class="line">a=[<span class="number">0</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>]</span><br><span class="line">print(a.index(<span class="number">10</span>,<span class="number">1</span>,<span class="number">4</span>))<span class="comment">#返回下标1，在1-3范围内查找元素10，这个范围左闭右开——[1,4)</span></span><br><span class="line">print(a.index(<span class="number">10</span>,<span class="number">1</span>,<span class="number">7</span>))<span class="comment">#返回第一个出现的下标1，在1-6范围内查找元素10，这个范围左闭右开——[1,7)</span></span><br><span class="line"><span class="comment">#count计数</span></span><br><span class="line">print(a.count(<span class="number">10</span>))<span class="comment">#统计查找的元素出现了几次</span></span><br></pre></td></tr></table></figure><blockquote><p>list.index(item)        #从头到尾找</p><p>list.index(item, start, end)    #在开始和结束之间找</p></blockquote><h3 id="6-reverse反转和sort排序"><a href="#6-reverse反转和sort排序" class="headerlink" title="6.reverse反转和sort排序"></a>6.reverse反转和sort排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#反转和排序</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[1, 4, 2, 3]</span></span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[3, 2, 4, 1]</span></span><br><span class="line"></span><br><span class="line">a.sort()</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">print(a)<span class="comment">#输出[4, 3, 2, 1]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、列表的嵌套"><a href="#3、列表的嵌套" class="headerlink" title="3、列表的嵌套"></a>3、列表的嵌套</h2><blockquote><p>类似于二维数组</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[[<span class="number">10</span>,<span class="number">20</span>],[<span class="number">40</span>,<span class="number">50</span>],[<span class="number">30</span>,<span class="number">60</span>,<span class="number">70</span>]]</span><br><span class="line">print(a[<span class="number">0</span>])<span class="comment">#输出[10, 20]</span></span><br><span class="line">print(a[<span class="number">1</span>][<span class="number">0</span>])<span class="comment">#输出40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">offices=[[],[],[]]</span><br><span class="line">names=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    index= random.randint(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">    offices[index].append(name)</span><br><span class="line">i=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> office <span class="keyword">in</span> offices:</span><br><span class="line">    print(<span class="string">&quot;办公室%d的人数是：%d&quot;</span>%(i,<span class="built_in">len</span>(office)))</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> office:</span><br><span class="line">        print(<span class="string">&quot;%s&quot;</span>%name,end=<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot;n&quot;</span>)</span><br><span class="line"><span class="comment">#以下是随机结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#办公室1的人数是：0</span></span><br><span class="line"><span class="comment">#办公室2的人数是：2</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line"><span class="comment">#办公室3的人数是：3</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><blockquote><p>sort默认是归并排序<br>实际上, sort有三个参数<br>sort(func, key, reverse)</p></blockquote><h1 id="第五章——元组tuple"><a href="#第五章——元组tuple" class="headerlink" title="第五章——元组tuple( )"></a>第五章——元组tuple( )</h1><h2 id="1、创建"><a href="#1、创建" class="headerlink" title="1、创建"></a>1、创建</h2><blockquote><p>tuple(元组)</p><ul><li>与list类似，不同处在于tuple不能修改元素，</li><li>写在小括号里，元素之间用逗号隔开</li><li>元素不可变，但是包含可变对象</li></ul></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=(<span class="number">2.33</span>,<span class="string">&#x27;abcd&#x27;</span>,<span class="number">786</span>,)</span><br><span class="line">t2=(<span class="number">1</span>,)</span><br><span class="line">t3=(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="number">2.3</span>])</span><br><span class="line">print(t1)<span class="comment">#(2.33, &#x27;abcd&#x27;, 786)</span></span><br><span class="line">print(t2)<span class="comment">#(1,)</span></span><br><span class="line">print(t3[<span class="number">2</span>][<span class="number">1</span>]) <span class="comment">#2.3</span></span><br></pre></td></tr></table></figure><p>如果创建空的元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1=()<span class="comment">#空的元组</span></span><br><span class="line">tup2=(<span class="number">50</span>)<span class="comment">#整形</span></span><br><span class="line">tup3=(<span class="number">100</span>,)<span class="comment">#含有一个元素的元组，如果只有一个，则需要加逗号,在这里也可以写tup3=100,</span></span><br><span class="line"><span class="comment">#可以不需要小括号，但是一定要逗号</span></span><br><span class="line">tup4=(<span class="number">150</span>,<span class="number">200</span>)<span class="comment">#含有多个元素的元组</span></span><br><span class="line">print(<span class="built_in">type</span>(tup1))</span><br><span class="line">print(tup2)</span><br><span class="line">print(<span class="built_in">type</span>(tup2))</span><br><span class="line">print(tup3)</span><br><span class="line">print(<span class="built_in">type</span>(tup3))</span><br><span class="line">print(tup4)</span><br><span class="line">print(<span class="built_in">type</span>(tup4))</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#50</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;int&#x27;&gt;，这里不加，就是整形</span></span><br><span class="line"><span class="comment">#(100,)</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment">#(150, 200)</span></span><br><span class="line"><span class="comment">#&lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、遍历与切片"><a href="#2、遍历与切片" class="headerlink" title="2、遍历与切片"></a>2、遍历与切片</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1=(<span class="string">&quot;abc&quot;</span>,<span class="number">10</span>,<span class="number">23.4</span>)</span><br><span class="line"></span><br><span class="line">print(tup1)<span class="comment">#输出(&#x27;abc&#x27;, 10, 23.4)</span></span><br><span class="line"></span><br><span class="line">print(tup1[<span class="number">-1</span>])<span class="comment">#输出23.4</span></span><br><span class="line"></span><br><span class="line">print(tup1[<span class="number">0</span>:<span class="number">2</span>])<span class="comment"># 输出(&#x27;abc&#x27;, 10)，这里只有[0,2)，即[0,1]，左闭右开</span></span><br></pre></td></tr></table></figure><h2 id="3、增加"><a href="#3、增加" class="headerlink" title="3、增加"></a>3、增加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1=(<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line"><span class="comment">#tup[1]=100</span></span><br><span class="line"><span class="comment">#报错，不能修改tup的值，&#x27;tuple&#x27; object does not support item assignment</span></span><br></pre></td></tr></table></figure><ul><li>不能“新增”</li><li>只能设置新的变量</li><li>分配新的空间<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1=(<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line">tup2=(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">tup3=tup1+tup2</span><br><span class="line">print(tup3)<span class="comment">#(12, 34, 56, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4、删除"><a href="#4、删除" class="headerlink" title="4、删除"></a>4、删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1=(<span class="number">12</span>,<span class="number">34</span>,<span class="number">56</span>)</span><br><span class="line">print(<span class="string">&quot;删除前&quot;</span>)</span><br><span class="line">print(tup1)</span><br><span class="line"><span class="keyword">del</span> tup1<span class="comment">#删除了整个元组变量，可以完成，以后不能访问tup1</span></span><br><span class="line"><span class="comment">#print(&quot;删除后&quot;)</span></span><br><span class="line"><span class="comment">#print(tup1)</span></span><br><span class="line"><span class="comment">#报错，不能访问tup1的内容，name &#x27;tup1&#x27; is not defined</span></span><br><span class="line"><span class="comment">#del tup[1]</span></span><br><span class="line"><span class="comment">#报错，不能删除某一个下标，&#x27;tuple&#x27; object doesn&#x27;t support item deletion</span></span><br></pre></td></tr></table></figure><h2 id="5、基本操作"><a href="#5、基本操作" class="headerlink" title="5、基本操作"></a>5、基本操作</h2><table><thead><tr><th>操作名称</th><th>操作方法</th><th>举例</th></tr></thead><tbody><tr><td>元素成员关系</td><td>in</td><td>2 in list1</td></tr><tr><td>得到重复元素数量</td><td>count</td><td>tup1.count(1)</td></tr></tbody></table><table><thead><tr><th>操作名称</th><th>操作方法</th><th>举例</th></tr></thead><tbody><tr><td>访问元组中的元素</td><td>通过下标直接访问</td><td>print(tup[10])</td></tr><tr><td>遍历元组</td><td>通过for循环</td><td>for i in tup:    print(i)</td></tr><tr><td>元组的切片</td><td>使用[ :  : ]</td><td>tup[2:10:1]，[::-1]表示倒序</td></tr><tr><td>元组的加法操作</td><td>+</td><td>tup3=tup1+tup2</td></tr></tbody></table><h2 id="6、基本函数"><a href="#6、基本函数" class="headerlink" title="6、基本函数"></a>6、基本函数</h2><table><thead><tr><th>函数名称</th><th>操作方法</th><th>备注</th></tr></thead><tbody><tr><td>获取数组长度</td><td>len()</td><td>len(tup)-1就是最后一个元素的下标</td></tr><tr><td>获取元组元素最大值</td><td>max()</td><td></td></tr><tr><td>获取元组元素最小值</td><td>min()</td><td></td></tr><tr><td>强制类型转换</td><td>tuple()</td><td></td></tr><tr><td>获取随机元素</td><td>choice()</td><td>加上import random 模块</td></tr></tbody></table><h2 id="7、字符串操作"><a href="#7、字符串操作" class="headerlink" title="7、字符串操作"></a>7、字符串操作</h2><blockquote><p>*同元组一样，字符串也是不能被修改的<br>如果必须修改，则需要使用切片和拼接</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;cgasing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">str</span>[:<span class="number">1</span>]+<span class="string">&quot;h&quot;</span>+<span class="built_in">str</span>[<span class="number">2</span>:]<span class="comment">#修改第二个</span></span><br><span class="line"></span><br><span class="line">print(<span class="built_in">str</span>)<span class="comment">#输出chasing</span></span><br></pre></td></tr></table></figure><h1 id="第六章——序列"><a href="#第六章——序列" class="headerlink" title="第六章——序列"></a>第六章——序列</h1><h2 id="1、总结"><a href="#1、总结" class="headerlink" title="1、总结"></a>1、总结</h2><p>列表、元组、字符串的共同点</p><blockquote><p>可以通过索引得到每一个元素<br>默认索引从0开始<br>可以切片得到范围内的集合<br>有共同操作符（重复、拼接、成员）<br><em>以上统称为——序列</em></p></blockquote><h2 id="2、操作函数"><a href="#2、操作函数" class="headerlink" title="2、操作函数"></a>2、操作函数</h2><table><thead><tr><th>函数名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>list([iterable])</td><td>强制将可迭代对象转换为列表</td><td>a=list((1,2,3))</td></tr><tr><td>tuple([iterable])</td><td>强制将可迭代对象转换为元组</td><td>a=tuple((1,2,3))</td></tr><tr><td>str(obj)</td><td>强制将对象转换为字符串</td><td>a=str(10)</td></tr><tr><td>len(sub)</td><td>返回sub参数长度</td><td>len(str1)</td></tr><tr><td>max()</td><td>返回参数集合最大值</td><td>max(list)</td></tr><tr><td>min()</td><td>返回参数集合最小值（保证数据类型统一）</td><td>min(list)</td></tr><tr><td>sum(iterable[, start])</td><td>返回所有元素值的总和</td><td>sum(list,5)</td></tr><tr><td>sorted(iterable,key=None,reverse=False)</td><td>返回排序后的列表</td><td>sorted(list)</td></tr><tr><td>reversed(sequence)</td><td>返回逆向迭代序列的结果</td><td>reversed(list)</td></tr><tr><td>enumerate(iterable)</td><td>生成一个二元组构成的一个迭代对象</td><td>见下文</td></tr><tr><td>zip(iter1[,iter2[…]])</td><td>返回各个可迭代参数共同组成的元组</td><td>见下文</td></tr></tbody></table><p>enumerate用法，可以单独理解为枚举</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#enumerate</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;chasing&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">str</span>):</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">str</span>):</span><br><span class="line">print(i,j)</span><br><span class="line"><span class="comment">#(0, &#x27;c&#x27;)</span></span><br><span class="line"><span class="comment">#(1, &#x27;h&#x27;)</span></span><br><span class="line"><span class="comment">#(2, &#x27;a&#x27;)</span></span><br><span class="line"><span class="comment">#(3, &#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">#(4, &#x27;i&#x27;)</span></span><br><span class="line"><span class="comment">#(5, &#x27;n&#x27;)</span></span><br><span class="line"><span class="comment">#(6, &#x27;g&#x27;)</span></span><br><span class="line"><span class="comment"># 0 c</span></span><br><span class="line"><span class="comment"># 1 h</span></span><br><span class="line"><span class="comment"># 2 a</span></span><br><span class="line"><span class="comment"># 3 s</span></span><br><span class="line"><span class="comment"># 4 i</span></span><br><span class="line"><span class="comment"># 5 n</span></span><br><span class="line"><span class="comment"># 6 g</span></span><br></pre></td></tr></table></figure><p>zip用法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1=[<span class="number">1</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">str1=<span class="string">&quot;chasing&quot;</span></span><br><span class="line">turple1=(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(list1, str1, turple1):</span><br><span class="line">print(i)</span><br><span class="line"><span class="comment">#(1, &#x27;c&#x27;, 2)</span></span><br><span class="line"><span class="comment">#(7, &#x27;h&#x27;, 4)</span></span><br><span class="line"><span class="comment">#(3, &#x27;a&#x27;, 6)</span></span><br><span class="line"><span class="comment">#(5, &#x27;s&#x27;, 8)</span></span><br><span class="line"><span class="comment">#(6, &#x27;i&#x27;, 10)</span></span><br></pre></td></tr></table></figure><h1 id="第七章——字典"><a href="#第七章——字典" class="headerlink" title="第七章——字典 { }"></a>第七章——字典 { }</h1><h2 id="1、字典dict定义"><a href="#1、字典dict定义" class="headerlink" title="1、字典dict定义"></a>1、字典dict定义</h2><blockquote><p>字典，即散列表</p><p>是无序对象的集合，使用键-值(key-value)存储，具有极快的速度</p><p>查找，插入、删除都为O(1)复杂度</p><p>键(key)必须使用不可变类型<br>同一个字典的key是唯一的<br>类似于json的对象，C++的map，数据结构的红黑树，哈希表</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字典的定义</span></span><br><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">print(info[<span class="string">&quot;name&quot;</span>])<span class="comment">#输出chasing</span></span><br><span class="line">print(info[<span class="string">&quot;age&quot;</span>])<span class="comment">#输出18</span></span><br><span class="line"><span class="comment">#print(info[&quot;gender&quot;])</span></span><br><span class="line"><span class="comment">#错误，KeyError: &#x27;gender&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接访问</span></span><br><span class="line">print(info.get(<span class="string">&quot;gender&quot;</span>))</span><br><span class="line"><span class="comment">#输出None，没有找到默认返回None</span></span><br><span class="line">print(info.get(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;not found&quot;</span>))<span class="comment">#修改默认的值</span></span><br><span class="line"><span class="comment">#输出not found，没有找到返回not found</span></span><br></pre></td></tr></table></figure><h2 id="2、添加"><a href="#2、添加" class="headerlink" title="2、添加"></a>2、添加</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">newID=<span class="built_in">input</span>(<span class="string">&quot;请输入新的学号：&quot;</span>)</span><br><span class="line">info[<span class="string">&quot;ID&quot;</span>]=newID</span><br><span class="line">print(info[<span class="string">&quot;ID&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;删除前：%s&quot;</span>%info[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="keyword">del</span> info[<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="comment">#使用del info则删除整个字典</span></span><br><span class="line"><span class="comment">#print(&quot;删除后：%s&quot;%info[&quot;name&quot;])#删除后键值对后，再次访问就会报错</span></span><br><span class="line"><span class="comment">#报错KeyError &#x27;name&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4、清除"><a href="#4、清除" class="headerlink" title="4、清除"></a>4、清除</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;19&quot;</span>&#125;</span><br><span class="line">print(<span class="string">&quot;删除前：%s&quot;</span>%info)<span class="comment">#删除前：&#123;&#x27;name&#x27;: &#x27;chasing&#x27;, &#x27;age&#x27;: &#x27;18&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">info.clear()       <span class="comment">#只是清空</span></span><br><span class="line">print(<span class="string">&quot;删除后：%s&quot;</span>%info)<span class="comment">#删除后：&#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="5、修改"><a href="#5、修改" class="headerlink" title="5、修改"></a>5、修改</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;19&quot;</span>&#125;</span><br><span class="line">info[<span class="string">&quot;age&quot;</span>]=<span class="number">20</span></span><br><span class="line">print(info[<span class="string">&quot;age&quot;</span>])<span class="comment">#输出20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、查找"><a href="#6、查找" class="headerlink" title="6、查找"></a>6、查找</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">19120397</span>&#125;</span><br><span class="line">print(info.keys())<span class="comment">#得到所有的键dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;id&#x27;])</span></span><br><span class="line">print(info.values()) <span class="comment">#得到所有的值dict_values([&#x27;chasing&#x27;, &#x27;18&#x27;, 19120397])</span></span><br><span class="line">print(info.items())<span class="comment">#得到所有的项dict_items([(&#x27;name&#x27;, &#x27;chasing&#x27;), (&#x27;age&#x27;, &#x27;18&#x27;), (&#x27;id&#x27;, 19120397)])</span></span><br><span class="line"><span class="comment">#每个键值对都是元组</span></span><br></pre></td></tr></table></figure><h2 id="7、遍历所有的键、值、项"><a href="#7、遍历所有的键、值、项" class="headerlink" title="7、遍历所有的键、值、项"></a>7、遍历所有的键、值、项</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">info = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;chasing&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;18&quot;</span>,<span class="string">&quot;id&quot;</span>:<span class="number">19120397</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.keys():</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info.values():</span><br><span class="line">print(i)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> info.iems():</span><br><span class="line">print(<span class="string">&quot;%s\t%s&quot;</span>%(i,j))</span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># age</span></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"><span class="comment"># chasing</span></span><br><span class="line"><span class="comment"># 18</span></span><br><span class="line"><span class="comment"># 19120397</span></span><br><span class="line"><span class="comment"># name    chasing</span></span><br><span class="line"><span class="comment"># age     18</span></span><br><span class="line"><span class="comment"># id      19120397</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第八章——集合"><a href="#第八章——集合" class="headerlink" title="第八章——集合 { }"></a>第八章——集合 { }</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><blockquote><p>set和dict类似，也是key的集合，但是不储存value<br>同C++一样，set不能存相同的元素，重复元素自动过滤<br>但是不同的是，set是无序的<br>操作方法与其他相同<br>for、update、add、remove、pop、clear、del等等</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">print(s)<span class="comment">#输出&#123;1, 2, 3&#125;</span></span><br><span class="line">s=<span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line">print(s)<span class="comment">#输出&#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2、小结"><a href="#2、小结" class="headerlink" title="2、小结"></a>2、小结</h2><table><thead><tr><th></th><th>是否有序</th><th>是否可变类型</th></tr></thead><tbody><tr><td><strong>列表[]</strong></td><td>有序</td><td>可变类型</td></tr><tr><td>元组()</td><td>有序</td><td>不可变类型</td></tr><tr><td><strong>字典{}</strong></td><td>无序</td><td>key不可变，value可变</td></tr><tr><td>集合{}</td><td>无序</td><td>可变类型，不重复</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><h1 id="第九章——函数"><a href="#第九章——函数" class="headerlink" title="第九章——函数"></a>第九章——函数</h1><p>提高编码效率，减少重复</p><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><ol><li>定义方式：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">code</span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure></li><li>demo：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printname</span>():</span></span><br><span class="line">print(<span class="string">&quot;chasing&quot;</span>)</span><br><span class="line">printname()<span class="comment">#输出chasing</span></span><br></pre></td></tr></table></figure><h2 id="2、带参数函数"><a href="#2、带参数函数" class="headerlink" title="2、带参数函数"></a>2、带参数函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">c=a+b</span><br><span class="line">print(c)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">#输出3</span></span><br></pre></td></tr></table></figure><h2 id="3、带返回值函数"><a href="#3、带返回值函数" class="headerlink" title="3、带返回值函数"></a>3、带返回值函数</h2><ol><li>返回单个值</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">c=a+b</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">print(add(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">#输出3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>返回多个值<br> 和lua相同</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divid</span>(<span class="params">a,b</span>):</span></span><br><span class="line">shang=a//b</span><br><span class="line">yushu=a%b</span><br><span class="line"><span class="keyword">return</span> shang,yushu<span class="comment">#多个返回值用逗号分隔</span></span><br><span class="line">sh,yu=devid(<span class="number">5</span>,<span class="number">2</span>)</span><br><span class="line">print(<span class="string">&quot;商：%d，余数：%d&quot;</span>%(sh,yu))<span class="comment">#输出商：2，余数：1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>局部变量和全局变量<br> &lt;1&gt;在函数内的作为局部变量<br> &lt;2&gt;在函数外定义的为全局变量</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">a=<span class="number">10</span><span class="comment">#优先使用全局变量</span></span><br><span class="line">print(a)</span><br><span class="line">a=<span class="number">200</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">print(a)</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 200</span></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在函数中的使用全局变量</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line"><span class="keyword">global</span> a=<span class="number">10</span><span class="comment">#添加global</span></span><br><span class="line">print(a)</span><br><span class="line">a=<span class="number">200</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span>():</span></span><br><span class="line">print(a)</span><br><span class="line">test1()</span><br><span class="line">test2()</span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 200</span></span><br><span class="line"><span class="comment"># 200</span></span><br></pre></td></tr></table></figure><h1 id="第十章——拷贝"><a href="#第十章——拷贝" class="headerlink" title="第十章——拷贝"></a>第十章——拷贝</h1><h2 id="1、元组默认深拷贝"><a href="#1、元组默认深拷贝" class="headerlink" title="1、元组默认深拷贝"></a>1、元组默认深拷贝</h2><blockquote><p>直接赋值：其实就是对象的引用（别名）。<br>浅拷贝(copy)：拷贝父对象，不会拷贝对象的内部的子对象。<br>深拷贝(deepcopy)： copy 模块的 deepcopy 方法，完全拷贝了父对象及其子对象。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tuple2 = <span class="built_in">tuple</span>(tuple1)</span><br><span class="line">print(tuple2)</span><br><span class="line">print(<span class="string">&quot;tuple1==tuple2 ?&quot;</span>,tuple1==tuple2)</span><br><span class="line">print(<span class="string">&quot;tuple1 is tuple2 ?&quot;</span>,tuple1 <span class="keyword">is</span> tuple2)</span><br><span class="line"></span><br><span class="line">tuple3 = copy.copy(tuple1)</span><br><span class="line">print(tuple3)</span><br><span class="line">print(<span class="string">&quot;tuple1==tuple3 ?&quot;</span>,tuple1==tuple3)</span><br><span class="line">print(<span class="string">&quot;tuple1 is tuple3 ?&quot;</span>,tuple1 <span class="keyword">is</span> tuple3)</span><br><span class="line"></span><br><span class="line">tuple4 = tuple1[:]</span><br><span class="line">print(tuple4)</span><br><span class="line">print(<span class="string">&quot;tuple1==tuple4 ?&quot;</span>,tuple1==tuple4)</span><br><span class="line">print(<span class="string">&quot;tuple1 is tuple4 ?&quot;</span>,tuple1 <span class="keyword">is</span> tuple4)</span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#tuple1==tuple2 ? True</span></span><br><span class="line"><span class="comment">#tuple1 is tuple2 ? True</span></span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#tuple1==tuple3 ? True</span></span><br><span class="line"><span class="comment">#tuple1 is tuple3 ? True</span></span><br><span class="line"><span class="comment">#(1, 2, 3)</span></span><br><span class="line"><span class="comment">#tuple1==tuple4 ? True</span></span><br><span class="line"><span class="comment">#tuple1 is tuple4 ? True</span></span><br></pre></td></tr></table></figure><h2 id="2、地址类型的传递"><a href="#2、地址类型的传递" class="headerlink" title="2、地址类型的传递"></a>2、地址类型的传递</h2><blockquote><p>Python中对象的赋值都是进行对象引用（内存地址）传递<br>使用copy.copy()，可以进行对象的浅拷贝，它复制了对象，但对于对象中的元素，依然使用原始的引用.<br>如果需要复制一个容器对象，以及它里面的所有元素（包含元素的子元素），可以使用copy.deepcopy()进行深拷贝<br>对于非容器类型（如数字、字符串、和其他’原子’类型的对象）没有被拷贝一说</p></blockquote><h1 id="第十一章-面向对象"><a href="#第十一章-面向对象" class="headerlink" title="第十一章 面向对象"></a>第十一章 面向对象</h1><h2 id="1、命名规则"><a href="#1、命名规则" class="headerlink" title="1、命名规则"></a>1、命名规则</h2><h3 id="1-1-单前导下划线-var"><a href="#1-1-单前导下划线-var" class="headerlink" title="1.1. 单前导下划线 _var"></a>1.1. 单前导下划线 _var</h3><p>当涉及到变量和方法名称时，单个下划线前缀有一个约定俗成的含义。 它是对程序员的一个提示 - 意味着Python社区一致认为它应该是什么意思，但程序的行为不受影响。</p><h3 id="1-2-单末尾下划线-var"><a href="#1-2-单末尾下划线-var" class="headerlink" title="1.2. 单末尾下划线 var_"></a>1.2. 单末尾下划线 var_</h3><p>有时候，一个变量的最合适的名称已经被一个关键字所占用。 因此，像class或def这样的名称不能用作Python中的变量名称。 在这种情况下，你可以附加一个下划线来解决命名冲突</p><h3 id="1-1-33-双前导下划线-var"><a href="#1-1-33-双前导下划线-var" class="headerlink" title="1.1.33. 双前导下划线 __var"></a>1.1.33. 双前导下划线 __var</h3><p>到目前为止，我们所涉及的所有命名模式的含义，来自于已达成共识的约定。 而对于以双下划线开头的Python类的属性（包括变量和方法），情况就有点不同了。</p><p>双下划线前缀会导致Python解释器重写属性名称，以避免子类中的命名冲突。</p><p>这也叫做名称修饰（name mangling） - 解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_MangledGlobal__mangled = <span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MangledGlobal</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="keyword">return</span> __mangled</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MangledGlobal().test()</span><br><span class="line"><span class="number">23</span></span><br></pre></td></tr></table></figure><p>双下划线对程序员完全透明 ，即其修饰的方法、变量，都不能被访问到</p><p>AttributeError: “‘ManglingTest’ object has no attribute ‘__mangled’”</p><p>解释器会对其进行修饰，为了防止变量在子类中被重写。<br><code>在这个例子中，我声明了一个名为_MangledGlobal__mangled的全局变量。然后我在名为MangledGlobal的类的上下文中访问变量。由于名称修饰，我能够在类的test()方法内，以__mangled来引用_MangledGlobal__mangled全局变量。Python解释器自动将名称__mangled扩展为_MangledGlobal__mangled，因为它以两个下划线字符开头。这表明名称修饰不是专门与类属性关联的。它适用于在类上下文中使用的两个下划线字符开头的任何名称。 </code></p><h3 id="1-1-4-双前导和双末尾下划线-var"><a href="#1-1-4-双前导和双末尾下划线-var" class="headerlink" title="1.1.4. 双前导和双末尾下划线 var"></a>1.1.4. 双前导和双末尾下划线 <em>var</em></h3><p>也许令人惊讶的是，如果一个名字同时以双下划线开始和结束，则不会应用名称修饰。 由双下划线前缀和后缀包围的变量不会被Python解释器修改</p><h3 id="1-1-5-单下划线"><a href="#1-1-5-单下划线" class="headerlink" title="1.1.5.单下划线 _"></a>1.1.5.单下划线 _</h3><p>按照习惯，有时候单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="笔记" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="python" scheme="http://example.com/categories/%E7%AC%94%E8%AE%B0/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="基础教程" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于WSL的Ubuntu子系统安装</title>
    <link href="http://example.com/2020/10/01/%E5%9F%BA%E4%BA%8EWSL%E7%9A%84Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2020/10/01/%E5%9F%BA%E4%BA%8EWSL%E7%9A%84Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2020-10-01T08:20:43.000Z</published>
    <updated>2020-12-14T09:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Welcome to my blog, enter password to read.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e8e800365def5b96b3b17567921864af094b4a8152476e0ca95dae15c8462eef"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Welcome to my blog, enter password to read.</summary>
    
    
    
    <category term="Linux" scheme="http://example.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="WSL" scheme="http://example.com/tags/WSL/"/>
    
    <category term="Ubuntu" scheme="http://example.com/tags/Ubuntu/"/>
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
  </entry>
  
</feed>
